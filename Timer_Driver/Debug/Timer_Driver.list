
Timer_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a38  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b68  08000b68  00010b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b80  08000b80  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b80  08000b80  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b80  08000b80  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b80  08000b80  00010b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b84  08000b84  00010b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000004  08000b8c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08000b8c  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038d1  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a61  00000000  00000000  000238fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00024360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00024470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ccf  00000000  00000000  00024528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023e9  00000000  00000000  000361f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a128  00000000  00000000  000385e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00092708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000300  00000000  00000000  0009275c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b50 	.word	0x08000b50

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000b50 	.word	0x08000b50

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	; 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <Console_Init>:
#include "Console.h"

char buff[1000];

void Console_Init(int32_t baudrate)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <Console_Init+0x68>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a16      	ldr	r2, [pc, #88]	; (800055c <Console_Init+0x68>)
 8000502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000506:	6193      	str	r3, [r2, #24]
	GPIO_Pin_Setup(GPIOA, 9, 0b1011);
 8000508:	220b      	movs	r2, #11
 800050a:	2109      	movs	r1, #9
 800050c:	4814      	ldr	r0, [pc, #80]	; (8000560 <Console_Init+0x6c>)
 800050e:	f000 f82d 	bl	800056c <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 10, 0b1011);
 8000512:	220b      	movs	r2, #11
 8000514:	210a      	movs	r1, #10
 8000516:	4812      	ldr	r0, [pc, #72]	; (8000560 <Console_Init+0x6c>)
 8000518:	f000 f828 	bl	800056c <GPIO_Pin_Setup>
	USART1 -> CR1 |= USART_CR1_UE;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <Console_Init+0x70>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <Console_Init+0x70>)
 8000522:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000526:	60d3      	str	r3, [r2, #12]
	USART1 -> BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <Console_Init+0x74>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	0112      	lsls	r2, r2, #4
 8000530:	fbb3 f3f2 	udiv	r3, r3, r2
 8000534:	011a      	lsls	r2, r3, #4
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <Console_Init+0x70>)
 8000538:	609a      	str	r2, [r3, #8]
	USART1 -> CR1 |= USART_CR1_TE ;
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <Console_Init+0x70>)
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	4a09      	ldr	r2, [pc, #36]	; (8000564 <Console_Init+0x70>)
 8000540:	f043 0308 	orr.w	r3, r3, #8
 8000544:	60d3      	str	r3, [r2, #12]
	USART1 -> CR1 |=  USART_CR1_RE  ;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <Console_Init+0x70>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	4a06      	ldr	r2, [pc, #24]	; (8000564 <Console_Init+0x70>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	60d3      	str	r3, [r2, #12]
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40010800 	.word	0x40010800
 8000564:	40013800 	.word	0x40013800
 8000568:	20000000 	.word	0x20000000

0800056c <GPIO_Pin_Setup>:
#include "GPIO.h"



void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
 8000578:	4613      	mov	r3, r2
 800057a:	70bb      	strb	r3, [r7, #2]
	if(Port == GPIOA)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a4a      	ldr	r2, [pc, #296]	; (80006a8 <GPIO_Pin_Setup+0x13c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d12b      	bne.n	80005dc <GPIO_Pin_Setup+0x70>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 8000584:	78bb      	ldrb	r3, [r7, #2]
 8000586:	2b0f      	cmp	r3, #15
 8000588:	d002      	beq.n	8000590 <GPIO_Pin_Setup+0x24>
 800058a:	78bb      	ldrb	r3, [r7, #2]
 800058c:	2b0b      	cmp	r3, #11
 800058e:	d106      	bne.n	800059e <GPIO_Pin_Setup+0x32>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 8000590:	4b46      	ldr	r3, [pc, #280]	; (80006ac <GPIO_Pin_Setup+0x140>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a45      	ldr	r2, [pc, #276]	; (80006ac <GPIO_Pin_Setup+0x140>)
 8000596:	f043 0305 	orr.w	r3, r3, #5
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	e005      	b.n	80005aa <GPIO_Pin_Setup+0x3e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800059e:	4b43      	ldr	r3, [pc, #268]	; (80006ac <GPIO_Pin_Setup+0x140>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a42      	ldr	r2, [pc, #264]	; (80006ac <GPIO_Pin_Setup+0x140>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	2b07      	cmp	r3, #7
 80005ae:	d80a      	bhi.n	80005c6 <GPIO_Pin_Setup+0x5a>
		{
			Port -> CRL |= function << (4*pin);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	78b9      	ldrb	r1, [r7, #2]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	431a      	orrs	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	e00a      	b.n	80005dc <GPIO_Pin_Setup+0x70>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	78b9      	ldrb	r1, [r7, #2]
 80005cc:	78fa      	ldrb	r2, [r7, #3]
 80005ce:	3a08      	subs	r2, #8
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	431a      	orrs	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	605a      	str	r2, [r3, #4]
		}
	}


	if(Port == GPIOB)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a34      	ldr	r2, [pc, #208]	; (80006b0 <GPIO_Pin_Setup+0x144>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d12b      	bne.n	800063c <GPIO_Pin_Setup+0xd0>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d002      	beq.n	80005f0 <GPIO_Pin_Setup+0x84>
 80005ea:	78bb      	ldrb	r3, [r7, #2]
 80005ec:	2b0b      	cmp	r3, #11
 80005ee:	d106      	bne.n	80005fe <GPIO_Pin_Setup+0x92>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 80005f0:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <GPIO_Pin_Setup+0x140>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a2d      	ldr	r2, [pc, #180]	; (80006ac <GPIO_Pin_Setup+0x140>)
 80005f6:	f043 0309 	orr.w	r3, r3, #9
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	e005      	b.n	800060a <GPIO_Pin_Setup+0x9e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <GPIO_Pin_Setup+0x140>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <GPIO_Pin_Setup+0x140>)
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	2b07      	cmp	r3, #7
 800060e:	d80a      	bhi.n	8000626 <GPIO_Pin_Setup+0xba>
		{
			Port -> CRL |= function << (4*pin);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	78b9      	ldrb	r1, [r7, #2]
 8000616:	78fa      	ldrb	r2, [r7, #3]
 8000618:	0092      	lsls	r2, r2, #2
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	431a      	orrs	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	e00a      	b.n	800063c <GPIO_Pin_Setup+0xd0>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	78b9      	ldrb	r1, [r7, #2]
 800062c:	78fa      	ldrb	r2, [r7, #3]
 800062e:	3a08      	subs	r2, #8
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	431a      	orrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	605a      	str	r2, [r3, #4]
		}
	}

	if(Port == GPIOC)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <GPIO_Pin_Setup+0x148>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d12b      	bne.n	800069c <GPIO_Pin_Setup+0x130>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 8000644:	78bb      	ldrb	r3, [r7, #2]
 8000646:	2b0f      	cmp	r3, #15
 8000648:	d002      	beq.n	8000650 <GPIO_Pin_Setup+0xe4>
 800064a:	78bb      	ldrb	r3, [r7, #2]
 800064c:	2b0b      	cmp	r3, #11
 800064e:	d106      	bne.n	800065e <GPIO_Pin_Setup+0xf2>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <GPIO_Pin_Setup+0x140>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a15      	ldr	r2, [pc, #84]	; (80006ac <GPIO_Pin_Setup+0x140>)
 8000656:	f043 0311 	orr.w	r3, r3, #17
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	e005      	b.n	800066a <GPIO_Pin_Setup+0xfe>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <GPIO_Pin_Setup+0x140>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <GPIO_Pin_Setup+0x140>)
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	2b07      	cmp	r3, #7
 800066e:	d80a      	bhi.n	8000686 <GPIO_Pin_Setup+0x11a>
		{
			Port -> CRL |= function << (4*pin);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	78b9      	ldrb	r1, [r7, #2]
 8000676:	78fa      	ldrb	r2, [r7, #3]
 8000678:	0092      	lsls	r2, r2, #2
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	601a      	str	r2, [r3, #0]
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
		}
	}
}
 8000684:	e00a      	b.n	800069c <GPIO_Pin_Setup+0x130>
			Port -> CRH |= function << (4*(pin - 8));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	78b9      	ldrb	r1, [r7, #2]
 800068c:	78fa      	ldrb	r2, [r7, #3]
 800068e:	3a08      	subs	r2, #8
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	431a      	orrs	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	605a      	str	r2, [r3, #4]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40010800 	.word	0x40010800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	40011000 	.word	0x40011000

080006b8 <SystemAPB1_Clock_Speed>:

#define Use_External_Crystal 1
#define Use_Internal_Crystal 2

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <SystemAPB1_Clock_Speed+0x20>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <SystemAPB1_Clock_Speed+0x24>)
 80006c2:	6852      	ldr	r2, [r2, #4]
 80006c4:	0a12      	lsrs	r2, r2, #8
 80006c6:	f002 0207 	and.w	r2, r2, #7
 80006ca:	4905      	ldr	r1, [pc, #20]	; (80006e0 <SystemAPB1_Clock_Speed+0x28>)
 80006cc:	5c8a      	ldrb	r2, [r1, r2]
 80006ce:	40d3      	lsrs	r3, r2
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	20000000 	.word	0x20000000
 80006dc:	40021000 	.word	0x40021000
 80006e0:	08000b78 	.word	0x08000b78

080006e4 <SystemAPB2_Clock_Speed>:

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <SystemAPB2_Clock_Speed+0x20>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <SystemAPB2_Clock_Speed+0x24>)
 80006ee:	6852      	ldr	r2, [r2, #4]
 80006f0:	0ad2      	lsrs	r2, r2, #11
 80006f2:	f002 0207 	and.w	r2, r2, #7
 80006f6:	4905      	ldr	r1, [pc, #20]	; (800070c <SystemAPB2_Clock_Speed+0x28>)
 80006f8:	5c8a      	ldrb	r2, [r1, r2]
 80006fa:	40d3      	lsrs	r3, r2
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20000000 	.word	0x20000000
 8000708:	40021000 	.word	0x40021000
 800070c:	08000b78 	.word	0x08000b78

08000710 <MCU_Clock_Init>:

__STATIC_INLINE void MCU_Clock_Init(int crystal)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	SystemInit();
 8000718:	f000 f8c2 	bl	80008a0 <SystemInit>
	switch (crystal) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d003      	beq.n	800072a <MCU_Clock_Init+0x1a>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d052      	beq.n	80007ce <MCU_Clock_Init+0xbe>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
		}
			break;
	}
}
 8000728:	e098      	b.n	800085c <MCU_Clock_Init+0x14c>
			RCC->CR |= RCC_CR_HSEON ;
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <MCU_Clock_Init+0x154>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a4d      	ldr	r2, [pc, #308]	; (8000864 <MCU_Clock_Init+0x154>)
 8000730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000734:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_HSERDY));
 8000736:	bf00      	nop
 8000738:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <MCU_Clock_Init+0x154>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f9      	beq.n	8000738 <MCU_Clock_Init+0x28>
			FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 8000744:	4b48      	ldr	r3, [pc, #288]	; (8000868 <MCU_Clock_Init+0x158>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a47      	ldr	r2, [pc, #284]	; (8000868 <MCU_Clock_Init+0x158>)
 800074a:	f043 0314 	orr.w	r3, r3, #20
 800074e:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000750:	4b44      	ldr	r3, [pc, #272]	; (8000864 <MCU_Clock_Init+0x154>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a43      	ldr	r2, [pc, #268]	; (8000864 <MCU_Clock_Init+0x154>)
 8000756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075a:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <MCU_Clock_Init+0x154>)
 800075e:	4a41      	ldr	r2, [pc, #260]	; (8000864 <MCU_Clock_Init+0x154>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8000764:	4b3f      	ldr	r3, [pc, #252]	; (8000864 <MCU_Clock_Init+0x154>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	4a3e      	ldr	r2, [pc, #248]	; (8000864 <MCU_Clock_Init+0x154>)
 800076a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800076e:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000770:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <MCU_Clock_Init+0x154>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a3b      	ldr	r2, [pc, #236]	; (8000864 <MCU_Clock_Init+0x154>)
 8000776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077a:	6053      	str	r3, [r2, #4]
			RCC->CR |= RCC_CR_PLLON;
 800077c:	4b39      	ldr	r3, [pc, #228]	; (8000864 <MCU_Clock_Init+0x154>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a38      	ldr	r2, [pc, #224]	; (8000864 <MCU_Clock_Init+0x154>)
 8000782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000786:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_PLLRDY));
 8000788:	bf00      	nop
 800078a:	4b36      	ldr	r3, [pc, #216]	; (8000864 <MCU_Clock_Init+0x154>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f9      	beq.n	800078a <MCU_Clock_Init+0x7a>
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <MCU_Clock_Init+0x154>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	4a32      	ldr	r2, [pc, #200]	; (8000864 <MCU_Clock_Init+0x154>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6053      	str	r3, [r2, #4]
			while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80007a2:	bf00      	nop
 80007a4:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <MCU_Clock_Init+0x154>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0f9      	beq.n	80007a4 <MCU_Clock_Init+0x94>
			SystemCoreClockUpdate();
 80007b0:	f000 f87c 	bl	80008ac <SystemCoreClockUpdate>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 80007b4:	f7ff ff80 	bl	80006b8 <SystemAPB1_Clock_Speed>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MCU_Clock_Init+0x15c>)
 80007be:	601a      	str	r2, [r3, #0]
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 80007c0:	f7ff ff90 	bl	80006e4 <SystemAPB2_Clock_Speed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b29      	ldr	r3, [pc, #164]	; (8000870 <MCU_Clock_Init+0x160>)
 80007ca:	601a      	str	r2, [r3, #0]
			break;
 80007cc:	e046      	b.n	800085c <MCU_Clock_Init+0x14c>
			SystemInit();
 80007ce:	f000 f867 	bl	80008a0 <SystemInit>
			FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <MCU_Clock_Init+0x158>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a24      	ldr	r2, [pc, #144]	; (8000868 <MCU_Clock_Init+0x158>)
 80007d8:	f043 0314 	orr.w	r3, r3, #20
 80007dc:	6013      	str	r3, [r2, #0]
			RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MCU_Clock_Init+0x154>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <MCU_Clock_Init+0x154>)
 80007e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e8:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MCU_Clock_Init+0x154>)
 80007ec:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <MCU_Clock_Init+0x154>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLMULL16;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MCU_Clock_Init+0x154>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MCU_Clock_Init+0x154>)
 80007f8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80007fc:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MCU_Clock_Init+0x154>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <MCU_Clock_Init+0x154>)
 8000804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000808:	6053      	str	r3, [r2, #4]
			RCC->CR |= RCC_CR_PLLON;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MCU_Clock_Init+0x154>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MCU_Clock_Init+0x154>)
 8000810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000814:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_PLLRDY));
 8000816:	bf00      	nop
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MCU_Clock_Init+0x154>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0f9      	beq.n	8000818 <MCU_Clock_Init+0x108>
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MCU_Clock_Init+0x154>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <MCU_Clock_Init+0x154>)
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	6053      	str	r3, [r2, #4]
			while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000830:	bf00      	nop
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MCU_Clock_Init+0x154>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0f9      	beq.n	8000832 <MCU_Clock_Init+0x122>
			SystemCoreClockUpdate();
 800083e:	f000 f835 	bl	80008ac <SystemCoreClockUpdate>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 8000842:	f7ff ff39 	bl	80006b8 <SystemAPB1_Clock_Speed>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MCU_Clock_Init+0x15c>)
 800084c:	601a      	str	r2, [r3, #0]
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 800084e:	f7ff ff49 	bl	80006e4 <SystemAPB2_Clock_Speed>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MCU_Clock_Init+0x160>)
 8000858:	601a      	str	r2, [r3, #0]
			break;
 800085a:	bf00      	nop
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	40022000 	.word	0x40022000
 800086c:	2000040c 	.word	0x2000040c
 8000870:	20000020 	.word	0x20000020

08000874 <main>:

//-u_printf_float


int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	MCU_Clock_Init(Use_External_Crystal);
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff48 	bl	8000710 <MCU_Clock_Init>
	Console_Init(115200);
 8000880:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000884:	f7ff fe36 	bl	80004f4 <Console_Init>

	Timer_Input_PWM(TIM1);
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <main+0x28>)
 800088a:	f000 f8ab 	bl	80009e4 <Timer_Input_PWM>
	float period;

    /* Loop forever */
	for(;;)
	{
		Get_Input_PWM(TIM1, &period, &freq);
 800088e:	1d3a      	adds	r2, r7, #4
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4801      	ldr	r0, [pc, #4]	; (800089c <main+0x28>)
 8000896:	f000 f90d 	bl	8000ab4 <Get_Input_PWM>
 800089a:	e7f8      	b.n	800088e <main+0x1a>
 800089c:	40012c00 	.word	0x40012c00

080008a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <SystemCoreClockUpdate+0xd0>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 030c 	and.w	r3, r3, #12
 80008c6:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d011      	beq.n	80008f2 <SystemCoreClockUpdate+0x46>
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d83a      	bhi.n	800094a <SystemCoreClockUpdate+0x9e>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <SystemCoreClockUpdate+0x36>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d004      	beq.n	80008ea <SystemCoreClockUpdate+0x3e>
 80008e0:	e033      	b.n	800094a <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <SystemCoreClockUpdate+0xd4>)
 80008e4:	4a27      	ldr	r2, [pc, #156]	; (8000984 <SystemCoreClockUpdate+0xd8>)
 80008e6:	601a      	str	r2, [r3, #0]
      break;
 80008e8:	e033      	b.n	8000952 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <SystemCoreClockUpdate+0xd4>)
 80008ec:	4a25      	ldr	r2, [pc, #148]	; (8000984 <SystemCoreClockUpdate+0xd8>)
 80008ee:	601a      	str	r2, [r3, #0]
      break;
 80008f0:	e02f      	b.n	8000952 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <SystemCoreClockUpdate+0xd0>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80008fa:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <SystemCoreClockUpdate+0xd0>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000904:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	0c9b      	lsrs	r3, r3, #18
 800090a:	3302      	adds	r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d106      	bne.n	8000922 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <SystemCoreClockUpdate+0xdc>)
 8000918:	fb02 f303 	mul.w	r3, r2, r3
 800091c:	4a18      	ldr	r2, [pc, #96]	; (8000980 <SystemCoreClockUpdate+0xd4>)
 800091e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000920:	e017      	b.n	8000952 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <SystemCoreClockUpdate+0xd0>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d006      	beq.n	800093c <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	4a15      	ldr	r2, [pc, #84]	; (8000988 <SystemCoreClockUpdate+0xdc>)
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <SystemCoreClockUpdate+0xd4>)
 8000938:	6013      	str	r3, [r2, #0]
      break;
 800093a:	e00a      	b.n	8000952 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <SystemCoreClockUpdate+0xd8>)
 8000940:	fb02 f303 	mul.w	r3, r2, r3
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <SystemCoreClockUpdate+0xd4>)
 8000946:	6013      	str	r3, [r2, #0]
      break;
 8000948:	e003      	b.n	8000952 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <SystemCoreClockUpdate+0xd4>)
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <SystemCoreClockUpdate+0xd8>)
 800094e:	601a      	str	r2, [r3, #0]
      break;
 8000950:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <SystemCoreClockUpdate+0xd0>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	091b      	lsrs	r3, r3, #4
 8000958:	f003 030f 	and.w	r3, r3, #15
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <SystemCoreClockUpdate+0xe0>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <SystemCoreClockUpdate+0xd4>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	fa22 f303 	lsr.w	r3, r2, r3
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <SystemCoreClockUpdate+0xd4>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	20000000 	.word	0x20000000
 8000984:	007a1200 	.word	0x007a1200
 8000988:	003d0900 	.word	0x003d0900
 800098c:	08000b68 	.word	0x08000b68

08000990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000994:	f7ff ff84 	bl	80008a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009be:	f000 f8a3 	bl	8000b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff ff57 	bl	8000874 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009d4:	08000b88 	.word	0x08000b88
  ldr r2, =_sbss
 80009d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80009dc:	20000410 	.word	0x20000410

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>
	...

080009e4 <Timer_Input_PWM>:
#include "Timer.h"



void Timer_Input_PWM(TIM_TypeDef *Timer)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN | RCC_APB2ENR_IOPAEN;
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <Timer_Input_PWM+0xcc>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <Timer_Input_PWM+0xcc>)
 80009f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6193      	str	r3, [r2, #24]
	Timer -> PSC = 72-1;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2247      	movs	r2, #71	; 0x47
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
	Timer -> ARR = 0xFFFF;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
	Timer -> CCMR1 |= TIM_CCMR1_CC1S_0; //IC1 mapped to T1
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f043 0201 	orr.w	r2, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	619a      	str	r2, [r3, #24]
	Timer -> CCMR1 |= TIM_CCMR1_CC2S_1; //IC2 mapped to T1
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	619a      	str	r2, [r3, #24]
	Timer -> CCMR1 |= (TIM_CCMR1_IC1F_0 | TIM_CCMR1_IC1F_1);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	619a      	str	r2, [r3, #24]
	Timer -> CCMR1 |= (TIM_CCMR1_IC2F_0 | TIM_CCMR1_IC2F_1);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	619a      	str	r2, [r3, #24]
	Timer -> CCER &= ~TIM_CCER_CC1P; //non inverted
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	f023 0202 	bic.w	r2, r3, #2
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	621a      	str	r2, [r3, #32]
	Timer -> CCER |= TIM_CCER_CC2P; //inverted
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a1b      	ldr	r3, [r3, #32]
 8000a4a:	f043 0220 	orr.w	r2, r3, #32
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	621a      	str	r2, [r3, #32]
	Timer -> SMCR |= TIM_SMCR_TS_2 | TIM_SMCR_TS_0; //trigger select
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
	Timer -> SMCR |= TIM_SMCR_SMS_2;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f043 0204 	orr.w	r2, r3, #4
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	609a      	str	r2, [r3, #8]
	Timer -> CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f023 020c 	bic.w	r2, r3, #12
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	619a      	str	r2, [r3, #24]
	Timer -> CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	619a      	str	r2, [r3, #24]
	Timer -> CCER |= TIM_CCER_CC1E;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a1b      	ldr	r3, [r3, #32]
 8000a86:	f043 0201 	orr.w	r2, r3, #1
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	621a      	str	r2, [r3, #32]
	Timer -> CCER |= TIM_CCER_CC2E;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a1b      	ldr	r3, [r3, #32]
 8000a92:	f043 0210 	orr.w	r2, r3, #16
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	621a      	str	r2, [r3, #32]
	Timer -> CR1 |= TIM_CR1_CEN;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f043 0201 	orr.w	r2, r3, #1
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <Get_Input_PWM>:


void Get_Input_PWM(TIM_TypeDef *Timer, float *period, float *frequency)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	float ms = 1.0/1000000.0;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <Get_Input_PWM+0x50>)
 8000ac2:	617b      	str	r3, [r7, #20]

	*frequency = ms * (float)(Timer->CCR1);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fcbb 	bl	8000444 <__aeabi_ui2f>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6979      	ldr	r1, [r7, #20]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fb4c 	bl	8000170 <__aeabi_fmul>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
	*period =    ms * (float)(Timer->CCR2);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fcad 	bl	8000444 <__aeabi_ui2f>
 8000aea:	4603      	mov	r3, r0
 8000aec:	6979      	ldr	r1, [r7, #20]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb3e 	bl	8000170 <__aeabi_fmul>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	601a      	str	r2, [r3, #0]

}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	358637bd 	.word	0x358637bd

08000b08 <__libc_init_array>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	2600      	movs	r6, #0
 8000b0c:	4d0c      	ldr	r5, [pc, #48]	; (8000b40 <__libc_init_array+0x38>)
 8000b0e:	4c0d      	ldr	r4, [pc, #52]	; (8000b44 <__libc_init_array+0x3c>)
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	10a4      	asrs	r4, r4, #2
 8000b14:	42a6      	cmp	r6, r4
 8000b16:	d109      	bne.n	8000b2c <__libc_init_array+0x24>
 8000b18:	f000 f81a 	bl	8000b50 <_init>
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	4d0a      	ldr	r5, [pc, #40]	; (8000b48 <__libc_init_array+0x40>)
 8000b20:	4c0a      	ldr	r4, [pc, #40]	; (8000b4c <__libc_init_array+0x44>)
 8000b22:	1b64      	subs	r4, r4, r5
 8000b24:	10a4      	asrs	r4, r4, #2
 8000b26:	42a6      	cmp	r6, r4
 8000b28:	d105      	bne.n	8000b36 <__libc_init_array+0x2e>
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b30:	4798      	blx	r3
 8000b32:	3601      	adds	r6, #1
 8000b34:	e7ee      	b.n	8000b14 <__libc_init_array+0xc>
 8000b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3a:	4798      	blx	r3
 8000b3c:	3601      	adds	r6, #1
 8000b3e:	e7f2      	b.n	8000b26 <__libc_init_array+0x1e>
 8000b40:	08000b80 	.word	0x08000b80
 8000b44:	08000b80 	.word	0x08000b80
 8000b48:	08000b80 	.word	0x08000b80
 8000b4c:	08000b84 	.word	0x08000b84

08000b50 <_init>:
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b52:	bf00      	nop
 8000b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b56:	bc08      	pop	{r3}
 8000b58:	469e      	mov	lr, r3
 8000b5a:	4770      	bx	lr

08000b5c <_fini>:
 8000b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5e:	bf00      	nop
 8000b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b62:	bc08      	pop	{r3}
 8000b64:	469e      	mov	lr, r3
 8000b66:	4770      	bx	lr
