/**
 ******************************************************************************
 * @file           : main.h
 * @author         : Kunal Salvi
 * @brief          : Header for Important Functions
 ******************************************************************************
 *
 ******************************************************************************
 */

#ifndef MAIN_H_
#define MAIN_H_

#include <stdint.h>
#include "stm32f103xb.h"
#include "stm32f1xx.h"



struct MCU_Data{

	int HSE_Fine;
	int HSI_Fine;
	int LSE_Fine;
	int LSI_Fine;
	int PLL_Fine;

}MCU_Data;

__STATIC_INLINE void MCU_Clock_Init(void)
{
	int time_out = 0;

	//Check if HSI, HSE, LSI, LSE are intact and operating.
	//We need HSE for normal operation, but if it fails the program needs to shift to HSI and keep the same clock frequency.
	//For STM32F103C8, HSI and HSE are 8MHz, so all the configurations are dependent on PLLMULL for HSE to reach max 72 MHz
	//and 64 MHz on HSI
	SystemInit();

	if(RCC -> CR & RCC_CR_HSIRDY){ MCU_Data.HSI_Fine = 1; }
	else { MCU_Data.HSI_Fine = 0; }

	RCC -> CR |= RCC_CR_HSEON;
	while(!(RCC -> CR & RCC_CR_HSERDY)){}

	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
	FLASH -> ACR |= FLASH_ACR_PRFTBE |  FLASH_ACR_LATENCY_2;

	pll_mull = Clock_Speed / 8;
	if((pll_mull == 4) & (pll_mull <= 9))
	{
		switch (pll_mull) {
			case 4:
				RCC -> CFGR |= RCC_CFGR_PLLMULL4;
				break;
			case 5:
				RCC -> CFGR |= RCC_CFGR_PLLMULL5;
				break;
			case 6:
				RCC -> CFGR |= RCC_CFGR_PLLMULL6;
				break;
			case 7:
				RCC -> CFGR |= RCC_CFGR_PLLMULL7;
				break;
			case 8:
				RCC -> CFGR |= RCC_CFGR_PLLMULL8;
				break;
			case 9:
				RCC -> CFGR |= RCC_CFGR_PLLMULL9;
				break;
			default:
				break;
		}
	}











}

#endif /* MAIN_H_ */
