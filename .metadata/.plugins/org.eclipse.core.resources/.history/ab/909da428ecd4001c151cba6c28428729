/**
 ******************************************************************************
 * @file           : main.h
 * @author         : Kunal Salvi
 * @brief          : Header for Important Functions
 ******************************************************************************
 *
 ******************************************************************************
 */

#ifndef MAIN_H_
#define MAIN_H_

#include <stdint.h>
#include "stm32f103xb.h"
#include "stm32f1xx.h"

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
}

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Init(void)
{
	int time_out = 0;

	//Check if HSI, HSE, LSI, LSE are intact and operating.
	//We need HSE for normal operation, but if it fails the program needs to shift to HSI and keep the same clock frequency.
	//For STM32F103C8, HSI and HSE are 8MHz, so all the configurations are dependent on PLLMULL for HSE to reach max 72 MHz
	//and 64 MHz on HSI
	SystemInit();
	RCC->CR |= RCC_CR_HSEON ;
	while(!(RCC->CR & RCC_CR_HSERDY));
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
	RCC->CFGR |= RCC_CFGR_PLLSRC;
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
	RCC->CR |= RCC_CR_PLLON;
	while(!(RCC->CR & RCC_CR_PLLRDY));
	RCC->CFGR |= RCC_CFGR_SW_PLL;
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
	SystemCoreClockUpdate();










}

#endif /* MAIN_H_ */
