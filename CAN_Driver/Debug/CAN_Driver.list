
CAN_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f68  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800212c  0800212c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800212c  0800212c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800212c  0800212c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002130  08002130  00012130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  20000068  0800219c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  0800219c  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049d4  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc8  00000000  00000000  00024a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00025730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00025880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012125  00000000  00000000  00025968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003560  00000000  00000000  00037a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ac3b  00000000  00000000  0003afed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00095c28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000764  00000000  00000000  00095c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08002080 	.word	0x08002080

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08002080 	.word	0x08002080

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <CAN_Init>:
 * @operation		:	Configures the CAN controller as per the CAN_Config struct.
 *                      Take a look at the examples and the CAN_Config structure for
 *                      more information
 */
void CAN_Init(CAN_Config mailbox)
{
 8000180:	b084      	sub	sp, #16
 8000182:	b580      	push	{r7, lr}
 8000184:	af00      	add	r7, sp, #0
 8000186:	f107 0c08 	add.w	ip, r7, #8
 800018a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    RCC -> APB1ENR &= ~RCC_APB1ENR_CAN1EN;
 800018e:	4bb6      	ldr	r3, [pc, #728]	; (8000468 <CAN_Init+0x2e8>)
 8000190:	69db      	ldr	r3, [r3, #28]
 8000192:	4ab5      	ldr	r2, [pc, #724]	; (8000468 <CAN_Init+0x2e8>)
 8000194:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000198:	61d3      	str	r3, [r2, #28]
	GPIO_Pin_Setup(GPIOA, 12, ALT_PUSH_PULL_OUTPUT);
 800019a:	220b      	movs	r2, #11
 800019c:	210c      	movs	r1, #12
 800019e:	48b3      	ldr	r0, [pc, #716]	; (800046c <CAN_Init+0x2ec>)
 80001a0:	f000 fffa 	bl	8001198 <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 11, FLOATING_INPUT);
 80001a4:	2204      	movs	r2, #4
 80001a6:	210b      	movs	r1, #11
 80001a8:	48b0      	ldr	r0, [pc, #704]	; (800046c <CAN_Init+0x2ec>)
 80001aa:	f000 fff5 	bl	8001198 <GPIO_Pin_Setup>

    RCC -> APB1ENR |= RCC_APB1ENR_CAN1EN;
 80001ae:	4bae      	ldr	r3, [pc, #696]	; (8000468 <CAN_Init+0x2e8>)
 80001b0:	69db      	ldr	r3, [r3, #28]
 80001b2:	4aad      	ldr	r2, [pc, #692]	; (8000468 <CAN_Init+0x2e8>)
 80001b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001b8:	61d3      	str	r3, [r2, #28]
	CAN1 -> MCR |= CAN_MCR_DBF | CAN_MCR_RESET | CAN_MCR_SLEEP;
 80001ba:	4bad      	ldr	r3, [pc, #692]	; (8000470 <CAN_Init+0x2f0>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4aac      	ldr	r2, [pc, #688]	; (8000470 <CAN_Init+0x2f0>)
 80001c0:	f443 33c0 	orr.w	r3, r3, #98304	; 0x18000
 80001c4:	f043 0302 	orr.w	r3, r3, #2
 80001c8:	6013      	str	r3, [r2, #0]
	while(!(CAN1 -> MSR & CAN_MSR_SLAK)){}
 80001ca:	bf00      	nop
 80001cc:	4ba8      	ldr	r3, [pc, #672]	; (8000470 <CAN_Init+0x2f0>)
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	f003 0302 	and.w	r3, r3, #2
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d0f9      	beq.n	80001cc <CAN_Init+0x4c>
    CAN1 -> MCR &= ~CAN_MCR_SLEEP;
 80001d8:	4ba5      	ldr	r3, [pc, #660]	; (8000470 <CAN_Init+0x2f0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4aa4      	ldr	r2, [pc, #656]	; (8000470 <CAN_Init+0x2f0>)
 80001de:	f023 0302 	bic.w	r3, r3, #2
 80001e2:	6013      	str	r3, [r2, #0]
	CAN1 -> MCR |= CAN_MCR_INRQ;
 80001e4:	4ba2      	ldr	r3, [pc, #648]	; (8000470 <CAN_Init+0x2f0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4aa1      	ldr	r2, [pc, #644]	; (8000470 <CAN_Init+0x2f0>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
	while((CAN1 -> MSR & CAN_MSR_SLAK)){}
 80001f0:	bf00      	nop
 80001f2:	4b9f      	ldr	r3, [pc, #636]	; (8000470 <CAN_Init+0x2f0>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	f003 0302 	and.w	r3, r3, #2
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d1f9      	bne.n	80001f2 <CAN_Init+0x72>
	while(!(CAN1-> MSR & CAN_MSR_INAK)){}
 80001fe:	bf00      	nop
 8000200:	4b9b      	ldr	r3, [pc, #620]	; (8000470 <CAN_Init+0x2f0>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	f003 0301 	and.w	r3, r3, #1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d0f9      	beq.n	8000200 <CAN_Init+0x80>
	CAN1 -> BTR = mailbox.baudrate;
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	4b98      	ldr	r3, [pc, #608]	; (8000470 <CAN_Init+0x2f0>)
 8000210:	61da      	str	r2, [r3, #28]
//	CAN1->BTR |= CAN_BTR_LBKM;  //SET LBKM BIT

	CAN1 -> FMR |= CAN_FMR_FINIT;
 8000212:	4b97      	ldr	r3, [pc, #604]	; (8000470 <CAN_Init+0x2f0>)
 8000214:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000218:	4a95      	ldr	r2, [pc, #596]	; (8000470 <CAN_Init+0x2f0>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 -> FMR &= 0xFFFFC0FF;
 8000222:	4b93      	ldr	r3, [pc, #588]	; (8000470 <CAN_Init+0x2f0>)
 8000224:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000228:	4a91      	ldr	r2, [pc, #580]	; (8000470 <CAN_Init+0x2f0>)
 800022a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800022e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 -> FMR |= 0x1C << 8;
 8000232:	4b8f      	ldr	r3, [pc, #572]	; (8000470 <CAN_Init+0x2f0>)
 8000234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000238:	4a8d      	ldr	r2, [pc, #564]	; (8000470 <CAN_Init+0x2f0>)
 800023a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800023e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	if(mailbox.Filter0.enable)
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d059      	beq.n	80002fc <CAN_Init+0x17c>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 0);
 8000248:	4b89      	ldr	r3, [pc, #548]	; (8000470 <CAN_Init+0x2f0>)
 800024a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800024e:	4a88      	ldr	r2, [pc, #544]	; (8000470 <CAN_Init+0x2f0>)
 8000250:	f023 0301 	bic.w	r3, r3, #1
 8000254:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter0.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 0);
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d107      	bne.n	800026e <CAN_Init+0xee>
 800025e:	4b84      	ldr	r3, [pc, #528]	; (8000470 <CAN_Init+0x2f0>)
 8000260:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000264:	4a82      	ldr	r2, [pc, #520]	; (8000470 <CAN_Init+0x2f0>)
 8000266:	f023 0301 	bic.w	r3, r3, #1
 800026a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter0.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 0);
 800026e:	69bb      	ldr	r3, [r7, #24]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d107      	bne.n	8000284 <CAN_Init+0x104>
 8000274:	4b7e      	ldr	r3, [pc, #504]	; (8000470 <CAN_Init+0x2f0>)
 8000276:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800027a:	4a7d      	ldr	r2, [pc, #500]	; (8000470 <CAN_Init+0x2f0>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter0.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 0);
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	2b0a      	cmp	r3, #10
 8000288:	d107      	bne.n	800029a <CAN_Init+0x11a>
 800028a:	4b79      	ldr	r3, [pc, #484]	; (8000470 <CAN_Init+0x2f0>)
 800028c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000290:	4a77      	ldr	r2, [pc, #476]	; (8000470 <CAN_Init+0x2f0>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter0.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 0);
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d107      	bne.n	80002b0 <CAN_Init+0x130>
 80002a0:	4b73      	ldr	r3, [pc, #460]	; (8000470 <CAN_Init+0x2f0>)
 80002a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80002a6:	4a72      	ldr	r2, [pc, #456]	; (8000470 <CAN_Init+0x2f0>)
 80002a8:	f023 0301 	bic.w	r3, r3, #1
 80002ac:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter0.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 0);
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d107      	bne.n	80002c6 <CAN_Init+0x146>
 80002b6:	4b6e      	ldr	r3, [pc, #440]	; (8000470 <CAN_Init+0x2f0>)
 80002b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80002bc:	4a6c      	ldr	r2, [pc, #432]	; (8000470 <CAN_Init+0x2f0>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter0.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 0);
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d107      	bne.n	80002dc <CAN_Init+0x15c>
 80002cc:	4b68      	ldr	r3, [pc, #416]	; (8000470 <CAN_Init+0x2f0>)
 80002ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80002d2:	4a67      	ldr	r2, [pc, #412]	; (8000470 <CAN_Init+0x2f0>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[0].FR1 = mailbox.Filter0.ID_Register;
 80002dc:	4a64      	ldr	r2, [pc, #400]	; (8000470 <CAN_Init+0x2f0>)
 80002de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e0:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
		CAN1 -> sFilterRegister[0].FR2 = mailbox.Filter0.Mask_Register;
 80002e4:	4a62      	ldr	r2, [pc, #392]	; (8000470 <CAN_Init+0x2f0>)
 80002e6:	6a3b      	ldr	r3, [r7, #32]
 80002e8:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
		CAN1 -> FA1R |= 1 << 0;
 80002ec:	4b60      	ldr	r3, [pc, #384]	; (8000470 <CAN_Init+0x2f0>)
 80002ee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80002f2:	4a5f      	ldr	r2, [pc, #380]	; (8000470 <CAN_Init+0x2f0>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter1.enable)
 80002fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d059      	beq.n	80003b6 <CAN_Init+0x236>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 1);
 8000302:	4b5b      	ldr	r3, [pc, #364]	; (8000470 <CAN_Init+0x2f0>)
 8000304:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000308:	4a59      	ldr	r2, [pc, #356]	; (8000470 <CAN_Init+0x2f0>)
 800030a:	f023 0302 	bic.w	r3, r3, #2
 800030e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter1.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 1);
 8000312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000314:	2b00      	cmp	r3, #0
 8000316:	d107      	bne.n	8000328 <CAN_Init+0x1a8>
 8000318:	4b55      	ldr	r3, [pc, #340]	; (8000470 <CAN_Init+0x2f0>)
 800031a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800031e:	4a54      	ldr	r2, [pc, #336]	; (8000470 <CAN_Init+0x2f0>)
 8000320:	f023 0302 	bic.w	r3, r3, #2
 8000324:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter1.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 1);
 8000328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800032a:	2b01      	cmp	r3, #1
 800032c:	d107      	bne.n	800033e <CAN_Init+0x1be>
 800032e:	4b50      	ldr	r3, [pc, #320]	; (8000470 <CAN_Init+0x2f0>)
 8000330:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000334:	4a4e      	ldr	r2, [pc, #312]	; (8000470 <CAN_Init+0x2f0>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter1.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 1);
 800033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000340:	2b0a      	cmp	r3, #10
 8000342:	d107      	bne.n	8000354 <CAN_Init+0x1d4>
 8000344:	4b4a      	ldr	r3, [pc, #296]	; (8000470 <CAN_Init+0x2f0>)
 8000346:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800034a:	4a49      	ldr	r2, [pc, #292]	; (8000470 <CAN_Init+0x2f0>)
 800034c:	f043 0302 	orr.w	r3, r3, #2
 8000350:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter1.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 1);
 8000354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000356:	2b00      	cmp	r3, #0
 8000358:	d107      	bne.n	800036a <CAN_Init+0x1ea>
 800035a:	4b45      	ldr	r3, [pc, #276]	; (8000470 <CAN_Init+0x2f0>)
 800035c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000360:	4a43      	ldr	r2, [pc, #268]	; (8000470 <CAN_Init+0x2f0>)
 8000362:	f023 0302 	bic.w	r3, r3, #2
 8000366:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter1.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 1);
 800036a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800036c:	2b01      	cmp	r3, #1
 800036e:	d107      	bne.n	8000380 <CAN_Init+0x200>
 8000370:	4b3f      	ldr	r3, [pc, #252]	; (8000470 <CAN_Init+0x2f0>)
 8000372:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000376:	4a3e      	ldr	r2, [pc, #248]	; (8000470 <CAN_Init+0x2f0>)
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter1.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 1);
 8000380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000382:	2b00      	cmp	r3, #0
 8000384:	d107      	bne.n	8000396 <CAN_Init+0x216>
 8000386:	4b3a      	ldr	r3, [pc, #232]	; (8000470 <CAN_Init+0x2f0>)
 8000388:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800038c:	4a38      	ldr	r2, [pc, #224]	; (8000470 <CAN_Init+0x2f0>)
 800038e:	f023 0302 	bic.w	r3, r3, #2
 8000392:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[1].FR1 = mailbox.Filter1.ID_Register;
 8000396:	4a36      	ldr	r2, [pc, #216]	; (8000470 <CAN_Init+0x2f0>)
 8000398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800039a:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
		CAN1 -> sFilterRegister[1].FR2 = mailbox.Filter1.Mask_Register;
 800039e:	4a34      	ldr	r2, [pc, #208]	; (8000470 <CAN_Init+0x2f0>)
 80003a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003a2:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
		CAN1 -> FA1R |= 1 << 1;
 80003a6:	4b32      	ldr	r3, [pc, #200]	; (8000470 <CAN_Init+0x2f0>)
 80003a8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80003ac:	4a30      	ldr	r2, [pc, #192]	; (8000470 <CAN_Init+0x2f0>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter2.enable)
 80003b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d060      	beq.n	800047e <CAN_Init+0x2fe>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 2);
 80003bc:	4b2c      	ldr	r3, [pc, #176]	; (8000470 <CAN_Init+0x2f0>)
 80003be:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80003c2:	4a2b      	ldr	r2, [pc, #172]	; (8000470 <CAN_Init+0x2f0>)
 80003c4:	f023 0304 	bic.w	r3, r3, #4
 80003c8:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter2.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 2);
 80003cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d107      	bne.n	80003e2 <CAN_Init+0x262>
 80003d2:	4b27      	ldr	r3, [pc, #156]	; (8000470 <CAN_Init+0x2f0>)
 80003d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80003d8:	4a25      	ldr	r2, [pc, #148]	; (8000470 <CAN_Init+0x2f0>)
 80003da:	f023 0304 	bic.w	r3, r3, #4
 80003de:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter2.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 2);
 80003e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d107      	bne.n	80003f8 <CAN_Init+0x278>
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <CAN_Init+0x2f0>)
 80003ea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80003ee:	4a20      	ldr	r2, [pc, #128]	; (8000470 <CAN_Init+0x2f0>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter2.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 2);
 80003f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003fa:	2b0a      	cmp	r3, #10
 80003fc:	d107      	bne.n	800040e <CAN_Init+0x28e>
 80003fe:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <CAN_Init+0x2f0>)
 8000400:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000404:	4a1a      	ldr	r2, [pc, #104]	; (8000470 <CAN_Init+0x2f0>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter2.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 2);
 800040e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000410:	2b00      	cmp	r3, #0
 8000412:	d107      	bne.n	8000424 <CAN_Init+0x2a4>
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <CAN_Init+0x2f0>)
 8000416:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <CAN_Init+0x2f0>)
 800041c:	f023 0304 	bic.w	r3, r3, #4
 8000420:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter2.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 2);
 8000424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000426:	2b01      	cmp	r3, #1
 8000428:	d107      	bne.n	800043a <CAN_Init+0x2ba>
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <CAN_Init+0x2f0>)
 800042c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000430:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <CAN_Init+0x2f0>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter2.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 2);
 800043a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800043c:	2b00      	cmp	r3, #0
 800043e:	d107      	bne.n	8000450 <CAN_Init+0x2d0>
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <CAN_Init+0x2f0>)
 8000442:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000446:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <CAN_Init+0x2f0>)
 8000448:	f023 0304 	bic.w	r3, r3, #4
 800044c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[2].FR1 = mailbox.Filter2.ID_Register;
 8000450:	4a07      	ldr	r2, [pc, #28]	; (8000470 <CAN_Init+0x2f0>)
 8000452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000454:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
		CAN1 -> sFilterRegister[2].FR2 = mailbox.Filter2.Mask_Register;
 8000458:	4a05      	ldr	r2, [pc, #20]	; (8000470 <CAN_Init+0x2f0>)
 800045a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800045c:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
		CAN1 -> FA1R |= 1 << 2;
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <CAN_Init+0x2f0>)
 8000462:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000466:	e005      	b.n	8000474 <CAN_Init+0x2f4>
 8000468:	40021000 	.word	0x40021000
 800046c:	40010800 	.word	0x40010800
 8000470:	40006400 	.word	0x40006400
 8000474:	4ac4      	ldr	r2, [pc, #784]	; (8000788 <CAN_Init+0x608>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter3.enable)
 800047e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000480:	2b00      	cmp	r3, #0
 8000482:	d059      	beq.n	8000538 <CAN_Init+0x3b8>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 3);
 8000484:	4bc0      	ldr	r3, [pc, #768]	; (8000788 <CAN_Init+0x608>)
 8000486:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800048a:	4abf      	ldr	r2, [pc, #764]	; (8000788 <CAN_Init+0x608>)
 800048c:	f023 0308 	bic.w	r3, r3, #8
 8000490:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter3.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 3);
 8000494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <CAN_Init+0x32a>
 800049a:	4bbb      	ldr	r3, [pc, #748]	; (8000788 <CAN_Init+0x608>)
 800049c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80004a0:	4ab9      	ldr	r2, [pc, #740]	; (8000788 <CAN_Init+0x608>)
 80004a2:	f023 0308 	bic.w	r3, r3, #8
 80004a6:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter3.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 3);
 80004aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d107      	bne.n	80004c0 <CAN_Init+0x340>
 80004b0:	4bb5      	ldr	r3, [pc, #724]	; (8000788 <CAN_Init+0x608>)
 80004b2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80004b6:	4ab4      	ldr	r2, [pc, #720]	; (8000788 <CAN_Init+0x608>)
 80004b8:	f043 0308 	orr.w	r3, r3, #8
 80004bc:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter3.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 3);
 80004c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004c2:	2b0a      	cmp	r3, #10
 80004c4:	d107      	bne.n	80004d6 <CAN_Init+0x356>
 80004c6:	4bb0      	ldr	r3, [pc, #704]	; (8000788 <CAN_Init+0x608>)
 80004c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004cc:	4aae      	ldr	r2, [pc, #696]	; (8000788 <CAN_Init+0x608>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter3.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 3);
 80004d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d107      	bne.n	80004ec <CAN_Init+0x36c>
 80004dc:	4baa      	ldr	r3, [pc, #680]	; (8000788 <CAN_Init+0x608>)
 80004de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004e2:	4aa9      	ldr	r2, [pc, #676]	; (8000788 <CAN_Init+0x608>)
 80004e4:	f023 0308 	bic.w	r3, r3, #8
 80004e8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter3.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 3);
 80004ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d107      	bne.n	8000502 <CAN_Init+0x382>
 80004f2:	4ba5      	ldr	r3, [pc, #660]	; (8000788 <CAN_Init+0x608>)
 80004f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80004f8:	4aa3      	ldr	r2, [pc, #652]	; (8000788 <CAN_Init+0x608>)
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter3.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 3);
 8000502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000504:	2b00      	cmp	r3, #0
 8000506:	d107      	bne.n	8000518 <CAN_Init+0x398>
 8000508:	4b9f      	ldr	r3, [pc, #636]	; (8000788 <CAN_Init+0x608>)
 800050a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800050e:	4a9e      	ldr	r2, [pc, #632]	; (8000788 <CAN_Init+0x608>)
 8000510:	f023 0308 	bic.w	r3, r3, #8
 8000514:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[3].FR1 = mailbox.Filter3.ID_Register;
 8000518:	4a9b      	ldr	r2, [pc, #620]	; (8000788 <CAN_Init+0x608>)
 800051a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800051c:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
		CAN1 -> sFilterRegister[3].FR2 = mailbox.Filter3.Mask_Register;
 8000520:	4a99      	ldr	r2, [pc, #612]	; (8000788 <CAN_Init+0x608>)
 8000522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000524:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
		CAN1 -> FA1R |= 1 << 3;
 8000528:	4b97      	ldr	r3, [pc, #604]	; (8000788 <CAN_Init+0x608>)
 800052a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800052e:	4a96      	ldr	r2, [pc, #600]	; (8000788 <CAN_Init+0x608>)
 8000530:	f043 0308 	orr.w	r3, r3, #8
 8000534:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter4.enable)
 8000538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800053a:	2b00      	cmp	r3, #0
 800053c:	d05b      	beq.n	80005f6 <CAN_Init+0x476>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 4);
 800053e:	4b92      	ldr	r3, [pc, #584]	; (8000788 <CAN_Init+0x608>)
 8000540:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000544:	4a90      	ldr	r2, [pc, #576]	; (8000788 <CAN_Init+0x608>)
 8000546:	f023 0310 	bic.w	r3, r3, #16
 800054a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter4.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 4);
 800054e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000550:	2b00      	cmp	r3, #0
 8000552:	d107      	bne.n	8000564 <CAN_Init+0x3e4>
 8000554:	4b8c      	ldr	r3, [pc, #560]	; (8000788 <CAN_Init+0x608>)
 8000556:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800055a:	4a8b      	ldr	r2, [pc, #556]	; (8000788 <CAN_Init+0x608>)
 800055c:	f023 0310 	bic.w	r3, r3, #16
 8000560:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter4.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 4);
 8000564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000566:	2b01      	cmp	r3, #1
 8000568:	d107      	bne.n	800057a <CAN_Init+0x3fa>
 800056a:	4b87      	ldr	r3, [pc, #540]	; (8000788 <CAN_Init+0x608>)
 800056c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000570:	4a85      	ldr	r2, [pc, #532]	; (8000788 <CAN_Init+0x608>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter4.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 4);
 800057a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800057c:	2b0a      	cmp	r3, #10
 800057e:	d107      	bne.n	8000590 <CAN_Init+0x410>
 8000580:	4b81      	ldr	r3, [pc, #516]	; (8000788 <CAN_Init+0x608>)
 8000582:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000586:	4a80      	ldr	r2, [pc, #512]	; (8000788 <CAN_Init+0x608>)
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter4.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 4);
 8000590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000592:	2b00      	cmp	r3, #0
 8000594:	d107      	bne.n	80005a6 <CAN_Init+0x426>
 8000596:	4b7c      	ldr	r3, [pc, #496]	; (8000788 <CAN_Init+0x608>)
 8000598:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800059c:	4a7a      	ldr	r2, [pc, #488]	; (8000788 <CAN_Init+0x608>)
 800059e:	f023 0310 	bic.w	r3, r3, #16
 80005a2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter4.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 4);
 80005a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d107      	bne.n	80005bc <CAN_Init+0x43c>
 80005ac:	4b76      	ldr	r3, [pc, #472]	; (8000788 <CAN_Init+0x608>)
 80005ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80005b2:	4a75      	ldr	r2, [pc, #468]	; (8000788 <CAN_Init+0x608>)
 80005b4:	f043 0310 	orr.w	r3, r3, #16
 80005b8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter4.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 4);
 80005bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d107      	bne.n	80005d2 <CAN_Init+0x452>
 80005c2:	4b71      	ldr	r3, [pc, #452]	; (8000788 <CAN_Init+0x608>)
 80005c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80005c8:	4a6f      	ldr	r2, [pc, #444]	; (8000788 <CAN_Init+0x608>)
 80005ca:	f023 0310 	bic.w	r3, r3, #16
 80005ce:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[4].FR1 = mailbox.Filter4.ID_Register;
 80005d2:	4a6d      	ldr	r2, [pc, #436]	; (8000788 <CAN_Init+0x608>)
 80005d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80005d8:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
		CAN1 -> sFilterRegister[4].FR2 = mailbox.Filter4.Mask_Register;
 80005dc:	4a6a      	ldr	r2, [pc, #424]	; (8000788 <CAN_Init+0x608>)
 80005de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005e2:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
		CAN1 -> FA1R |= 1 << 4;
 80005e6:	4b68      	ldr	r3, [pc, #416]	; (8000788 <CAN_Init+0x608>)
 80005e8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80005ec:	4a66      	ldr	r2, [pc, #408]	; (8000788 <CAN_Init+0x608>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter5.enable)
 80005f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d061      	beq.n	80006c2 <CAN_Init+0x542>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 5);
 80005fe:	4b62      	ldr	r3, [pc, #392]	; (8000788 <CAN_Init+0x608>)
 8000600:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000604:	4a60      	ldr	r2, [pc, #384]	; (8000788 <CAN_Init+0x608>)
 8000606:	f023 0320 	bic.w	r3, r3, #32
 800060a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter5.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 5);
 800060e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000612:	2b00      	cmp	r3, #0
 8000614:	d107      	bne.n	8000626 <CAN_Init+0x4a6>
 8000616:	4b5c      	ldr	r3, [pc, #368]	; (8000788 <CAN_Init+0x608>)
 8000618:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800061c:	4a5a      	ldr	r2, [pc, #360]	; (8000788 <CAN_Init+0x608>)
 800061e:	f023 0320 	bic.w	r3, r3, #32
 8000622:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter5.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 5);
 8000626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800062a:	2b01      	cmp	r3, #1
 800062c:	d107      	bne.n	800063e <CAN_Init+0x4be>
 800062e:	4b56      	ldr	r3, [pc, #344]	; (8000788 <CAN_Init+0x608>)
 8000630:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000634:	4a54      	ldr	r2, [pc, #336]	; (8000788 <CAN_Init+0x608>)
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter5.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 5);
 800063e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000642:	2b0a      	cmp	r3, #10
 8000644:	d107      	bne.n	8000656 <CAN_Init+0x4d6>
 8000646:	4b50      	ldr	r3, [pc, #320]	; (8000788 <CAN_Init+0x608>)
 8000648:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800064c:	4a4e      	ldr	r2, [pc, #312]	; (8000788 <CAN_Init+0x608>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter5.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 5);
 8000656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800065a:	2b00      	cmp	r3, #0
 800065c:	d107      	bne.n	800066e <CAN_Init+0x4ee>
 800065e:	4b4a      	ldr	r3, [pc, #296]	; (8000788 <CAN_Init+0x608>)
 8000660:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000664:	4a48      	ldr	r2, [pc, #288]	; (8000788 <CAN_Init+0x608>)
 8000666:	f023 0320 	bic.w	r3, r3, #32
 800066a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter5.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 5);
 800066e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000672:	2b01      	cmp	r3, #1
 8000674:	d107      	bne.n	8000686 <CAN_Init+0x506>
 8000676:	4b44      	ldr	r3, [pc, #272]	; (8000788 <CAN_Init+0x608>)
 8000678:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800067c:	4a42      	ldr	r2, [pc, #264]	; (8000788 <CAN_Init+0x608>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter5.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 5);
 8000686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800068a:	2b00      	cmp	r3, #0
 800068c:	d107      	bne.n	800069e <CAN_Init+0x51e>
 800068e:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <CAN_Init+0x608>)
 8000690:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000694:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <CAN_Init+0x608>)
 8000696:	f023 0320 	bic.w	r3, r3, #32
 800069a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[5].FR1 = mailbox.Filter5.ID_Register;
 800069e:	4a3a      	ldr	r2, [pc, #232]	; (8000788 <CAN_Init+0x608>)
 80006a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006a4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
		CAN1 -> sFilterRegister[5].FR2 = mailbox.Filter5.Mask_Register;
 80006a8:	4a37      	ldr	r2, [pc, #220]	; (8000788 <CAN_Init+0x608>)
 80006aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006ae:	f8c2 326c 	str.w	r3, [r2, #620]	; 0x26c
		CAN1 -> FA1R |= 1 << 5;
 80006b2:	4b35      	ldr	r3, [pc, #212]	; (8000788 <CAN_Init+0x608>)
 80006b4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80006b8:	4a33      	ldr	r2, [pc, #204]	; (8000788 <CAN_Init+0x608>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter6.enable)
 80006c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d065      	beq.n	8000796 <CAN_Init+0x616>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(6 << 6);
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <CAN_Init+0x608>)
 80006cc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80006d0:	4a2d      	ldr	r2, [pc, #180]	; (8000788 <CAN_Init+0x608>)
 80006d2:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80006d6:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter6.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 6);
 80006da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d107      	bne.n	80006f2 <CAN_Init+0x572>
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <CAN_Init+0x608>)
 80006e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <CAN_Init+0x608>)
 80006ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ee:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter6.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 6);
 80006f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d107      	bne.n	800070a <CAN_Init+0x58a>
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <CAN_Init+0x608>)
 80006fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <CAN_Init+0x608>)
 8000702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000706:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter6.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 6);
 800070a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800070e:	2b0a      	cmp	r3, #10
 8000710:	d107      	bne.n	8000722 <CAN_Init+0x5a2>
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <CAN_Init+0x608>)
 8000714:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <CAN_Init+0x608>)
 800071a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter6.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 6);
 8000722:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000726:	2b00      	cmp	r3, #0
 8000728:	d107      	bne.n	800073a <CAN_Init+0x5ba>
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <CAN_Init+0x608>)
 800072c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000730:	4a15      	ldr	r2, [pc, #84]	; (8000788 <CAN_Init+0x608>)
 8000732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000736:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter6.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 6);
 800073a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800073e:	2b01      	cmp	r3, #1
 8000740:	d107      	bne.n	8000752 <CAN_Init+0x5d2>
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <CAN_Init+0x608>)
 8000744:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <CAN_Init+0x608>)
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter6.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 6);
 8000752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000756:	2b00      	cmp	r3, #0
 8000758:	d107      	bne.n	800076a <CAN_Init+0x5ea>
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <CAN_Init+0x608>)
 800075c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000760:	4a09      	ldr	r2, [pc, #36]	; (8000788 <CAN_Init+0x608>)
 8000762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000766:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[6].FR1 = mailbox.Filter6.ID_Register;
 800076a:	4a07      	ldr	r2, [pc, #28]	; (8000788 <CAN_Init+0x608>)
 800076c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000770:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
		CAN1 -> sFilterRegister[6].FR2 = mailbox.Filter6.Mask_Register;
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <CAN_Init+0x608>)
 8000776:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800077a:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
		CAN1 -> FA1R |= 1 << 6;
 800077e:	4b02      	ldr	r3, [pc, #8]	; (8000788 <CAN_Init+0x608>)
 8000780:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000784:	e002      	b.n	800078c <CAN_Init+0x60c>
 8000786:	bf00      	nop
 8000788:	40006400 	.word	0x40006400
 800078c:	4acc      	ldr	r2, [pc, #816]	; (8000ac0 <CAN_Init+0x940>)
 800078e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000792:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter7.enable)
 8000796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800079a:	2b00      	cmp	r3, #0
 800079c:	d061      	beq.n	8000862 <CAN_Init+0x6e2>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 7);
 800079e:	4bc8      	ldr	r3, [pc, #800]	; (8000ac0 <CAN_Init+0x940>)
 80007a0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80007a4:	4ac6      	ldr	r2, [pc, #792]	; (8000ac0 <CAN_Init+0x940>)
 80007a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007aa:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter7.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 7);
 80007ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d107      	bne.n	80007c6 <CAN_Init+0x646>
 80007b6:	4bc2      	ldr	r3, [pc, #776]	; (8000ac0 <CAN_Init+0x940>)
 80007b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80007bc:	4ac0      	ldr	r2, [pc, #768]	; (8000ac0 <CAN_Init+0x940>)
 80007be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007c2:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter7.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 7);
 80007c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d107      	bne.n	80007de <CAN_Init+0x65e>
 80007ce:	4bbc      	ldr	r3, [pc, #752]	; (8000ac0 <CAN_Init+0x940>)
 80007d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80007d4:	4aba      	ldr	r2, [pc, #744]	; (8000ac0 <CAN_Init+0x940>)
 80007d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007da:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter7.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 7);
 80007de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007e2:	2b0a      	cmp	r3, #10
 80007e4:	d107      	bne.n	80007f6 <CAN_Init+0x676>
 80007e6:	4bb6      	ldr	r3, [pc, #728]	; (8000ac0 <CAN_Init+0x940>)
 80007e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80007ec:	4ab4      	ldr	r2, [pc, #720]	; (8000ac0 <CAN_Init+0x940>)
 80007ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter7.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 7);
 80007f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d107      	bne.n	800080e <CAN_Init+0x68e>
 80007fe:	4bb0      	ldr	r3, [pc, #704]	; (8000ac0 <CAN_Init+0x940>)
 8000800:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000804:	4aae      	ldr	r2, [pc, #696]	; (8000ac0 <CAN_Init+0x940>)
 8000806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800080a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter7.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 7);
 800080e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000812:	2b01      	cmp	r3, #1
 8000814:	d107      	bne.n	8000826 <CAN_Init+0x6a6>
 8000816:	4baa      	ldr	r3, [pc, #680]	; (8000ac0 <CAN_Init+0x940>)
 8000818:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800081c:	4aa8      	ldr	r2, [pc, #672]	; (8000ac0 <CAN_Init+0x940>)
 800081e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000822:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter7.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 7);
 8000826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800082a:	2b00      	cmp	r3, #0
 800082c:	d107      	bne.n	800083e <CAN_Init+0x6be>
 800082e:	4ba4      	ldr	r3, [pc, #656]	; (8000ac0 <CAN_Init+0x940>)
 8000830:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000834:	4aa2      	ldr	r2, [pc, #648]	; (8000ac0 <CAN_Init+0x940>)
 8000836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800083a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[7].FR1 = mailbox.Filter7.ID_Register;
 800083e:	4aa0      	ldr	r2, [pc, #640]	; (8000ac0 <CAN_Init+0x940>)
 8000840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000844:	f8c2 3278 	str.w	r3, [r2, #632]	; 0x278
		CAN1 -> sFilterRegister[7].FR2 = mailbox.Filter7.Mask_Register;
 8000848:	4a9d      	ldr	r2, [pc, #628]	; (8000ac0 <CAN_Init+0x940>)
 800084a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800084e:	f8c2 327c 	str.w	r3, [r2, #636]	; 0x27c
		CAN1 -> FA1R |= 1 << 7;
 8000852:	4b9b      	ldr	r3, [pc, #620]	; (8000ac0 <CAN_Init+0x940>)
 8000854:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000858:	4a99      	ldr	r2, [pc, #612]	; (8000ac0 <CAN_Init+0x940>)
 800085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter8.enable)
 8000862:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d061      	beq.n	800092e <CAN_Init+0x7ae>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 8);
 800086a:	4b95      	ldr	r3, [pc, #596]	; (8000ac0 <CAN_Init+0x940>)
 800086c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000870:	4a93      	ldr	r2, [pc, #588]	; (8000ac0 <CAN_Init+0x940>)
 8000872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000876:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter8.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 8);
 800087a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800087e:	2b00      	cmp	r3, #0
 8000880:	d107      	bne.n	8000892 <CAN_Init+0x712>
 8000882:	4b8f      	ldr	r3, [pc, #572]	; (8000ac0 <CAN_Init+0x940>)
 8000884:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000888:	4a8d      	ldr	r2, [pc, #564]	; (8000ac0 <CAN_Init+0x940>)
 800088a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800088e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter8.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 8);
 8000892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000896:	2b01      	cmp	r3, #1
 8000898:	d107      	bne.n	80008aa <CAN_Init+0x72a>
 800089a:	4b89      	ldr	r3, [pc, #548]	; (8000ac0 <CAN_Init+0x940>)
 800089c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80008a0:	4a87      	ldr	r2, [pc, #540]	; (8000ac0 <CAN_Init+0x940>)
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter8.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 8);
 80008aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80008ae:	2b0a      	cmp	r3, #10
 80008b0:	d107      	bne.n	80008c2 <CAN_Init+0x742>
 80008b2:	4b83      	ldr	r3, [pc, #524]	; (8000ac0 <CAN_Init+0x940>)
 80008b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80008b8:	4a81      	ldr	r2, [pc, #516]	; (8000ac0 <CAN_Init+0x940>)
 80008ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008be:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter8.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 8);
 80008c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d107      	bne.n	80008da <CAN_Init+0x75a>
 80008ca:	4b7d      	ldr	r3, [pc, #500]	; (8000ac0 <CAN_Init+0x940>)
 80008cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80008d0:	4a7b      	ldr	r2, [pc, #492]	; (8000ac0 <CAN_Init+0x940>)
 80008d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008d6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter8.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 8);
 80008da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d107      	bne.n	80008f2 <CAN_Init+0x772>
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <CAN_Init+0x940>)
 80008e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80008e8:	4a75      	ldr	r2, [pc, #468]	; (8000ac0 <CAN_Init+0x940>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ee:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter8.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 8);
 80008f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d107      	bne.n	800090a <CAN_Init+0x78a>
 80008fa:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <CAN_Init+0x940>)
 80008fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000900:	4a6f      	ldr	r2, [pc, #444]	; (8000ac0 <CAN_Init+0x940>)
 8000902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000906:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[8].FR1 = mailbox.Filter8.ID_Register;
 800090a:	4a6d      	ldr	r2, [pc, #436]	; (8000ac0 <CAN_Init+0x940>)
 800090c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000910:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
		CAN1 -> sFilterRegister[8].FR2 = mailbox.Filter8.Mask_Register;
 8000914:	4a6a      	ldr	r2, [pc, #424]	; (8000ac0 <CAN_Init+0x940>)
 8000916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800091a:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
		CAN1 -> FA1R |= 1 << 8;
 800091e:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <CAN_Init+0x940>)
 8000920:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000924:	4a66      	ldr	r2, [pc, #408]	; (8000ac0 <CAN_Init+0x940>)
 8000926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter9.enable)
 800092e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d061      	beq.n	80009fa <CAN_Init+0x87a>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 9);
 8000936:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <CAN_Init+0x940>)
 8000938:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800093c:	4a60      	ldr	r2, [pc, #384]	; (8000ac0 <CAN_Init+0x940>)
 800093e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000942:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter9.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 9);
 8000946:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d107      	bne.n	800095e <CAN_Init+0x7de>
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <CAN_Init+0x940>)
 8000950:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000954:	4a5a      	ldr	r2, [pc, #360]	; (8000ac0 <CAN_Init+0x940>)
 8000956:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800095a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter9.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 9);
 800095e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d107      	bne.n	8000976 <CAN_Init+0x7f6>
 8000966:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <CAN_Init+0x940>)
 8000968:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800096c:	4a54      	ldr	r2, [pc, #336]	; (8000ac0 <CAN_Init+0x940>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000972:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter9.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 9);
 8000976:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800097a:	2b0a      	cmp	r3, #10
 800097c:	d107      	bne.n	800098e <CAN_Init+0x80e>
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <CAN_Init+0x940>)
 8000980:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000984:	4a4e      	ldr	r2, [pc, #312]	; (8000ac0 <CAN_Init+0x940>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter9.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 9);
 800098e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000992:	2b00      	cmp	r3, #0
 8000994:	d107      	bne.n	80009a6 <CAN_Init+0x826>
 8000996:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <CAN_Init+0x940>)
 8000998:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800099c:	4a48      	ldr	r2, [pc, #288]	; (8000ac0 <CAN_Init+0x940>)
 800099e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009a2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter9.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 9);
 80009a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d107      	bne.n	80009be <CAN_Init+0x83e>
 80009ae:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <CAN_Init+0x940>)
 80009b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80009b4:	4a42      	ldr	r2, [pc, #264]	; (8000ac0 <CAN_Init+0x940>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ba:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter9.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 9);
 80009be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d107      	bne.n	80009d6 <CAN_Init+0x856>
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <CAN_Init+0x940>)
 80009c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80009cc:	4a3c      	ldr	r2, [pc, #240]	; (8000ac0 <CAN_Init+0x940>)
 80009ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009d2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[9].FR1 = mailbox.Filter9.ID_Register;
 80009d6:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <CAN_Init+0x940>)
 80009d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80009dc:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		CAN1 -> sFilterRegister[9].FR2 = mailbox.Filter9.Mask_Register;
 80009e0:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <CAN_Init+0x940>)
 80009e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80009e6:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
		CAN1 -> FA1R |= 1 << 9;
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <CAN_Init+0x940>)
 80009ec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80009f0:	4a33      	ldr	r2, [pc, #204]	; (8000ac0 <CAN_Init+0x940>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter10.enable)
 80009fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d065      	beq.n	8000ace <CAN_Init+0x94e>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 10);
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <CAN_Init+0x940>)
 8000a04:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000a08:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <CAN_Init+0x940>)
 8000a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a0e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter10.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 10);
 8000a12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d107      	bne.n	8000a2a <CAN_Init+0x8aa>
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <CAN_Init+0x940>)
 8000a1c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000a20:	4a27      	ldr	r2, [pc, #156]	; (8000ac0 <CAN_Init+0x940>)
 8000a22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a26:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter10.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 10);
 8000a2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d107      	bne.n	8000a42 <CAN_Init+0x8c2>
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <CAN_Init+0x940>)
 8000a34:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <CAN_Init+0x940>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter10.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 10);
 8000a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a46:	2b0a      	cmp	r3, #10
 8000a48:	d107      	bne.n	8000a5a <CAN_Init+0x8da>
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <CAN_Init+0x940>)
 8000a4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <CAN_Init+0x940>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter10.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 10);
 8000a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d107      	bne.n	8000a72 <CAN_Init+0x8f2>
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <CAN_Init+0x940>)
 8000a64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a68:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <CAN_Init+0x940>)
 8000a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a6e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter10.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 10);
 8000a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d107      	bne.n	8000a8a <CAN_Init+0x90a>
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <CAN_Init+0x940>)
 8000a7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a80:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <CAN_Init+0x940>)
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter10.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 10);
 8000a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d107      	bne.n	8000aa2 <CAN_Init+0x922>
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <CAN_Init+0x940>)
 8000a94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a98:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <CAN_Init+0x940>)
 8000a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a9e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[10].FR1 = mailbox.Filter10.ID_Register;
 8000aa2:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <CAN_Init+0x940>)
 8000aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000aa8:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		CAN1 -> sFilterRegister[10].FR2 = mailbox.Filter10.Mask_Register;
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <CAN_Init+0x940>)
 8000aae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000ab2:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
		CAN1 -> FA1R |= 1 << 10;
 8000ab6:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <CAN_Init+0x940>)
 8000ab8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000abc:	e002      	b.n	8000ac4 <CAN_Init+0x944>
 8000abe:	bf00      	nop
 8000ac0:	40006400 	.word	0x40006400
 8000ac4:	4aac      	ldr	r2, [pc, #688]	; (8000d78 <CAN_Init+0xbf8>)
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aca:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter11.enable)
 8000ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d061      	beq.n	8000b9a <CAN_Init+0xa1a>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 11);
 8000ad6:	4ba8      	ldr	r3, [pc, #672]	; (8000d78 <CAN_Init+0xbf8>)
 8000ad8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000adc:	4aa6      	ldr	r2, [pc, #664]	; (8000d78 <CAN_Init+0xbf8>)
 8000ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ae2:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter11.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 11);
 8000ae6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d107      	bne.n	8000afe <CAN_Init+0x97e>
 8000aee:	4ba2      	ldr	r3, [pc, #648]	; (8000d78 <CAN_Init+0xbf8>)
 8000af0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000af4:	4aa0      	ldr	r2, [pc, #640]	; (8000d78 <CAN_Init+0xbf8>)
 8000af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000afa:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter11.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 11);
 8000afe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d107      	bne.n	8000b16 <CAN_Init+0x996>
 8000b06:	4b9c      	ldr	r3, [pc, #624]	; (8000d78 <CAN_Init+0xbf8>)
 8000b08:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000b0c:	4a9a      	ldr	r2, [pc, #616]	; (8000d78 <CAN_Init+0xbf8>)
 8000b0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b12:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter11.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 11);
 8000b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	d107      	bne.n	8000b2e <CAN_Init+0x9ae>
 8000b1e:	4b96      	ldr	r3, [pc, #600]	; (8000d78 <CAN_Init+0xbf8>)
 8000b20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000b24:	4a94      	ldr	r2, [pc, #592]	; (8000d78 <CAN_Init+0xbf8>)
 8000b26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b2a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter11.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 11);
 8000b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d107      	bne.n	8000b46 <CAN_Init+0x9c6>
 8000b36:	4b90      	ldr	r3, [pc, #576]	; (8000d78 <CAN_Init+0xbf8>)
 8000b38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000b3c:	4a8e      	ldr	r2, [pc, #568]	; (8000d78 <CAN_Init+0xbf8>)
 8000b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b42:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter11.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 11);
 8000b46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d107      	bne.n	8000b5e <CAN_Init+0x9de>
 8000b4e:	4b8a      	ldr	r3, [pc, #552]	; (8000d78 <CAN_Init+0xbf8>)
 8000b50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000b54:	4a88      	ldr	r2, [pc, #544]	; (8000d78 <CAN_Init+0xbf8>)
 8000b56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b5a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter11.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 11);
 8000b5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d107      	bne.n	8000b76 <CAN_Init+0x9f6>
 8000b66:	4b84      	ldr	r3, [pc, #528]	; (8000d78 <CAN_Init+0xbf8>)
 8000b68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000b6c:	4a82      	ldr	r2, [pc, #520]	; (8000d78 <CAN_Init+0xbf8>)
 8000b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b72:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[11].FR1 = mailbox.Filter11.ID_Register;
 8000b76:	4a80      	ldr	r2, [pc, #512]	; (8000d78 <CAN_Init+0xbf8>)
 8000b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000b7c:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		CAN1 -> sFilterRegister[11].FR2 = mailbox.Filter11.Mask_Register;
 8000b80:	4a7d      	ldr	r2, [pc, #500]	; (8000d78 <CAN_Init+0xbf8>)
 8000b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000b86:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
		CAN1 -> FA1R |= 1 << 11;
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <CAN_Init+0xbf8>)
 8000b8c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000b90:	4a79      	ldr	r2, [pc, #484]	; (8000d78 <CAN_Init+0xbf8>)
 8000b92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b96:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter12.enable)
 8000b9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d061      	beq.n	8000c66 <CAN_Init+0xae6>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 12);
 8000ba2:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <CAN_Init+0xbf8>)
 8000ba4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000ba8:	4a73      	ldr	r2, [pc, #460]	; (8000d78 <CAN_Init+0xbf8>)
 8000baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bae:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter12.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 12);
 8000bb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d107      	bne.n	8000bca <CAN_Init+0xa4a>
 8000bba:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <CAN_Init+0xbf8>)
 8000bbc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000bc0:	4a6d      	ldr	r2, [pc, #436]	; (8000d78 <CAN_Init+0xbf8>)
 8000bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bc6:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter12.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 12);
 8000bca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d107      	bne.n	8000be2 <CAN_Init+0xa62>
 8000bd2:	4b69      	ldr	r3, [pc, #420]	; (8000d78 <CAN_Init+0xbf8>)
 8000bd4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000bd8:	4a67      	ldr	r2, [pc, #412]	; (8000d78 <CAN_Init+0xbf8>)
 8000bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bde:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter12.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 12);
 8000be2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000be6:	2b0a      	cmp	r3, #10
 8000be8:	d107      	bne.n	8000bfa <CAN_Init+0xa7a>
 8000bea:	4b63      	ldr	r3, [pc, #396]	; (8000d78 <CAN_Init+0xbf8>)
 8000bec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000bf0:	4a61      	ldr	r2, [pc, #388]	; (8000d78 <CAN_Init+0xbf8>)
 8000bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter12.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 12);
 8000bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d107      	bne.n	8000c12 <CAN_Init+0xa92>
 8000c02:	4b5d      	ldr	r3, [pc, #372]	; (8000d78 <CAN_Init+0xbf8>)
 8000c04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c08:	4a5b      	ldr	r2, [pc, #364]	; (8000d78 <CAN_Init+0xbf8>)
 8000c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c0e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter12.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 12);
 8000c12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d107      	bne.n	8000c2a <CAN_Init+0xaaa>
 8000c1a:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <CAN_Init+0xbf8>)
 8000c1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000c20:	4a55      	ldr	r2, [pc, #340]	; (8000d78 <CAN_Init+0xbf8>)
 8000c22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c26:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter12.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 12);
 8000c2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d107      	bne.n	8000c42 <CAN_Init+0xac2>
 8000c32:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <CAN_Init+0xbf8>)
 8000c34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000c38:	4a4f      	ldr	r2, [pc, #316]	; (8000d78 <CAN_Init+0xbf8>)
 8000c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c3e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[12].FR1 = mailbox.Filter12.ID_Register;
 8000c42:	4a4d      	ldr	r2, [pc, #308]	; (8000d78 <CAN_Init+0xbf8>)
 8000c44:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000c48:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0
		CAN1 -> sFilterRegister[12].FR2 = mailbox.Filter12.Mask_Register;
 8000c4c:	4a4a      	ldr	r2, [pc, #296]	; (8000d78 <CAN_Init+0xbf8>)
 8000c4e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c52:	f8c2 32a4 	str.w	r3, [r2, #676]	; 0x2a4
		CAN1 -> FA1R |= 1 << 12;
 8000c56:	4b48      	ldr	r3, [pc, #288]	; (8000d78 <CAN_Init+0xbf8>)
 8000c58:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000c5c:	4a46      	ldr	r2, [pc, #280]	; (8000d78 <CAN_Init+0xbf8>)
 8000c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c62:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}
	if(mailbox.Filter13.enable)
 8000c66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d061      	beq.n	8000d32 <CAN_Init+0xbb2>
	{
		//Deactivate Filter:
		CAN1 -> FA1R &= ~(1 << 13);
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <CAN_Init+0xbf8>)
 8000c70:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000c74:	4a40      	ldr	r2, [pc, #256]	; (8000d78 <CAN_Init+0xbf8>)
 8000c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c7a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		//Set Filter Scale
		if(mailbox.Filter13.scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << 13);
 8000c7e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d107      	bne.n	8000c96 <CAN_Init+0xb16>
 8000c86:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <CAN_Init+0xbf8>)
 8000c88:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000c8c:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <CAN_Init+0xbf8>)
 8000c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c92:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		if(mailbox.Filter13.scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << 13);
 8000c96:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d107      	bne.n	8000cae <CAN_Init+0xb2e>
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <CAN_Init+0xbf8>)
 8000ca0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000ca4:	4a34      	ldr	r2, [pc, #208]	; (8000d78 <CAN_Init+0xbf8>)
 8000ca6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000caa:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//Set Filter Type
		if(mailbox.Filter13.type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << 13);
 8000cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	d107      	bne.n	8000cc6 <CAN_Init+0xb46>
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <CAN_Init+0xbf8>)
 8000cb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <CAN_Init+0xbf8>)
 8000cbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cc2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if(mailbox.Filter13.type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << 13);
 8000cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d107      	bne.n	8000cde <CAN_Init+0xb5e>
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <CAN_Init+0xbf8>)
 8000cd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cd4:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <CAN_Init+0xbf8>)
 8000cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cda:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		//Set FIFO for Filter Bank
		if(mailbox.Filter13.bank_id == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << 13);
 8000cde:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d107      	bne.n	8000cf6 <CAN_Init+0xb76>
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <CAN_Init+0xbf8>)
 8000ce8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000cec:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <CAN_Init+0xbf8>)
 8000cee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		if(mailbox.Filter13.bank_id == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << 13);
 8000cf6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d107      	bne.n	8000d0e <CAN_Init+0xb8e>
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <CAN_Init+0xbf8>)
 8000d00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000d04:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <CAN_Init+0xbf8>)
 8000d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d0a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
		//Set FIFO Bank
		CAN1 -> sFilterRegister[13].FR1 = mailbox.Filter13.ID_Register;
 8000d0e:	4a1a      	ldr	r2, [pc, #104]	; (8000d78 <CAN_Init+0xbf8>)
 8000d10:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d14:	f8c2 32a8 	str.w	r3, [r2, #680]	; 0x2a8
		CAN1 -> sFilterRegister[13].FR2 = mailbox.Filter13.Mask_Register;
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <CAN_Init+0xbf8>)
 8000d1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000d1e:	f8c2 32ac 	str.w	r3, [r2, #684]	; 0x2ac
		CAN1 -> FA1R |= 1 << 13;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <CAN_Init+0xbf8>)
 8000d24:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <CAN_Init+0xbf8>)
 8000d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d2e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}


	CAN1 -> FMR &= ~CAN_FMR_FINIT;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <CAN_Init+0xbf8>)
 8000d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d38:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <CAN_Init+0xbf8>)
 8000d3a:	f023 0301 	bic.w	r3, r3, #1
 8000d3e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
     CAN1->MCR &= ~CAN_MCR_INRQ;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <CAN_Init+0xbf8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <CAN_Init+0xbf8>)
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	6013      	str	r3, [r2, #0]
    CAN1->MCR &= ~CAN_MCR_INRQ;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <CAN_Init+0xbf8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <CAN_Init+0xbf8>)
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	6013      	str	r3, [r2, #0]
    while((CAN1->MSR & CAN_MSR_INAK));
 8000d5a:	bf00      	nop
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <CAN_Init+0xbf8>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f9      	bne.n	8000d5c <CAN_Init+0xbdc>
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d72:	b004      	add	sp, #16
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40006400 	.word	0x40006400

08000d7c <CAN_Get_Payload>:
 * @input param		:	mailbox_id
 * @output param	:	temp
 * @operation		:	Transmits the data in the mailbox
 */
int CAN_Get_Payload(CAN_Config mailbox)
{
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	b480      	push	{r7}
 8000d80:	b087      	sub	sp, #28
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	f107 0c20 	add.w	ip, r7, #32
 8000d88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int fifo1_full = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
	int fifo2_full = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]

	int frame_type = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
	int id_type = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]

	fifo1_full = (CAN1 -> RF0R & CAN_RF0R_FMP0_Msk) >> CAN_RF0R_FMP0_Pos;
 8000d9c:	4ba6      	ldr	r3, [pc, #664]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	60fb      	str	r3, [r7, #12]

	fifo2_full = (CAN1 -> RF1R & CAN_RF1R_FMP1_Msk) >> CAN_RF1R_FMP1_Pos;
 8000da6:	4ba4      	ldr	r3, [pc, #656]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	60bb      	str	r3, [r7, #8]

	if(fifo1_full)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80ca 	beq.w	8000f4c <CAN_Get_Payload+0x1d0>
	{
		RX_Mailbox_1.ID = 0;
 8000db8:	4ba0      	ldr	r3, [pc, #640]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
		RX_Mailbox_1.id_type = 0;
 8000dbe:	4b9f      	ldr	r3, [pc, #636]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
		RX_Mailbox_1.data[0] = 0;
 8000dc4:	4b9d      	ldr	r3, [pc, #628]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
		RX_Mailbox_1.data[1] = 0;
 8000dca:	4b9c      	ldr	r3, [pc, #624]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
		RX_Mailbox_1.data[2] = 0;
 8000dd0:	4b9a      	ldr	r3, [pc, #616]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
		RX_Mailbox_1.data[3] = 0;
 8000dd6:	4b99      	ldr	r3, [pc, #612]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
		RX_Mailbox_1.data[4] = 0;
 8000ddc:	4b97      	ldr	r3, [pc, #604]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
		RX_Mailbox_1.data[5] = 0;
 8000de2:	4b96      	ldr	r3, [pc, #600]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
		RX_Mailbox_1.data[6] = 0;
 8000de8:	4b94      	ldr	r3, [pc, #592]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
		RX_Mailbox_1.data[7] = 0;
 8000dee:	4b93      	ldr	r3, [pc, #588]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
		RX_Mailbox_1.data_length = 0;
 8000df4:	4b91      	ldr	r3, [pc, #580]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]

		GPIOA -> BSRR |= GPIO_BSRR_BS0;
 8000dfa:	4b91      	ldr	r3, [pc, #580]	; (8001040 <CAN_Get_Payload+0x2c4>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	4a90      	ldr	r2, [pc, #576]	; (8001040 <CAN_Get_Payload+0x2c4>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6113      	str	r3, [r2, #16]
		GPIOC -> BSRR |= GPIO_BSRR_BR13;
 8000e06:	4b8f      	ldr	r3, [pc, #572]	; (8001044 <CAN_Get_Payload+0x2c8>)
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	4a8e      	ldr	r2, [pc, #568]	; (8001044 <CAN_Get_Payload+0x2c8>)
 8000e0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e10:	6113      	str	r3, [r2, #16]
		id_type =  (CAN1 -> sFIFOMailBox[0].RIR & CAN_RI0R_IDE_Msk) >> CAN_RI0R_IDE_Pos ;
 8000e12:	4b89      	ldr	r3, [pc, #548]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000e14:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
		frame_type = (CAN1 -> sFIFOMailBox[0].RIR & CAN_RI0R_RTR_Msk) >> CAN_RI0R_RTR_Pos ;
 8000e20:	4b85      	ldr	r3, [pc, #532]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000e22:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000e26:	085b      	lsrs	r3, r3, #1
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	607b      	str	r3, [r7, #4]

		if(id_type)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00b      	beq.n	8000e4c <CAN_Get_Payload+0xd0>
		{
			//Extended ID
			RX_Mailbox_1.id_type = CAN_ID_Extended;
 8000e34:	4b81      	ldr	r3, [pc, #516]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000e36:	220a      	movs	r2, #10
 8000e38:	631a      	str	r2, [r3, #48]	; 0x30
			RX_Mailbox_1.ID = (CAN1 -> sFIFOMailBox[0].RIR & CAN_RI0R_EXID_Msk) >> CAN_RI0R_EXID_Pos;
 8000e3a:	4b7f      	ldr	r3, [pc, #508]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000e3c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000e46:	4a7d      	ldr	r2, [pc, #500]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000e48:	6353      	str	r3, [r2, #52]	; 0x34
 8000e4a:	e00a      	b.n	8000e62 <CAN_Get_Payload+0xe6>
		}
		else
		{
			//Standard ID
			RX_Mailbox_1.id_type = CAN_ID_Standard;
 8000e4c:	4b7b      	ldr	r3, [pc, #492]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
			RX_Mailbox_1.ID = (CAN1 -> sFIFOMailBox[0].RIR & CAN_RI0R_STID_Msk) >> CAN_RI0R_STID_Pos;
 8000e52:	4b79      	ldr	r3, [pc, #484]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000e54:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000e58:	0d5b      	lsrs	r3, r3, #21
 8000e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e5e:	4a77      	ldr	r2, [pc, #476]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000e60:	6353      	str	r3, [r2, #52]	; 0x34
//			printConsole("ID = %d \r\n",RX_Mailbox_1.ID);
		}

		if(mailbox.timestamp_enable)
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <CAN_Get_Payload+0xfa>
		{
			RX_Mailbox_1.message_timestamp = (CAN1 -> sFIFOMailBox[0].RDTR & CAN_RDT0R_TIME_Msk) >> CAN_RDT0R_TIME_Pos;
 8000e68:	4b73      	ldr	r3, [pc, #460]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000e6a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000e6e:	0c1b      	lsrs	r3, r3, #16
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4a72      	ldr	r2, [pc, #456]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000e74:	6013      	str	r3, [r2, #0]
		}

		if(frame_type)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d017      	beq.n	8000eac <CAN_Get_Payload+0x130>
		{
			//RTR Frame
			RX_Mailbox_1.frame_type = CAN_Frame_Remote;
 8000e7c:	4b6f      	ldr	r3, [pc, #444]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000e7e:	220a      	movs	r2, #10
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
			RX_Mailbox_1.data_length = (CAN1 -> sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC_Msk) >> CAN_RDT0R_DLC_Pos;
 8000e82:	4b6d      	ldr	r3, [pc, #436]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000e84:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	4a6b      	ldr	r2, [pc, #428]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000e8e:	6053      	str	r3, [r2, #4]
			CAN1 -> RF0R |= CAN_RF0R_RFOM0;
 8000e90:	4b69      	ldr	r3, [pc, #420]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4a68      	ldr	r2, [pc, #416]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	60d3      	str	r3, [r2, #12]
			while((CAN1 -> RF0R & CAN_RF0R_RFOM0)){}
 8000e9c:	bf00      	nop
 8000e9e:	4b66      	ldr	r3, [pc, #408]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f9      	bne.n	8000e9e <CAN_Get_Payload+0x122>
 8000eaa:	e04d      	b.n	8000f48 <CAN_Get_Payload+0x1cc>
		}
		else
		{
			//Data Frame
			RX_Mailbox_1.frame_type = CAN_Frame_Data;
 8000eac:	4b63      	ldr	r3, [pc, #396]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
			RX_Mailbox_1.data_length = (CAN1 -> sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC_Msk) >> CAN_RDT0R_DLC_Pos;
 8000eb2:	4b61      	ldr	r3, [pc, #388]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000eb4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000eb8:	f003 030f 	and.w	r3, r3, #15
 8000ebc:	4a5f      	ldr	r2, [pc, #380]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000ebe:	6053      	str	r3, [r2, #4]
			for(int i = 0; i < RX_Mailbox_1.data_length; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e02e      	b.n	8000f24 <CAN_Get_Payload+0x1a8>
			{
				if(i < 4)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	dc13      	bgt.n	8000ef4 <CAN_Get_Payload+0x178>
				{
					RX_Mailbox_1.data[i] =  (CAN1 -> sFIFOMailBox[0].RDLR & ( 0xFF << (8*i))) >> (8*i);
 8000ecc:	4b5a      	ldr	r3, [pc, #360]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000ece:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	00d2      	lsls	r2, r2, #3
 8000ed6:	21ff      	movs	r1, #255	; 0xff
 8000ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8000edc:	401a      	ands	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4a54      	ldr	r2, [pc, #336]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3302      	adds	r3, #2
 8000eee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ef2:	e014      	b.n	8000f1e <CAN_Get_Payload+0x1a2>
				}
				else
				{
					RX_Mailbox_1.data[i] =  (CAN1 -> sFIFOMailBox[0].RDHR & ( 0xFF << (8*(i-4)))) >> (8*(i-4));
 8000ef4:	4b50      	ldr	r3, [pc, #320]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000ef6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	3a04      	subs	r2, #4
 8000efe:	00d2      	lsls	r2, r2, #3
 8000f00:	21ff      	movs	r1, #255	; 0xff
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f12:	4619      	mov	r1, r3
 8000f14:	4a49      	ldr	r2, [pc, #292]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < RX_Mailbox_1.data_length; i++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	4b45      	ldr	r3, [pc, #276]	; (800103c <CAN_Get_Payload+0x2c0>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dbcb      	blt.n	8000ec6 <CAN_Get_Payload+0x14a>
				}
			}

			CAN1 -> RF0R |= CAN_RF0R_RFOM0;
 8000f2e:	4b42      	ldr	r3, [pc, #264]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	4a41      	ldr	r2, [pc, #260]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	60d3      	str	r3, [r2, #12]
			while((CAN1 -> RF0R & CAN_RF0R_RFOM0)){}
 8000f3a:	bf00      	nop
 8000f3c:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f003 0320 	and.w	r3, r3, #32
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f9      	bne.n	8000f3c <CAN_Get_Payload+0x1c0>
		}
		return CAN_RX_Buffer_1;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	e0ab      	b.n	80010a4 <CAN_Get_Payload+0x328>
	}

	if(fifo2_full)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80a6 	beq.w	80010a0 <CAN_Get_Payload+0x324>
	{
		id_type =  (CAN1 -> sFIFOMailBox[1].RIR & CAN_RI0R_IDE_Msk) >> CAN_RI0R_IDE_Pos ;
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000f56:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	603b      	str	r3, [r7, #0]
		frame_type = (CAN1 -> sFIFOMailBox[1].RIR & CAN_RI0R_RTR_Msk) >> CAN_RI0R_RTR_Pos ;
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000f64:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000f68:	085b      	lsrs	r3, r3, #1
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]

		if(id_type)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <CAN_Get_Payload+0x212>
		{
			//Extended ID
			RX_Mailbox_2.id_type = CAN_ID_Extended;
 8000f76:	4b34      	ldr	r3, [pc, #208]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8000f78:	220a      	movs	r2, #10
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
			RX_Mailbox_2.ID = (CAN1 -> sFIFOMailBox[1].RIR & CAN_RI1R_EXID_Msk) >> CAN_RI1R_EXID_Pos;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000f7e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000f82:	08db      	lsrs	r3, r3, #3
 8000f84:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000f88:	4a2f      	ldr	r2, [pc, #188]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8000f8a:	6353      	str	r3, [r2, #52]	; 0x34
 8000f8c:	e00a      	b.n	8000fa4 <CAN_Get_Payload+0x228>
		}
		else
		{
			//Standard ID
			RX_Mailbox_2.id_type = CAN_ID_Standard;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
			RX_Mailbox_2.ID = (CAN1 -> sFIFOMailBox[1].RIR & CAN_RI1R_STID_Msk) >> CAN_RI1R_STID_Pos;
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000f96:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000f9a:	0d5b      	lsrs	r3, r3, #21
 8000f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa0:	4a29      	ldr	r2, [pc, #164]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8000fa2:	6353      	str	r3, [r2, #52]	; 0x34
		}

		if(mailbox.timestamp_enable)
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <CAN_Get_Payload+0x23c>
		{
			RX_Mailbox_2.message_timestamp = (CAN1 -> sFIFOMailBox[1].RDTR & CAN_RDT1R_TIME_Msk) >> CAN_RDT1R_TIME_Pos;
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000fac:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000fb0:	0c1b      	lsrs	r3, r3, #16
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8000fb6:	6013      	str	r3, [r2, #0]
		}

		if(frame_type)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d017      	beq.n	8000fee <CAN_Get_Payload+0x272>
		{
			//RTR Frame
			RX_Mailbox_2.frame_type = CAN_Frame_Remote;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
			RX_Mailbox_2.data_length = (CAN1 -> sFIFOMailBox[1].RDTR & CAN_RDT1R_DLC_Msk) >> CAN_RDT1R_DLC_Pos;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000fc6:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8000fd0:	6053      	str	r3, [r2, #4]
			CAN1 -> RF1R |= CAN_RF1R_RFOM1;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	6113      	str	r3, [r2, #16]
			while((CAN1 -> RF1R & CAN_RF1R_RFOM1)){}
 8000fde:	bf00      	nop
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f9      	bne.n	8000fe0 <CAN_Get_Payload+0x264>
 8000fec:	e056      	b.n	800109c <CAN_Get_Payload+0x320>
		}
		else
		{
			//Data Frame
			RX_Mailbox_2.frame_type = CAN_Frame_Data;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
			RX_Mailbox_2.data_length = (CAN1 -> sFIFOMailBox[1].RDTR & CAN_RDT1R_DLC_Msk) >> CAN_RDT1R_DLC_Pos;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8000ff6:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <CAN_Get_Payload+0x2cc>)
 8001000:	6053      	str	r3, [r2, #4]
			for(int i = 0; i < RX_Mailbox_2.data_length; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	e044      	b.n	8001092 <CAN_Get_Payload+0x316>
			{
				if(i < 4)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b03      	cmp	r3, #3
 800100c:	dc1e      	bgt.n	800104c <CAN_Get_Payload+0x2d0>
				{
					RX_Mailbox_2.data[i] =  (CAN1 -> sFIFOMailBox[1].RDLR & ( 0xFF << (8*i))) >> (8*i);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <CAN_Get_Payload+0x2bc>)
 8001010:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	00d2      	lsls	r2, r2, #3
 8001018:	21ff      	movs	r1, #255	; 0xff
 800101a:	fa01 f202 	lsl.w	r2, r1, r2
 800101e:	401a      	ands	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	4619      	mov	r1, r3
 800102a:	4a07      	ldr	r2, [pc, #28]	; (8001048 <CAN_Get_Payload+0x2cc>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3302      	adds	r3, #2
 8001030:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001034:	e01d      	b.n	8001072 <CAN_Get_Payload+0x2f6>
 8001036:	bf00      	nop
 8001038:	40006400 	.word	0x40006400
 800103c:	20000094 	.word	0x20000094
 8001040:	40010800 	.word	0x40010800
 8001044:	40011000 	.word	0x40011000
 8001048:	200000d0 	.word	0x200000d0
				}
				else
				{
					RX_Mailbox_2.data[i] =  (CAN1 -> sFIFOMailBox[1].RDHR & ( 0xFF << (8*i))) >> (8*i);
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <CAN_Get_Payload+0x334>)
 800104e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	21ff      	movs	r1, #255	; 0xff
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	401a      	ands	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	fa22 f303 	lsr.w	r3, r2, r3
 8001066:	4619      	mov	r1, r3
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <CAN_Get_Payload+0x338>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	3302      	adds	r3, #2
 800106e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}

				CAN1 -> RF1R |= CAN_RF1R_RFOM1;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <CAN_Get_Payload+0x334>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <CAN_Get_Payload+0x334>)
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	6113      	str	r3, [r2, #16]
				while((CAN1 -> RF1R & CAN_RF1R_RFOM1)){}
 800107e:	bf00      	nop
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <CAN_Get_Payload+0x334>)
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f9      	bne.n	8001080 <CAN_Get_Payload+0x304>
			for(int i = 0; i < RX_Mailbox_2.data_length; i++)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	3301      	adds	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <CAN_Get_Payload+0x338>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbb5      	blt.n	8001008 <CAN_Get_Payload+0x28c>
			}
		}

		return CAN_RX_Buffer_2;
 800109c:	2305      	movs	r3, #5
 800109e:	e001      	b.n	80010a4 <CAN_Get_Payload+0x328>
	}

	return -1;
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	b004      	add	sp, #16
 80010ae:	4770      	bx	lr
 80010b0:	40006400 	.word	0x40006400
 80010b4:	200000d0 	.word	0x200000d0

080010b8 <Console_Init>:
#include "Console.h"

char buff[1000];

void Console_Init(int32_t baudrate)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <Console_Init+0x68>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a16      	ldr	r2, [pc, #88]	; (8001120 <Console_Init+0x68>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6193      	str	r3, [r2, #24]
	GPIO_Pin_Setup(GPIOA, 9, 0b1011);
 80010cc:	220b      	movs	r2, #11
 80010ce:	2109      	movs	r1, #9
 80010d0:	4814      	ldr	r0, [pc, #80]	; (8001124 <Console_Init+0x6c>)
 80010d2:	f000 f861 	bl	8001198 <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 10, 0b1011);
 80010d6:	220b      	movs	r2, #11
 80010d8:	210a      	movs	r1, #10
 80010da:	4812      	ldr	r0, [pc, #72]	; (8001124 <Console_Init+0x6c>)
 80010dc:	f000 f85c 	bl	8001198 <GPIO_Pin_Setup>
	USART1 -> CR1 |= USART_CR1_UE;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <Console_Init+0x70>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <Console_Init+0x70>)
 80010e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ea:	60d3      	str	r3, [r2, #12]
	USART1 -> BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <Console_Init+0x74>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80010f8:	011a      	lsls	r2, r3, #4
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <Console_Init+0x70>)
 80010fc:	609a      	str	r2, [r3, #8]
	USART1 -> CR1 |= USART_CR1_TE ;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <Console_Init+0x70>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <Console_Init+0x70>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	60d3      	str	r3, [r2, #12]
	USART1 -> CR1 |=  USART_CR1_RE  ;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <Console_Init+0x70>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <Console_Init+0x70>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	60d3      	str	r3, [r2, #12]
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	40010800 	.word	0x40010800
 8001128:	40013800 	.word	0x40013800
 800112c:	20000000 	.word	0x20000000

08001130 <printConsole>:


void printConsole(char *msg, ...)
{
 8001130:	b40f      	push	{r0, r1, r2, r3}
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0

	va_list args;
	va_start(args, msg);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <printConsole+0x60>)
 8001144:	f000 fb86 	bl	8001854 <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e00f      	b.n	800116e <printConsole+0x3e>
	{
		USART1 -> DR = buff[i];
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <printConsole+0x60>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <printConsole+0x64>)
 8001158:	605a      	str	r2, [r3, #4]
		while (!(USART1->SR & USART_SR_TXE));
 800115a:	bf00      	nop
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <printConsole+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f9      	beq.n	800115c <printConsole+0x2c>
	for(int i = 0; i<= strlen(buff)-1; i++)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3301      	adds	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <printConsole+0x60>)
 8001170:	f7fe fffe 	bl	8000170 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	d2e7      	bcs.n	800114e <printConsole+0x1e>
	}

}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800118a:	b004      	add	sp, #16
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000108 	.word	0x20000108
 8001194:	40013800 	.word	0x40013800

08001198 <GPIO_Pin_Setup>:
#include "GPIO.h"



void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
 80011a4:	4613      	mov	r3, r2
 80011a6:	70bb      	strb	r3, [r7, #2]
	if(Port == GPIOA)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a4a      	ldr	r2, [pc, #296]	; (80012d4 <GPIO_Pin_Setup+0x13c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d12b      	bne.n	8001208 <GPIO_Pin_Setup+0x70>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 80011b0:	78bb      	ldrb	r3, [r7, #2]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	d002      	beq.n	80011bc <GPIO_Pin_Setup+0x24>
 80011b6:	78bb      	ldrb	r3, [r7, #2]
 80011b8:	2b0b      	cmp	r3, #11
 80011ba:	d106      	bne.n	80011ca <GPIO_Pin_Setup+0x32>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a45      	ldr	r2, [pc, #276]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 80011c2:	f043 0305 	orr.w	r3, r3, #5
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	e005      	b.n	80011d6 <GPIO_Pin_Setup+0x3e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80011ca:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a42      	ldr	r2, [pc, #264]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	2b07      	cmp	r3, #7
 80011da:	d80a      	bhi.n	80011f2 <GPIO_Pin_Setup+0x5a>
		{
			Port -> CRL |= function << (4*pin);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	78b9      	ldrb	r1, [r7, #2]
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e00a      	b.n	8001208 <GPIO_Pin_Setup+0x70>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	78b9      	ldrb	r1, [r7, #2]
 80011f8:	78fa      	ldrb	r2, [r7, #3]
 80011fa:	3a08      	subs	r2, #8
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	605a      	str	r2, [r3, #4]
		}
	}


	if(Port == GPIOB)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a34      	ldr	r2, [pc, #208]	; (80012dc <GPIO_Pin_Setup+0x144>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d12b      	bne.n	8001268 <GPIO_Pin_Setup+0xd0>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 8001210:	78bb      	ldrb	r3, [r7, #2]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	d002      	beq.n	800121c <GPIO_Pin_Setup+0x84>
 8001216:	78bb      	ldrb	r3, [r7, #2]
 8001218:	2b0b      	cmp	r3, #11
 800121a:	d106      	bne.n	800122a <GPIO_Pin_Setup+0x92>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a2d      	ldr	r2, [pc, #180]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 8001222:	f043 0309 	orr.w	r3, r3, #9
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	e005      	b.n	8001236 <GPIO_Pin_Setup+0x9e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a2a      	ldr	r2, [pc, #168]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	2b07      	cmp	r3, #7
 800123a:	d80a      	bhi.n	8001252 <GPIO_Pin_Setup+0xba>
		{
			Port -> CRL |= function << (4*pin);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	78b9      	ldrb	r1, [r7, #2]
 8001242:	78fa      	ldrb	r2, [r7, #3]
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e00a      	b.n	8001268 <GPIO_Pin_Setup+0xd0>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	78b9      	ldrb	r1, [r7, #2]
 8001258:	78fa      	ldrb	r2, [r7, #3]
 800125a:	3a08      	subs	r2, #8
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]
		}
	}

	if(Port == GPIOC)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <GPIO_Pin_Setup+0x148>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d12b      	bne.n	80012c8 <GPIO_Pin_Setup+0x130>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 8001270:	78bb      	ldrb	r3, [r7, #2]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d002      	beq.n	800127c <GPIO_Pin_Setup+0xe4>
 8001276:	78bb      	ldrb	r3, [r7, #2]
 8001278:	2b0b      	cmp	r3, #11
 800127a:	d106      	bne.n	800128a <GPIO_Pin_Setup+0xf2>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 8001282:	f043 0311 	orr.w	r3, r3, #17
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	e005      	b.n	8001296 <GPIO_Pin_Setup+0xfe>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <GPIO_Pin_Setup+0x140>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	2b07      	cmp	r3, #7
 800129a:	d80a      	bhi.n	80012b2 <GPIO_Pin_Setup+0x11a>
		{
			Port -> CRL |= function << (4*pin);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	78b9      	ldrb	r1, [r7, #2]
 80012a2:	78fa      	ldrb	r2, [r7, #3]
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	601a      	str	r2, [r3, #0]
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
		}
	}
}
 80012b0:	e00a      	b.n	80012c8 <GPIO_Pin_Setup+0x130>
			Port -> CRH |= function << (4*(pin - 8));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	78b9      	ldrb	r1, [r7, #2]
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	3a08      	subs	r2, #8
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	fa01 f202 	lsl.w	r2, r1, r2
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	605a      	str	r2, [r3, #4]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40010800 	.word	0x40010800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	40011000 	.word	0x40011000

080012e4 <SystemAPB1_Clock_Speed>:

#define Use_External_Crystal 1
#define Use_Internal_Crystal 2

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemAPB1_Clock_Speed+0x20>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <SystemAPB1_Clock_Speed+0x24>)
 80012ee:	6852      	ldr	r2, [r2, #4]
 80012f0:	0a12      	lsrs	r2, r2, #8
 80012f2:	f002 0207 	and.w	r2, r2, #7
 80012f6:	4905      	ldr	r1, [pc, #20]	; (800130c <SystemAPB1_Clock_Speed+0x28>)
 80012f8:	5c8a      	ldrb	r2, [r1, r2]
 80012fa:	40d3      	lsrs	r3, r2
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000000 	.word	0x20000000
 8001308:	40021000 	.word	0x40021000
 800130c:	080020f0 	.word	0x080020f0

08001310 <SystemAPB2_Clock_Speed>:

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemAPB2_Clock_Speed+0x20>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <SystemAPB2_Clock_Speed+0x24>)
 800131a:	6852      	ldr	r2, [r2, #4]
 800131c:	0ad2      	lsrs	r2, r2, #11
 800131e:	f002 0207 	and.w	r2, r2, #7
 8001322:	4905      	ldr	r1, [pc, #20]	; (8001338 <SystemAPB2_Clock_Speed+0x28>)
 8001324:	5c8a      	ldrb	r2, [r1, r2]
 8001326:	40d3      	lsrs	r3, r2
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000000 	.word	0x20000000
 8001334:	40021000 	.word	0x40021000
 8001338:	080020f0 	.word	0x080020f0

0800133c <MCU_Clock_Init>:

__STATIC_INLINE void MCU_Clock_Init(int crystal)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	SystemInit();
 8001344:	f000 f996 	bl	8001674 <SystemInit>
	switch (crystal) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d003      	beq.n	8001356 <MCU_Clock_Init+0x1a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d052      	beq.n	80013fa <MCU_Clock_Init+0xbe>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
		}
			break;
	}
}
 8001354:	e098      	b.n	8001488 <MCU_Clock_Init+0x14c>
			RCC->CR |= RCC_CR_HSEON ;
 8001356:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <MCU_Clock_Init+0x154>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <MCU_Clock_Init+0x154>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_HSERDY));
 8001362:	bf00      	nop
 8001364:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <MCU_Clock_Init+0x154>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f9      	beq.n	8001364 <MCU_Clock_Init+0x28>
			FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <MCU_Clock_Init+0x158>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a47      	ldr	r2, [pc, #284]	; (8001494 <MCU_Clock_Init+0x158>)
 8001376:	f043 0314 	orr.w	r3, r3, #20
 800137a:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= RCC_CFGR_PLLSRC;
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <MCU_Clock_Init+0x154>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a43      	ldr	r2, [pc, #268]	; (8001490 <MCU_Clock_Init+0x154>)
 8001382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001386:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <MCU_Clock_Init+0x154>)
 800138a:	4a41      	ldr	r2, [pc, #260]	; (8001490 <MCU_Clock_Init+0x154>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8001390:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <MCU_Clock_Init+0x154>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a3e      	ldr	r2, [pc, #248]	; (8001490 <MCU_Clock_Init+0x154>)
 8001396:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800139a:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800139c:	4b3c      	ldr	r3, [pc, #240]	; (8001490 <MCU_Clock_Init+0x154>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a3b      	ldr	r2, [pc, #236]	; (8001490 <MCU_Clock_Init+0x154>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6053      	str	r3, [r2, #4]
			RCC->CR |= RCC_CR_PLLON;
 80013a8:	4b39      	ldr	r3, [pc, #228]	; (8001490 <MCU_Clock_Init+0x154>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a38      	ldr	r2, [pc, #224]	; (8001490 <MCU_Clock_Init+0x154>)
 80013ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b2:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_PLLRDY));
 80013b4:	bf00      	nop
 80013b6:	4b36      	ldr	r3, [pc, #216]	; (8001490 <MCU_Clock_Init+0x154>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f9      	beq.n	80013b6 <MCU_Clock_Init+0x7a>
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 80013c2:	4b33      	ldr	r3, [pc, #204]	; (8001490 <MCU_Clock_Init+0x154>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a32      	ldr	r2, [pc, #200]	; (8001490 <MCU_Clock_Init+0x154>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6053      	str	r3, [r2, #4]
			while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80013ce:	bf00      	nop
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <MCU_Clock_Init+0x154>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f9      	beq.n	80013d0 <MCU_Clock_Init+0x94>
			SystemCoreClockUpdate();
 80013dc:	f000 f950 	bl	8001680 <SystemCoreClockUpdate>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 80013e0:	f7ff ff80 	bl	80012e4 <SystemAPB1_Clock_Speed>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <MCU_Clock_Init+0x15c>)
 80013ea:	601a      	str	r2, [r3, #0]
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 80013ec:	f7ff ff90 	bl	8001310 <SystemAPB2_Clock_Speed>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b29      	ldr	r3, [pc, #164]	; (800149c <MCU_Clock_Init+0x160>)
 80013f6:	601a      	str	r2, [r3, #0]
			break;
 80013f8:	e046      	b.n	8001488 <MCU_Clock_Init+0x14c>
			SystemInit();
 80013fa:	f000 f93b 	bl	8001674 <SystemInit>
			FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <MCU_Clock_Init+0x158>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <MCU_Clock_Init+0x158>)
 8001404:	f043 0314 	orr.w	r3, r3, #20
 8001408:	6013      	str	r3, [r2, #0]
			RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MCU_Clock_Init+0x154>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a20      	ldr	r2, [pc, #128]	; (8001490 <MCU_Clock_Init+0x154>)
 8001410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001414:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MCU_Clock_Init+0x154>)
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <MCU_Clock_Init+0x154>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLMULL16;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MCU_Clock_Init+0x154>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MCU_Clock_Init+0x154>)
 8001424:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001428:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MCU_Clock_Init+0x154>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <MCU_Clock_Init+0x154>)
 8001430:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001434:	6053      	str	r3, [r2, #4]
			RCC->CR |= RCC_CR_PLLON;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MCU_Clock_Init+0x154>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <MCU_Clock_Init+0x154>)
 800143c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001440:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_PLLRDY));
 8001442:	bf00      	nop
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MCU_Clock_Init+0x154>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f9      	beq.n	8001444 <MCU_Clock_Init+0x108>
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MCU_Clock_Init+0x154>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <MCU_Clock_Init+0x154>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6053      	str	r3, [r2, #4]
			while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 800145c:	bf00      	nop
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MCU_Clock_Init+0x154>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f9      	beq.n	800145e <MCU_Clock_Init+0x122>
			SystemCoreClockUpdate();
 800146a:	f000 f909 	bl	8001680 <SystemCoreClockUpdate>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 800146e:	f7ff ff39 	bl	80012e4 <SystemAPB1_Clock_Speed>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MCU_Clock_Init+0x15c>)
 8001478:	601a      	str	r2, [r3, #0]
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 800147a:	f7ff ff49 	bl	8001310 <SystemAPB2_Clock_Speed>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <MCU_Clock_Init+0x160>)
 8001484:	601a      	str	r2, [r3, #0]
			break;
 8001486:	bf00      	nop
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	40022000 	.word	0x40022000
 8001498:	200000cc 	.word	0x200000cc
 800149c:	20000090 	.word	0x20000090

080014a0 <Delay_Config>:

__STATIC_INLINE uint32_t Delay_Config(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <Delay_Config+0x30>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <Delay_Config+0x30>)
 80014ac:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80014b0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <Delay_Config+0x30>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 5;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <Delay_Config+0x30>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <Delay_Config+0x30>)
 80014be:	f043 0305 	orr.w	r3, r3, #5
 80014c2:	6013      	str	r3, [r2, #0]
	return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <main>:
	}
	printConsole("\r\n");
}

int main(void)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b0e3      	sub	sp, #396	; 0x18c
 80014d8:	af60      	add	r7, sp, #384	; 0x180
	MCU_Clock_Init(Use_External_Crystal);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff ff2e 	bl	800133c <MCU_Clock_Init>
	Console_Init(230400);
 80014e0:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80014e4:	f7ff fde8 	bl	80010b8 <Console_Init>
	Delay_Config();
 80014e8:	f7ff ffda 	bl	80014a0 <Delay_Config>
	GPIO_Pin_Setup(GPIOC, 13, GEN_OPEN_DRAIN_OUTPUT);
 80014ec:	2207      	movs	r2, #7
 80014ee:	210d      	movs	r1, #13
 80014f0:	4839      	ldr	r0, [pc, #228]	; (80015d8 <main+0x104>)
 80014f2:	f7ff fe51 	bl	8001198 <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 0, GEN_PUSH_PULL_OUTPUT);
 80014f6:	2203      	movs	r2, #3
 80014f8:	2100      	movs	r1, #0
 80014fa:	4838      	ldr	r0, [pc, #224]	; (80015dc <main+0x108>)
 80014fc:	f7ff fe4c 	bl	8001198 <GPIO_Pin_Setup>
	payload.baudrate = CAN_BAUDRATE_1000_KBPS;
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <main+0x10c>)
 8001502:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <main+0x110>)
 8001504:	601a      	str	r2, [r3, #0]
	payload.timestamp_enable = CAN_Timestamp_Disable;
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <main+0x10c>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
	payload.Filter0.enable = 1;
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <main+0x10c>)
 800150e:	2201      	movs	r2, #1
 8001510:	609a      	str	r2, [r3, #8]
	payload.Filter0.type = CAN_FILTER_MASK_MODE;
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <main+0x10c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
	payload.Filter0.scale = CAN_Filter_Scale_32bit;
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <main+0x10c>)
 800151a:	2201      	movs	r2, #1
 800151c:	611a      	str	r2, [r3, #16]
	payload.Filter0.bank_id = CAN_Filter_Bank_FIFO0;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <main+0x10c>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
	payload.Filter0.ID_Register = 0x201 << 21;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <main+0x10c>)
 8001526:	4a30      	ldr	r2, [pc, #192]	; (80015e8 <main+0x114>)
 8001528:	61da      	str	r2, [r3, #28]
	payload.Filter0.Mask_Register = 0x200 << 21;
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <main+0x10c>)
 800152c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001530:	619a      	str	r2, [r3, #24]
	CAN_Init(payload);
 8001532:	4c2b      	ldr	r4, [pc, #172]	; (80015e0 <main+0x10c>)
 8001534:	4668      	mov	r0, sp
 8001536:	f104 0310 	add.w	r3, r4, #16
 800153a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800153e:	4619      	mov	r1, r3
 8001540:	f000 f964 	bl	800180c <memcpy>
 8001544:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001548:	f7fe fe1a 	bl	8000180 <CAN_Init>
//		payload.TX_data[5] = 0x06;
//		payload.TX_data[6] = 0x07;
//		payload.TX_data[7] = 0x08;
//		CAN_Send_Payload(payload);

		if(CAN_Get_Payload(payload) == CAN_RX_Buffer_1)
 800154c:	4c24      	ldr	r4, [pc, #144]	; (80015e0 <main+0x10c>)
 800154e:	4668      	mov	r0, sp
 8001550:	f104 0310 	add.w	r3, r4, #16
 8001554:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001558:	4619      	mov	r1, r3
 800155a:	f000 f957 	bl	800180c <memcpy>
 800155e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001562:	f7ff fc0b 	bl	8000d7c <CAN_Get_Payload>
 8001566:	4603      	mov	r3, r0
 8001568:	2b04      	cmp	r3, #4
 800156a:	d1ef      	bne.n	800154c <main+0x78>
		{
			GPIOC -> BSRR |= GPIO_BSRR_BR13;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <main+0x104>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <main+0x104>)
 8001572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001576:	6113      	str	r3, [r2, #16]
			printConsole("Data from Buffer 1\r\n");
 8001578:	481c      	ldr	r0, [pc, #112]	; (80015ec <main+0x118>)
 800157a:	f7ff fdd9 	bl	8001130 <printConsole>
			printConsole("ID = 0x%"PRIx32"\r\n",RX_Mailbox_1.ID);
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <main+0x11c>)
 8001580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001582:	4619      	mov	r1, r3
 8001584:	481b      	ldr	r0, [pc, #108]	; (80015f4 <main+0x120>)
 8001586:	f7ff fdd3 	bl	8001130 <printConsole>
			printConsole("DLC = %d\r\n",RX_Mailbox_1.data_length);
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <main+0x11c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4619      	mov	r1, r3
 8001590:	4819      	ldr	r0, [pc, #100]	; (80015f8 <main+0x124>)
 8001592:	f7ff fdcd 	bl	8001130 <printConsole>
			printConsole("Data: ");
 8001596:	4819      	ldr	r0, [pc, #100]	; (80015fc <main+0x128>)
 8001598:	f7ff fdca 	bl	8001130 <printConsole>
			for(int i = 0; i < RX_Mailbox_1.data_length; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	e00b      	b.n	80015ba <main+0xe6>
			{
				printConsole("0x%x,",RX_Mailbox_1.data[i]);
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <main+0x11c>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3302      	adds	r3, #2
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <main+0x12c>)
 80015b0:	f7ff fdbe 	bl	8001130 <printConsole>
			for(int i = 0; i < RX_Mailbox_1.data_length; i++)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3301      	adds	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <main+0x11c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbee      	blt.n	80015a2 <main+0xce>
			}
			printConsole("\r\n");
 80015c4:	480f      	ldr	r0, [pc, #60]	; (8001604 <main+0x130>)
 80015c6:	f7ff fdb3 	bl	8001130 <printConsole>
			GPIOC -> BSRR |= GPIO_BSRR_BS13;
 80015ca:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <main+0x104>)
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	4a02      	ldr	r2, [pc, #8]	; (80015d8 <main+0x104>)
 80015d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015d4:	6113      	str	r3, [r2, #16]
		if(CAN_Get_Payload(payload) == CAN_RX_Buffer_1)
 80015d6:	e7b9      	b.n	800154c <main+0x78>
 80015d8:	40011000 	.word	0x40011000
 80015dc:	40010800 	.word	0x40010800
 80015e0:	200004f0 	.word	0x200004f0
 80015e4:	001e0001 	.word	0x001e0001
 80015e8:	40200000 	.word	0x40200000
 80015ec:	08002098 	.word	0x08002098
 80015f0:	20000094 	.word	0x20000094
 80015f4:	080020b0 	.word	0x080020b0
 80015f8:	080020c0 	.word	0x080020c0
 80015fc:	080020cc 	.word	0x080020cc
 8001600:	080020d4 	.word	0x080020d4
 8001604:	080020dc 	.word	0x080020dc

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f000 f8be 	bl	80017b8 <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20005000 	.word	0x20005000
 8001668:	00000400 	.word	0x00000400
 800166c:	20000084 	.word	0x20000084
 8001670:	20000690 	.word	0x20000690

08001674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <SystemCoreClockUpdate+0xd0>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d011      	beq.n	80016c6 <SystemCoreClockUpdate+0x46>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d83a      	bhi.n	800171e <SystemCoreClockUpdate+0x9e>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SystemCoreClockUpdate+0x36>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d004      	beq.n	80016be <SystemCoreClockUpdate+0x3e>
 80016b4:	e033      	b.n	800171e <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <SystemCoreClockUpdate+0xd4>)
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <SystemCoreClockUpdate+0xd8>)
 80016ba:	601a      	str	r2, [r3, #0]
      break;
 80016bc:	e033      	b.n	8001726 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80016be:	4b25      	ldr	r3, [pc, #148]	; (8001754 <SystemCoreClockUpdate+0xd4>)
 80016c0:	4a25      	ldr	r2, [pc, #148]	; (8001758 <SystemCoreClockUpdate+0xd8>)
 80016c2:	601a      	str	r2, [r3, #0]
      break;
 80016c4:	e02f      	b.n	8001726 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <SystemCoreClockUpdate+0xd0>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80016ce:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <SystemCoreClockUpdate+0xd0>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	0c9b      	lsrs	r3, r3, #18
 80016de:	3302      	adds	r3, #2
 80016e0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d106      	bne.n	80016f6 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <SystemCoreClockUpdate+0xdc>)
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	4a18      	ldr	r2, [pc, #96]	; (8001754 <SystemCoreClockUpdate+0xd4>)
 80016f2:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 80016f4:	e017      	b.n	8001726 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <SystemCoreClockUpdate+0xd0>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <SystemCoreClockUpdate+0xdc>)
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <SystemCoreClockUpdate+0xd4>)
 800170c:	6013      	str	r3, [r2, #0]
      break;
 800170e:	e00a      	b.n	8001726 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4a11      	ldr	r2, [pc, #68]	; (8001758 <SystemCoreClockUpdate+0xd8>)
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <SystemCoreClockUpdate+0xd4>)
 800171a:	6013      	str	r3, [r2, #0]
      break;
 800171c:	e003      	b.n	8001726 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <SystemCoreClockUpdate+0xd4>)
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <SystemCoreClockUpdate+0xd8>)
 8001722:	601a      	str	r2, [r3, #0]
      break;
 8001724:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <SystemCoreClockUpdate+0xd0>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <SystemCoreClockUpdate+0xe0>)
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <SystemCoreClockUpdate+0xd4>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <SystemCoreClockUpdate+0xd4>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	20000000 	.word	0x20000000
 8001758:	007a1200 	.word	0x007a1200
 800175c:	003d0900 	.word	0x003d0900
 8001760:	080020e0 	.word	0x080020e0

08001764 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001766:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001768:	f7ff ff84 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	; (80017a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <LoopForever+0xe>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	; (80017b0 <LoopForever+0x16>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001792:	f000 f817 	bl	80017c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001796:	f7ff fe9d 	bl	80014d4 <main>

0800179a <LoopForever>:

LoopForever:
    b LoopForever
 800179a:	e7fe      	b.n	800179a <LoopForever>
  ldr   r0, =_estack
 800179c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017a8:	08002134 	.word	0x08002134
  ldr r2, =_sbss
 80017ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017b0:	2000068c 	.word	0x2000068c

080017b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC1_2_IRQHandler>
	...

080017b8 <__errno>:
 80017b8:	4b01      	ldr	r3, [pc, #4]	; (80017c0 <__errno+0x8>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000004 	.word	0x20000004

080017c4 <__libc_init_array>:
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	2600      	movs	r6, #0
 80017c8:	4d0c      	ldr	r5, [pc, #48]	; (80017fc <__libc_init_array+0x38>)
 80017ca:	4c0d      	ldr	r4, [pc, #52]	; (8001800 <__libc_init_array+0x3c>)
 80017cc:	1b64      	subs	r4, r4, r5
 80017ce:	10a4      	asrs	r4, r4, #2
 80017d0:	42a6      	cmp	r6, r4
 80017d2:	d109      	bne.n	80017e8 <__libc_init_array+0x24>
 80017d4:	f000 fc54 	bl	8002080 <_init>
 80017d8:	2600      	movs	r6, #0
 80017da:	4d0a      	ldr	r5, [pc, #40]	; (8001804 <__libc_init_array+0x40>)
 80017dc:	4c0a      	ldr	r4, [pc, #40]	; (8001808 <__libc_init_array+0x44>)
 80017de:	1b64      	subs	r4, r4, r5
 80017e0:	10a4      	asrs	r4, r4, #2
 80017e2:	42a6      	cmp	r6, r4
 80017e4:	d105      	bne.n	80017f2 <__libc_init_array+0x2e>
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
 80017e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ec:	4798      	blx	r3
 80017ee:	3601      	adds	r6, #1
 80017f0:	e7ee      	b.n	80017d0 <__libc_init_array+0xc>
 80017f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f6:	4798      	blx	r3
 80017f8:	3601      	adds	r6, #1
 80017fa:	e7f2      	b.n	80017e2 <__libc_init_array+0x1e>
 80017fc:	0800212c 	.word	0x0800212c
 8001800:	0800212c 	.word	0x0800212c
 8001804:	0800212c 	.word	0x0800212c
 8001808:	08002130 	.word	0x08002130

0800180c <memcpy>:
 800180c:	440a      	add	r2, r1
 800180e:	4291      	cmp	r1, r2
 8001810:	f100 33ff 	add.w	r3, r0, #4294967295
 8001814:	d100      	bne.n	8001818 <memcpy+0xc>
 8001816:	4770      	bx	lr
 8001818:	b510      	push	{r4, lr}
 800181a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800181e:	4291      	cmp	r1, r2
 8001820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001824:	d1f9      	bne.n	800181a <memcpy+0xe>
 8001826:	bd10      	pop	{r4, pc}

08001828 <_vsiprintf_r>:
 8001828:	b500      	push	{lr}
 800182a:	b09b      	sub	sp, #108	; 0x6c
 800182c:	9100      	str	r1, [sp, #0]
 800182e:	9104      	str	r1, [sp, #16]
 8001830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001834:	9105      	str	r1, [sp, #20]
 8001836:	9102      	str	r1, [sp, #8]
 8001838:	4905      	ldr	r1, [pc, #20]	; (8001850 <_vsiprintf_r+0x28>)
 800183a:	9103      	str	r1, [sp, #12]
 800183c:	4669      	mov	r1, sp
 800183e:	f000 f86f 	bl	8001920 <_svfiprintf_r>
 8001842:	2200      	movs	r2, #0
 8001844:	9b00      	ldr	r3, [sp, #0]
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	b01b      	add	sp, #108	; 0x6c
 800184a:	f85d fb04 	ldr.w	pc, [sp], #4
 800184e:	bf00      	nop
 8001850:	ffff0208 	.word	0xffff0208

08001854 <vsiprintf>:
 8001854:	4613      	mov	r3, r2
 8001856:	460a      	mov	r2, r1
 8001858:	4601      	mov	r1, r0
 800185a:	4802      	ldr	r0, [pc, #8]	; (8001864 <vsiprintf+0x10>)
 800185c:	6800      	ldr	r0, [r0, #0]
 800185e:	f7ff bfe3 	b.w	8001828 <_vsiprintf_r>
 8001862:	bf00      	nop
 8001864:	20000004 	.word	0x20000004

08001868 <__ssputs_r>:
 8001868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800186c:	688e      	ldr	r6, [r1, #8]
 800186e:	4682      	mov	sl, r0
 8001870:	429e      	cmp	r6, r3
 8001872:	460c      	mov	r4, r1
 8001874:	4690      	mov	r8, r2
 8001876:	461f      	mov	r7, r3
 8001878:	d838      	bhi.n	80018ec <__ssputs_r+0x84>
 800187a:	898a      	ldrh	r2, [r1, #12]
 800187c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001880:	d032      	beq.n	80018e8 <__ssputs_r+0x80>
 8001882:	6825      	ldr	r5, [r4, #0]
 8001884:	6909      	ldr	r1, [r1, #16]
 8001886:	3301      	adds	r3, #1
 8001888:	eba5 0901 	sub.w	r9, r5, r1
 800188c:	6965      	ldr	r5, [r4, #20]
 800188e:	444b      	add	r3, r9
 8001890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001898:	106d      	asrs	r5, r5, #1
 800189a:	429d      	cmp	r5, r3
 800189c:	bf38      	it	cc
 800189e:	461d      	movcc	r5, r3
 80018a0:	0553      	lsls	r3, r2, #21
 80018a2:	d531      	bpl.n	8001908 <__ssputs_r+0xa0>
 80018a4:	4629      	mov	r1, r5
 80018a6:	f000 fb45 	bl	8001f34 <_malloc_r>
 80018aa:	4606      	mov	r6, r0
 80018ac:	b950      	cbnz	r0, 80018c4 <__ssputs_r+0x5c>
 80018ae:	230c      	movs	r3, #12
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f8ca 3000 	str.w	r3, [sl]
 80018b8:	89a3      	ldrh	r3, [r4, #12]
 80018ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018be:	81a3      	strh	r3, [r4, #12]
 80018c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c4:	464a      	mov	r2, r9
 80018c6:	6921      	ldr	r1, [r4, #16]
 80018c8:	f7ff ffa0 	bl	800180c <memcpy>
 80018cc:	89a3      	ldrh	r3, [r4, #12]
 80018ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80018d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d6:	81a3      	strh	r3, [r4, #12]
 80018d8:	6126      	str	r6, [r4, #16]
 80018da:	444e      	add	r6, r9
 80018dc:	6026      	str	r6, [r4, #0]
 80018de:	463e      	mov	r6, r7
 80018e0:	6165      	str	r5, [r4, #20]
 80018e2:	eba5 0509 	sub.w	r5, r5, r9
 80018e6:	60a5      	str	r5, [r4, #8]
 80018e8:	42be      	cmp	r6, r7
 80018ea:	d900      	bls.n	80018ee <__ssputs_r+0x86>
 80018ec:	463e      	mov	r6, r7
 80018ee:	4632      	mov	r2, r6
 80018f0:	4641      	mov	r1, r8
 80018f2:	6820      	ldr	r0, [r4, #0]
 80018f4:	f000 fab8 	bl	8001e68 <memmove>
 80018f8:	68a3      	ldr	r3, [r4, #8]
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	1b9b      	subs	r3, r3, r6
 80018fe:	4432      	add	r2, r6
 8001900:	2000      	movs	r0, #0
 8001902:	60a3      	str	r3, [r4, #8]
 8001904:	6022      	str	r2, [r4, #0]
 8001906:	e7db      	b.n	80018c0 <__ssputs_r+0x58>
 8001908:	462a      	mov	r2, r5
 800190a:	f000 fb6d 	bl	8001fe8 <_realloc_r>
 800190e:	4606      	mov	r6, r0
 8001910:	2800      	cmp	r0, #0
 8001912:	d1e1      	bne.n	80018d8 <__ssputs_r+0x70>
 8001914:	4650      	mov	r0, sl
 8001916:	6921      	ldr	r1, [r4, #16]
 8001918:	f000 fac0 	bl	8001e9c <_free_r>
 800191c:	e7c7      	b.n	80018ae <__ssputs_r+0x46>
	...

08001920 <_svfiprintf_r>:
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	4698      	mov	r8, r3
 8001926:	898b      	ldrh	r3, [r1, #12]
 8001928:	4607      	mov	r7, r0
 800192a:	061b      	lsls	r3, r3, #24
 800192c:	460d      	mov	r5, r1
 800192e:	4614      	mov	r4, r2
 8001930:	b09d      	sub	sp, #116	; 0x74
 8001932:	d50e      	bpl.n	8001952 <_svfiprintf_r+0x32>
 8001934:	690b      	ldr	r3, [r1, #16]
 8001936:	b963      	cbnz	r3, 8001952 <_svfiprintf_r+0x32>
 8001938:	2140      	movs	r1, #64	; 0x40
 800193a:	f000 fafb 	bl	8001f34 <_malloc_r>
 800193e:	6028      	str	r0, [r5, #0]
 8001940:	6128      	str	r0, [r5, #16]
 8001942:	b920      	cbnz	r0, 800194e <_svfiprintf_r+0x2e>
 8001944:	230c      	movs	r3, #12
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	e0d1      	b.n	8001af2 <_svfiprintf_r+0x1d2>
 800194e:	2340      	movs	r3, #64	; 0x40
 8001950:	616b      	str	r3, [r5, #20]
 8001952:	2300      	movs	r3, #0
 8001954:	9309      	str	r3, [sp, #36]	; 0x24
 8001956:	2320      	movs	r3, #32
 8001958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800195c:	2330      	movs	r3, #48	; 0x30
 800195e:	f04f 0901 	mov.w	r9, #1
 8001962:	f8cd 800c 	str.w	r8, [sp, #12]
 8001966:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001b0c <_svfiprintf_r+0x1ec>
 800196a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800196e:	4623      	mov	r3, r4
 8001970:	469a      	mov	sl, r3
 8001972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001976:	b10a      	cbz	r2, 800197c <_svfiprintf_r+0x5c>
 8001978:	2a25      	cmp	r2, #37	; 0x25
 800197a:	d1f9      	bne.n	8001970 <_svfiprintf_r+0x50>
 800197c:	ebba 0b04 	subs.w	fp, sl, r4
 8001980:	d00b      	beq.n	800199a <_svfiprintf_r+0x7a>
 8001982:	465b      	mov	r3, fp
 8001984:	4622      	mov	r2, r4
 8001986:	4629      	mov	r1, r5
 8001988:	4638      	mov	r0, r7
 800198a:	f7ff ff6d 	bl	8001868 <__ssputs_r>
 800198e:	3001      	adds	r0, #1
 8001990:	f000 80aa 	beq.w	8001ae8 <_svfiprintf_r+0x1c8>
 8001994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001996:	445a      	add	r2, fp
 8001998:	9209      	str	r2, [sp, #36]	; 0x24
 800199a:	f89a 3000 	ldrb.w	r3, [sl]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80a2 	beq.w	8001ae8 <_svfiprintf_r+0x1c8>
 80019a4:	2300      	movs	r3, #0
 80019a6:	f04f 32ff 	mov.w	r2, #4294967295
 80019aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019ae:	f10a 0a01 	add.w	sl, sl, #1
 80019b2:	9304      	str	r3, [sp, #16]
 80019b4:	9307      	str	r3, [sp, #28]
 80019b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019ba:	931a      	str	r3, [sp, #104]	; 0x68
 80019bc:	4654      	mov	r4, sl
 80019be:	2205      	movs	r2, #5
 80019c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019c4:	4851      	ldr	r0, [pc, #324]	; (8001b0c <_svfiprintf_r+0x1ec>)
 80019c6:	f000 fa41 	bl	8001e4c <memchr>
 80019ca:	9a04      	ldr	r2, [sp, #16]
 80019cc:	b9d8      	cbnz	r0, 8001a06 <_svfiprintf_r+0xe6>
 80019ce:	06d0      	lsls	r0, r2, #27
 80019d0:	bf44      	itt	mi
 80019d2:	2320      	movmi	r3, #32
 80019d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019d8:	0711      	lsls	r1, r2, #28
 80019da:	bf44      	itt	mi
 80019dc:	232b      	movmi	r3, #43	; 0x2b
 80019de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019e2:	f89a 3000 	ldrb.w	r3, [sl]
 80019e6:	2b2a      	cmp	r3, #42	; 0x2a
 80019e8:	d015      	beq.n	8001a16 <_svfiprintf_r+0xf6>
 80019ea:	4654      	mov	r4, sl
 80019ec:	2000      	movs	r0, #0
 80019ee:	f04f 0c0a 	mov.w	ip, #10
 80019f2:	9a07      	ldr	r2, [sp, #28]
 80019f4:	4621      	mov	r1, r4
 80019f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019fa:	3b30      	subs	r3, #48	; 0x30
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d94e      	bls.n	8001a9e <_svfiprintf_r+0x17e>
 8001a00:	b1b0      	cbz	r0, 8001a30 <_svfiprintf_r+0x110>
 8001a02:	9207      	str	r2, [sp, #28]
 8001a04:	e014      	b.n	8001a30 <_svfiprintf_r+0x110>
 8001a06:	eba0 0308 	sub.w	r3, r0, r8
 8001a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	46a2      	mov	sl, r4
 8001a12:	9304      	str	r3, [sp, #16]
 8001a14:	e7d2      	b.n	80019bc <_svfiprintf_r+0x9c>
 8001a16:	9b03      	ldr	r3, [sp, #12]
 8001a18:	1d19      	adds	r1, r3, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	9103      	str	r1, [sp, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bfbb      	ittet	lt
 8001a22:	425b      	neglt	r3, r3
 8001a24:	f042 0202 	orrlt.w	r2, r2, #2
 8001a28:	9307      	strge	r3, [sp, #28]
 8001a2a:	9307      	strlt	r3, [sp, #28]
 8001a2c:	bfb8      	it	lt
 8001a2e:	9204      	strlt	r2, [sp, #16]
 8001a30:	7823      	ldrb	r3, [r4, #0]
 8001a32:	2b2e      	cmp	r3, #46	; 0x2e
 8001a34:	d10c      	bne.n	8001a50 <_svfiprintf_r+0x130>
 8001a36:	7863      	ldrb	r3, [r4, #1]
 8001a38:	2b2a      	cmp	r3, #42	; 0x2a
 8001a3a:	d135      	bne.n	8001aa8 <_svfiprintf_r+0x188>
 8001a3c:	9b03      	ldr	r3, [sp, #12]
 8001a3e:	3402      	adds	r4, #2
 8001a40:	1d1a      	adds	r2, r3, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	9203      	str	r2, [sp, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	bfb8      	it	lt
 8001a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a4e:	9305      	str	r3, [sp, #20]
 8001a50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001b1c <_svfiprintf_r+0x1fc>
 8001a54:	2203      	movs	r2, #3
 8001a56:	4650      	mov	r0, sl
 8001a58:	7821      	ldrb	r1, [r4, #0]
 8001a5a:	f000 f9f7 	bl	8001e4c <memchr>
 8001a5e:	b140      	cbz	r0, 8001a72 <_svfiprintf_r+0x152>
 8001a60:	2340      	movs	r3, #64	; 0x40
 8001a62:	eba0 000a 	sub.w	r0, r0, sl
 8001a66:	fa03 f000 	lsl.w	r0, r3, r0
 8001a6a:	9b04      	ldr	r3, [sp, #16]
 8001a6c:	3401      	adds	r4, #1
 8001a6e:	4303      	orrs	r3, r0
 8001a70:	9304      	str	r3, [sp, #16]
 8001a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a76:	2206      	movs	r2, #6
 8001a78:	4825      	ldr	r0, [pc, #148]	; (8001b10 <_svfiprintf_r+0x1f0>)
 8001a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a7e:	f000 f9e5 	bl	8001e4c <memchr>
 8001a82:	2800      	cmp	r0, #0
 8001a84:	d038      	beq.n	8001af8 <_svfiprintf_r+0x1d8>
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <_svfiprintf_r+0x1f4>)
 8001a88:	bb1b      	cbnz	r3, 8001ad2 <_svfiprintf_r+0x1b2>
 8001a8a:	9b03      	ldr	r3, [sp, #12]
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	f023 0307 	bic.w	r3, r3, #7
 8001a92:	3308      	adds	r3, #8
 8001a94:	9303      	str	r3, [sp, #12]
 8001a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a98:	4433      	add	r3, r6
 8001a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a9c:	e767      	b.n	800196e <_svfiprintf_r+0x4e>
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001aa6:	e7a5      	b.n	80019f4 <_svfiprintf_r+0xd4>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f04f 0c0a 	mov.w	ip, #10
 8001aae:	4619      	mov	r1, r3
 8001ab0:	3401      	adds	r4, #1
 8001ab2:	9305      	str	r3, [sp, #20]
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001aba:	3a30      	subs	r2, #48	; 0x30
 8001abc:	2a09      	cmp	r2, #9
 8001abe:	d903      	bls.n	8001ac8 <_svfiprintf_r+0x1a8>
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0c5      	beq.n	8001a50 <_svfiprintf_r+0x130>
 8001ac4:	9105      	str	r1, [sp, #20]
 8001ac6:	e7c3      	b.n	8001a50 <_svfiprintf_r+0x130>
 8001ac8:	4604      	mov	r4, r0
 8001aca:	2301      	movs	r3, #1
 8001acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ad0:	e7f0      	b.n	8001ab4 <_svfiprintf_r+0x194>
 8001ad2:	ab03      	add	r3, sp, #12
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	462a      	mov	r2, r5
 8001ad8:	4638      	mov	r0, r7
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <_svfiprintf_r+0x1f8>)
 8001adc:	a904      	add	r1, sp, #16
 8001ade:	f3af 8000 	nop.w
 8001ae2:	1c42      	adds	r2, r0, #1
 8001ae4:	4606      	mov	r6, r0
 8001ae6:	d1d6      	bne.n	8001a96 <_svfiprintf_r+0x176>
 8001ae8:	89ab      	ldrh	r3, [r5, #12]
 8001aea:	065b      	lsls	r3, r3, #25
 8001aec:	f53f af2c 	bmi.w	8001948 <_svfiprintf_r+0x28>
 8001af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001af2:	b01d      	add	sp, #116	; 0x74
 8001af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af8:	ab03      	add	r3, sp, #12
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	462a      	mov	r2, r5
 8001afe:	4638      	mov	r0, r7
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <_svfiprintf_r+0x1f8>)
 8001b02:	a904      	add	r1, sp, #16
 8001b04:	f000 f87c 	bl	8001c00 <_printf_i>
 8001b08:	e7eb      	b.n	8001ae2 <_svfiprintf_r+0x1c2>
 8001b0a:	bf00      	nop
 8001b0c:	080020f8 	.word	0x080020f8
 8001b10:	08002102 	.word	0x08002102
 8001b14:	00000000 	.word	0x00000000
 8001b18:	08001869 	.word	0x08001869
 8001b1c:	080020fe 	.word	0x080020fe

08001b20 <_printf_common>:
 8001b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b24:	4616      	mov	r6, r2
 8001b26:	4699      	mov	r9, r3
 8001b28:	688a      	ldr	r2, [r1, #8]
 8001b2a:	690b      	ldr	r3, [r1, #16]
 8001b2c:	4607      	mov	r7, r0
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	bfb8      	it	lt
 8001b32:	4613      	movlt	r3, r2
 8001b34:	6033      	str	r3, [r6, #0]
 8001b36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b40:	b10a      	cbz	r2, 8001b46 <_printf_common+0x26>
 8001b42:	3301      	adds	r3, #1
 8001b44:	6033      	str	r3, [r6, #0]
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	0699      	lsls	r1, r3, #26
 8001b4a:	bf42      	ittt	mi
 8001b4c:	6833      	ldrmi	r3, [r6, #0]
 8001b4e:	3302      	addmi	r3, #2
 8001b50:	6033      	strmi	r3, [r6, #0]
 8001b52:	6825      	ldr	r5, [r4, #0]
 8001b54:	f015 0506 	ands.w	r5, r5, #6
 8001b58:	d106      	bne.n	8001b68 <_printf_common+0x48>
 8001b5a:	f104 0a19 	add.w	sl, r4, #25
 8001b5e:	68e3      	ldr	r3, [r4, #12]
 8001b60:	6832      	ldr	r2, [r6, #0]
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	42ab      	cmp	r3, r5
 8001b66:	dc28      	bgt.n	8001bba <_printf_common+0x9a>
 8001b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b6c:	1e13      	subs	r3, r2, #0
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	bf18      	it	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	0692      	lsls	r2, r2, #26
 8001b76:	d42d      	bmi.n	8001bd4 <_printf_common+0xb4>
 8001b78:	4649      	mov	r1, r9
 8001b7a:	4638      	mov	r0, r7
 8001b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b80:	47c0      	blx	r8
 8001b82:	3001      	adds	r0, #1
 8001b84:	d020      	beq.n	8001bc8 <_printf_common+0xa8>
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	68e5      	ldr	r5, [r4, #12]
 8001b8a:	f003 0306 	and.w	r3, r3, #6
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf18      	it	ne
 8001b92:	2500      	movne	r5, #0
 8001b94:	6832      	ldr	r2, [r6, #0]
 8001b96:	f04f 0600 	mov.w	r6, #0
 8001b9a:	68a3      	ldr	r3, [r4, #8]
 8001b9c:	bf08      	it	eq
 8001b9e:	1aad      	subeq	r5, r5, r2
 8001ba0:	6922      	ldr	r2, [r4, #16]
 8001ba2:	bf08      	it	eq
 8001ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bfc4      	itt	gt
 8001bac:	1a9b      	subgt	r3, r3, r2
 8001bae:	18ed      	addgt	r5, r5, r3
 8001bb0:	341a      	adds	r4, #26
 8001bb2:	42b5      	cmp	r5, r6
 8001bb4:	d11a      	bne.n	8001bec <_printf_common+0xcc>
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e008      	b.n	8001bcc <_printf_common+0xac>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	4652      	mov	r2, sl
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	4638      	mov	r0, r7
 8001bc2:	47c0      	blx	r8
 8001bc4:	3001      	adds	r0, #1
 8001bc6:	d103      	bne.n	8001bd0 <_printf_common+0xb0>
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd0:	3501      	adds	r5, #1
 8001bd2:	e7c4      	b.n	8001b5e <_printf_common+0x3e>
 8001bd4:	2030      	movs	r0, #48	; 0x30
 8001bd6:	18e1      	adds	r1, r4, r3
 8001bd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001be2:	4422      	add	r2, r4
 8001be4:	3302      	adds	r3, #2
 8001be6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bea:	e7c5      	b.n	8001b78 <_printf_common+0x58>
 8001bec:	2301      	movs	r3, #1
 8001bee:	4622      	mov	r2, r4
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	4638      	mov	r0, r7
 8001bf4:	47c0      	blx	r8
 8001bf6:	3001      	adds	r0, #1
 8001bf8:	d0e6      	beq.n	8001bc8 <_printf_common+0xa8>
 8001bfa:	3601      	adds	r6, #1
 8001bfc:	e7d9      	b.n	8001bb2 <_printf_common+0x92>
	...

08001c00 <_printf_i>:
 8001c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c04:	460c      	mov	r4, r1
 8001c06:	7e27      	ldrb	r7, [r4, #24]
 8001c08:	4691      	mov	r9, r2
 8001c0a:	2f78      	cmp	r7, #120	; 0x78
 8001c0c:	4680      	mov	r8, r0
 8001c0e:	469a      	mov	sl, r3
 8001c10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001c12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c16:	d807      	bhi.n	8001c28 <_printf_i+0x28>
 8001c18:	2f62      	cmp	r7, #98	; 0x62
 8001c1a:	d80a      	bhi.n	8001c32 <_printf_i+0x32>
 8001c1c:	2f00      	cmp	r7, #0
 8001c1e:	f000 80d9 	beq.w	8001dd4 <_printf_i+0x1d4>
 8001c22:	2f58      	cmp	r7, #88	; 0x58
 8001c24:	f000 80a4 	beq.w	8001d70 <_printf_i+0x170>
 8001c28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c30:	e03a      	b.n	8001ca8 <_printf_i+0xa8>
 8001c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c36:	2b15      	cmp	r3, #21
 8001c38:	d8f6      	bhi.n	8001c28 <_printf_i+0x28>
 8001c3a:	a001      	add	r0, pc, #4	; (adr r0, 8001c40 <_printf_i+0x40>)
 8001c3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001c40:	08001c99 	.word	0x08001c99
 8001c44:	08001cad 	.word	0x08001cad
 8001c48:	08001c29 	.word	0x08001c29
 8001c4c:	08001c29 	.word	0x08001c29
 8001c50:	08001c29 	.word	0x08001c29
 8001c54:	08001c29 	.word	0x08001c29
 8001c58:	08001cad 	.word	0x08001cad
 8001c5c:	08001c29 	.word	0x08001c29
 8001c60:	08001c29 	.word	0x08001c29
 8001c64:	08001c29 	.word	0x08001c29
 8001c68:	08001c29 	.word	0x08001c29
 8001c6c:	08001dbb 	.word	0x08001dbb
 8001c70:	08001cdd 	.word	0x08001cdd
 8001c74:	08001d9d 	.word	0x08001d9d
 8001c78:	08001c29 	.word	0x08001c29
 8001c7c:	08001c29 	.word	0x08001c29
 8001c80:	08001ddd 	.word	0x08001ddd
 8001c84:	08001c29 	.word	0x08001c29
 8001c88:	08001cdd 	.word	0x08001cdd
 8001c8c:	08001c29 	.word	0x08001c29
 8001c90:	08001c29 	.word	0x08001c29
 8001c94:	08001da5 	.word	0x08001da5
 8001c98:	680b      	ldr	r3, [r1, #0]
 8001c9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c9e:	1d1a      	adds	r2, r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	600a      	str	r2, [r1, #0]
 8001ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0a4      	b.n	8001df6 <_printf_i+0x1f6>
 8001cac:	6825      	ldr	r5, [r4, #0]
 8001cae:	6808      	ldr	r0, [r1, #0]
 8001cb0:	062e      	lsls	r6, r5, #24
 8001cb2:	f100 0304 	add.w	r3, r0, #4
 8001cb6:	d50a      	bpl.n	8001cce <_printf_i+0xce>
 8001cb8:	6805      	ldr	r5, [r0, #0]
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	2d00      	cmp	r5, #0
 8001cbe:	da03      	bge.n	8001cc8 <_printf_i+0xc8>
 8001cc0:	232d      	movs	r3, #45	; 0x2d
 8001cc2:	426d      	negs	r5, r5
 8001cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cc8:	230a      	movs	r3, #10
 8001cca:	485e      	ldr	r0, [pc, #376]	; (8001e44 <_printf_i+0x244>)
 8001ccc:	e019      	b.n	8001d02 <_printf_i+0x102>
 8001cce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001cd2:	6805      	ldr	r5, [r0, #0]
 8001cd4:	600b      	str	r3, [r1, #0]
 8001cd6:	bf18      	it	ne
 8001cd8:	b22d      	sxthne	r5, r5
 8001cda:	e7ef      	b.n	8001cbc <_printf_i+0xbc>
 8001cdc:	680b      	ldr	r3, [r1, #0]
 8001cde:	6825      	ldr	r5, [r4, #0]
 8001ce0:	1d18      	adds	r0, r3, #4
 8001ce2:	6008      	str	r0, [r1, #0]
 8001ce4:	0628      	lsls	r0, r5, #24
 8001ce6:	d501      	bpl.n	8001cec <_printf_i+0xec>
 8001ce8:	681d      	ldr	r5, [r3, #0]
 8001cea:	e002      	b.n	8001cf2 <_printf_i+0xf2>
 8001cec:	0669      	lsls	r1, r5, #25
 8001cee:	d5fb      	bpl.n	8001ce8 <_printf_i+0xe8>
 8001cf0:	881d      	ldrh	r5, [r3, #0]
 8001cf2:	2f6f      	cmp	r7, #111	; 0x6f
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2308      	moveq	r3, #8
 8001cf8:	230a      	movne	r3, #10
 8001cfa:	4852      	ldr	r0, [pc, #328]	; (8001e44 <_printf_i+0x244>)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d02:	6866      	ldr	r6, [r4, #4]
 8001d04:	2e00      	cmp	r6, #0
 8001d06:	bfa8      	it	ge
 8001d08:	6821      	ldrge	r1, [r4, #0]
 8001d0a:	60a6      	str	r6, [r4, #8]
 8001d0c:	bfa4      	itt	ge
 8001d0e:	f021 0104 	bicge.w	r1, r1, #4
 8001d12:	6021      	strge	r1, [r4, #0]
 8001d14:	b90d      	cbnz	r5, 8001d1a <_printf_i+0x11a>
 8001d16:	2e00      	cmp	r6, #0
 8001d18:	d04d      	beq.n	8001db6 <_printf_i+0x1b6>
 8001d1a:	4616      	mov	r6, r2
 8001d1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d20:	fb03 5711 	mls	r7, r3, r1, r5
 8001d24:	5dc7      	ldrb	r7, [r0, r7]
 8001d26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d2a:	462f      	mov	r7, r5
 8001d2c:	42bb      	cmp	r3, r7
 8001d2e:	460d      	mov	r5, r1
 8001d30:	d9f4      	bls.n	8001d1c <_printf_i+0x11c>
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d10b      	bne.n	8001d4e <_printf_i+0x14e>
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	07df      	lsls	r7, r3, #31
 8001d3a:	d508      	bpl.n	8001d4e <_printf_i+0x14e>
 8001d3c:	6923      	ldr	r3, [r4, #16]
 8001d3e:	6861      	ldr	r1, [r4, #4]
 8001d40:	4299      	cmp	r1, r3
 8001d42:	bfde      	ittt	le
 8001d44:	2330      	movle	r3, #48	; 0x30
 8001d46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d4e:	1b92      	subs	r2, r2, r6
 8001d50:	6122      	str	r2, [r4, #16]
 8001d52:	464b      	mov	r3, r9
 8001d54:	4621      	mov	r1, r4
 8001d56:	4640      	mov	r0, r8
 8001d58:	f8cd a000 	str.w	sl, [sp]
 8001d5c:	aa03      	add	r2, sp, #12
 8001d5e:	f7ff fedf 	bl	8001b20 <_printf_common>
 8001d62:	3001      	adds	r0, #1
 8001d64:	d14c      	bne.n	8001e00 <_printf_i+0x200>
 8001d66:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6a:	b004      	add	sp, #16
 8001d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d70:	4834      	ldr	r0, [pc, #208]	; (8001e44 <_printf_i+0x244>)
 8001d72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001d76:	680e      	ldr	r6, [r1, #0]
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8001d7e:	061f      	lsls	r7, r3, #24
 8001d80:	600e      	str	r6, [r1, #0]
 8001d82:	d514      	bpl.n	8001dae <_printf_i+0x1ae>
 8001d84:	07d9      	lsls	r1, r3, #31
 8001d86:	bf44      	itt	mi
 8001d88:	f043 0320 	orrmi.w	r3, r3, #32
 8001d8c:	6023      	strmi	r3, [r4, #0]
 8001d8e:	b91d      	cbnz	r5, 8001d98 <_printf_i+0x198>
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	f023 0320 	bic.w	r3, r3, #32
 8001d96:	6023      	str	r3, [r4, #0]
 8001d98:	2310      	movs	r3, #16
 8001d9a:	e7af      	b.n	8001cfc <_printf_i+0xfc>
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	f043 0320 	orr.w	r3, r3, #32
 8001da2:	6023      	str	r3, [r4, #0]
 8001da4:	2378      	movs	r3, #120	; 0x78
 8001da6:	4828      	ldr	r0, [pc, #160]	; (8001e48 <_printf_i+0x248>)
 8001da8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001dac:	e7e3      	b.n	8001d76 <_printf_i+0x176>
 8001dae:	065e      	lsls	r6, r3, #25
 8001db0:	bf48      	it	mi
 8001db2:	b2ad      	uxthmi	r5, r5
 8001db4:	e7e6      	b.n	8001d84 <_printf_i+0x184>
 8001db6:	4616      	mov	r6, r2
 8001db8:	e7bb      	b.n	8001d32 <_printf_i+0x132>
 8001dba:	680b      	ldr	r3, [r1, #0]
 8001dbc:	6826      	ldr	r6, [r4, #0]
 8001dbe:	1d1d      	adds	r5, r3, #4
 8001dc0:	6960      	ldr	r0, [r4, #20]
 8001dc2:	600d      	str	r5, [r1, #0]
 8001dc4:	0635      	lsls	r5, r6, #24
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	d501      	bpl.n	8001dce <_printf_i+0x1ce>
 8001dca:	6018      	str	r0, [r3, #0]
 8001dcc:	e002      	b.n	8001dd4 <_printf_i+0x1d4>
 8001dce:	0671      	lsls	r1, r6, #25
 8001dd0:	d5fb      	bpl.n	8001dca <_printf_i+0x1ca>
 8001dd2:	8018      	strh	r0, [r3, #0]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	4616      	mov	r6, r2
 8001dd8:	6123      	str	r3, [r4, #16]
 8001dda:	e7ba      	b.n	8001d52 <_printf_i+0x152>
 8001ddc:	680b      	ldr	r3, [r1, #0]
 8001dde:	1d1a      	adds	r2, r3, #4
 8001de0:	600a      	str	r2, [r1, #0]
 8001de2:	681e      	ldr	r6, [r3, #0]
 8001de4:	2100      	movs	r1, #0
 8001de6:	4630      	mov	r0, r6
 8001de8:	6862      	ldr	r2, [r4, #4]
 8001dea:	f000 f82f 	bl	8001e4c <memchr>
 8001dee:	b108      	cbz	r0, 8001df4 <_printf_i+0x1f4>
 8001df0:	1b80      	subs	r0, r0, r6
 8001df2:	6060      	str	r0, [r4, #4]
 8001df4:	6863      	ldr	r3, [r4, #4]
 8001df6:	6123      	str	r3, [r4, #16]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dfe:	e7a8      	b.n	8001d52 <_printf_i+0x152>
 8001e00:	4632      	mov	r2, r6
 8001e02:	4649      	mov	r1, r9
 8001e04:	4640      	mov	r0, r8
 8001e06:	6923      	ldr	r3, [r4, #16]
 8001e08:	47d0      	blx	sl
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	d0ab      	beq.n	8001d66 <_printf_i+0x166>
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	079b      	lsls	r3, r3, #30
 8001e12:	d413      	bmi.n	8001e3c <_printf_i+0x23c>
 8001e14:	68e0      	ldr	r0, [r4, #12]
 8001e16:	9b03      	ldr	r3, [sp, #12]
 8001e18:	4298      	cmp	r0, r3
 8001e1a:	bfb8      	it	lt
 8001e1c:	4618      	movlt	r0, r3
 8001e1e:	e7a4      	b.n	8001d6a <_printf_i+0x16a>
 8001e20:	2301      	movs	r3, #1
 8001e22:	4632      	mov	r2, r6
 8001e24:	4649      	mov	r1, r9
 8001e26:	4640      	mov	r0, r8
 8001e28:	47d0      	blx	sl
 8001e2a:	3001      	adds	r0, #1
 8001e2c:	d09b      	beq.n	8001d66 <_printf_i+0x166>
 8001e2e:	3501      	adds	r5, #1
 8001e30:	68e3      	ldr	r3, [r4, #12]
 8001e32:	9903      	ldr	r1, [sp, #12]
 8001e34:	1a5b      	subs	r3, r3, r1
 8001e36:	42ab      	cmp	r3, r5
 8001e38:	dcf2      	bgt.n	8001e20 <_printf_i+0x220>
 8001e3a:	e7eb      	b.n	8001e14 <_printf_i+0x214>
 8001e3c:	2500      	movs	r5, #0
 8001e3e:	f104 0619 	add.w	r6, r4, #25
 8001e42:	e7f5      	b.n	8001e30 <_printf_i+0x230>
 8001e44:	08002109 	.word	0x08002109
 8001e48:	0800211a 	.word	0x0800211a

08001e4c <memchr>:
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b510      	push	{r4, lr}
 8001e50:	b2c9      	uxtb	r1, r1
 8001e52:	4402      	add	r2, r0
 8001e54:	4293      	cmp	r3, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	d101      	bne.n	8001e5e <memchr+0x12>
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	e003      	b.n	8001e66 <memchr+0x1a>
 8001e5e:	7804      	ldrb	r4, [r0, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	428c      	cmp	r4, r1
 8001e64:	d1f6      	bne.n	8001e54 <memchr+0x8>
 8001e66:	bd10      	pop	{r4, pc}

08001e68 <memmove>:
 8001e68:	4288      	cmp	r0, r1
 8001e6a:	b510      	push	{r4, lr}
 8001e6c:	eb01 0402 	add.w	r4, r1, r2
 8001e70:	d902      	bls.n	8001e78 <memmove+0x10>
 8001e72:	4284      	cmp	r4, r0
 8001e74:	4623      	mov	r3, r4
 8001e76:	d807      	bhi.n	8001e88 <memmove+0x20>
 8001e78:	1e43      	subs	r3, r0, #1
 8001e7a:	42a1      	cmp	r1, r4
 8001e7c:	d008      	beq.n	8001e90 <memmove+0x28>
 8001e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e86:	e7f8      	b.n	8001e7a <memmove+0x12>
 8001e88:	4601      	mov	r1, r0
 8001e8a:	4402      	add	r2, r0
 8001e8c:	428a      	cmp	r2, r1
 8001e8e:	d100      	bne.n	8001e92 <memmove+0x2a>
 8001e90:	bd10      	pop	{r4, pc}
 8001e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e9a:	e7f7      	b.n	8001e8c <memmove+0x24>

08001e9c <_free_r>:
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	d043      	beq.n	8001f2c <_free_r+0x90>
 8001ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ea8:	1f0c      	subs	r4, r1, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bfb8      	it	lt
 8001eae:	18e4      	addlt	r4, r4, r3
 8001eb0:	f000 f8d0 	bl	8002054 <__malloc_lock>
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <_free_r+0x94>)
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	4610      	mov	r0, r2
 8001eba:	b933      	cbnz	r3, 8001eca <_free_r+0x2e>
 8001ebc:	6063      	str	r3, [r4, #4]
 8001ebe:	6014      	str	r4, [r2, #0]
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ec6:	f000 b8cb 	b.w	8002060 <__malloc_unlock>
 8001eca:	42a3      	cmp	r3, r4
 8001ecc:	d90a      	bls.n	8001ee4 <_free_r+0x48>
 8001ece:	6821      	ldr	r1, [r4, #0]
 8001ed0:	1862      	adds	r2, r4, r1
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	bf01      	itttt	eq
 8001ed6:	681a      	ldreq	r2, [r3, #0]
 8001ed8:	685b      	ldreq	r3, [r3, #4]
 8001eda:	1852      	addeq	r2, r2, r1
 8001edc:	6022      	streq	r2, [r4, #0]
 8001ede:	6063      	str	r3, [r4, #4]
 8001ee0:	6004      	str	r4, [r0, #0]
 8001ee2:	e7ed      	b.n	8001ec0 <_free_r+0x24>
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	b10b      	cbz	r3, 8001eee <_free_r+0x52>
 8001eea:	42a3      	cmp	r3, r4
 8001eec:	d9fa      	bls.n	8001ee4 <_free_r+0x48>
 8001eee:	6811      	ldr	r1, [r2, #0]
 8001ef0:	1850      	adds	r0, r2, r1
 8001ef2:	42a0      	cmp	r0, r4
 8001ef4:	d10b      	bne.n	8001f0e <_free_r+0x72>
 8001ef6:	6820      	ldr	r0, [r4, #0]
 8001ef8:	4401      	add	r1, r0
 8001efa:	1850      	adds	r0, r2, r1
 8001efc:	4283      	cmp	r3, r0
 8001efe:	6011      	str	r1, [r2, #0]
 8001f00:	d1de      	bne.n	8001ec0 <_free_r+0x24>
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4401      	add	r1, r0
 8001f08:	6011      	str	r1, [r2, #0]
 8001f0a:	6053      	str	r3, [r2, #4]
 8001f0c:	e7d8      	b.n	8001ec0 <_free_r+0x24>
 8001f0e:	d902      	bls.n	8001f16 <_free_r+0x7a>
 8001f10:	230c      	movs	r3, #12
 8001f12:	602b      	str	r3, [r5, #0]
 8001f14:	e7d4      	b.n	8001ec0 <_free_r+0x24>
 8001f16:	6820      	ldr	r0, [r4, #0]
 8001f18:	1821      	adds	r1, r4, r0
 8001f1a:	428b      	cmp	r3, r1
 8001f1c:	bf01      	itttt	eq
 8001f1e:	6819      	ldreq	r1, [r3, #0]
 8001f20:	685b      	ldreq	r3, [r3, #4]
 8001f22:	1809      	addeq	r1, r1, r0
 8001f24:	6021      	streq	r1, [r4, #0]
 8001f26:	6063      	str	r3, [r4, #4]
 8001f28:	6054      	str	r4, [r2, #4]
 8001f2a:	e7c9      	b.n	8001ec0 <_free_r+0x24>
 8001f2c:	bd38      	pop	{r3, r4, r5, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000088 	.word	0x20000088

08001f34 <_malloc_r>:
 8001f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f36:	1ccd      	adds	r5, r1, #3
 8001f38:	f025 0503 	bic.w	r5, r5, #3
 8001f3c:	3508      	adds	r5, #8
 8001f3e:	2d0c      	cmp	r5, #12
 8001f40:	bf38      	it	cc
 8001f42:	250c      	movcc	r5, #12
 8001f44:	2d00      	cmp	r5, #0
 8001f46:	4606      	mov	r6, r0
 8001f48:	db01      	blt.n	8001f4e <_malloc_r+0x1a>
 8001f4a:	42a9      	cmp	r1, r5
 8001f4c:	d903      	bls.n	8001f56 <_malloc_r+0x22>
 8001f4e:	230c      	movs	r3, #12
 8001f50:	6033      	str	r3, [r6, #0]
 8001f52:	2000      	movs	r0, #0
 8001f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f56:	f000 f87d 	bl	8002054 <__malloc_lock>
 8001f5a:	4921      	ldr	r1, [pc, #132]	; (8001fe0 <_malloc_r+0xac>)
 8001f5c:	680a      	ldr	r2, [r1, #0]
 8001f5e:	4614      	mov	r4, r2
 8001f60:	b99c      	cbnz	r4, 8001f8a <_malloc_r+0x56>
 8001f62:	4f20      	ldr	r7, [pc, #128]	; (8001fe4 <_malloc_r+0xb0>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b923      	cbnz	r3, 8001f72 <_malloc_r+0x3e>
 8001f68:	4621      	mov	r1, r4
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f000 f862 	bl	8002034 <_sbrk_r>
 8001f70:	6038      	str	r0, [r7, #0]
 8001f72:	4629      	mov	r1, r5
 8001f74:	4630      	mov	r0, r6
 8001f76:	f000 f85d 	bl	8002034 <_sbrk_r>
 8001f7a:	1c43      	adds	r3, r0, #1
 8001f7c:	d123      	bne.n	8001fc6 <_malloc_r+0x92>
 8001f7e:	230c      	movs	r3, #12
 8001f80:	4630      	mov	r0, r6
 8001f82:	6033      	str	r3, [r6, #0]
 8001f84:	f000 f86c 	bl	8002060 <__malloc_unlock>
 8001f88:	e7e3      	b.n	8001f52 <_malloc_r+0x1e>
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	1b5b      	subs	r3, r3, r5
 8001f8e:	d417      	bmi.n	8001fc0 <_malloc_r+0x8c>
 8001f90:	2b0b      	cmp	r3, #11
 8001f92:	d903      	bls.n	8001f9c <_malloc_r+0x68>
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	441c      	add	r4, r3
 8001f98:	6025      	str	r5, [r4, #0]
 8001f9a:	e004      	b.n	8001fa6 <_malloc_r+0x72>
 8001f9c:	6863      	ldr	r3, [r4, #4]
 8001f9e:	42a2      	cmp	r2, r4
 8001fa0:	bf0c      	ite	eq
 8001fa2:	600b      	streq	r3, [r1, #0]
 8001fa4:	6053      	strne	r3, [r2, #4]
 8001fa6:	4630      	mov	r0, r6
 8001fa8:	f000 f85a 	bl	8002060 <__malloc_unlock>
 8001fac:	f104 000b 	add.w	r0, r4, #11
 8001fb0:	1d23      	adds	r3, r4, #4
 8001fb2:	f020 0007 	bic.w	r0, r0, #7
 8001fb6:	1ac2      	subs	r2, r0, r3
 8001fb8:	d0cc      	beq.n	8001f54 <_malloc_r+0x20>
 8001fba:	1a1b      	subs	r3, r3, r0
 8001fbc:	50a3      	str	r3, [r4, r2]
 8001fbe:	e7c9      	b.n	8001f54 <_malloc_r+0x20>
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	6864      	ldr	r4, [r4, #4]
 8001fc4:	e7cc      	b.n	8001f60 <_malloc_r+0x2c>
 8001fc6:	1cc4      	adds	r4, r0, #3
 8001fc8:	f024 0403 	bic.w	r4, r4, #3
 8001fcc:	42a0      	cmp	r0, r4
 8001fce:	d0e3      	beq.n	8001f98 <_malloc_r+0x64>
 8001fd0:	1a21      	subs	r1, r4, r0
 8001fd2:	4630      	mov	r0, r6
 8001fd4:	f000 f82e 	bl	8002034 <_sbrk_r>
 8001fd8:	3001      	adds	r0, #1
 8001fda:	d1dd      	bne.n	8001f98 <_malloc_r+0x64>
 8001fdc:	e7cf      	b.n	8001f7e <_malloc_r+0x4a>
 8001fde:	bf00      	nop
 8001fe0:	20000088 	.word	0x20000088
 8001fe4:	2000008c 	.word	0x2000008c

08001fe8 <_realloc_r>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	4607      	mov	r7, r0
 8001fec:	4614      	mov	r4, r2
 8001fee:	460e      	mov	r6, r1
 8001ff0:	b921      	cbnz	r1, 8001ffc <_realloc_r+0x14>
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ff8:	f7ff bf9c 	b.w	8001f34 <_malloc_r>
 8001ffc:	b922      	cbnz	r2, 8002008 <_realloc_r+0x20>
 8001ffe:	f7ff ff4d 	bl	8001e9c <_free_r>
 8002002:	4625      	mov	r5, r4
 8002004:	4628      	mov	r0, r5
 8002006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002008:	f000 f830 	bl	800206c <_malloc_usable_size_r>
 800200c:	42a0      	cmp	r0, r4
 800200e:	d20f      	bcs.n	8002030 <_realloc_r+0x48>
 8002010:	4621      	mov	r1, r4
 8002012:	4638      	mov	r0, r7
 8002014:	f7ff ff8e 	bl	8001f34 <_malloc_r>
 8002018:	4605      	mov	r5, r0
 800201a:	2800      	cmp	r0, #0
 800201c:	d0f2      	beq.n	8002004 <_realloc_r+0x1c>
 800201e:	4631      	mov	r1, r6
 8002020:	4622      	mov	r2, r4
 8002022:	f7ff fbf3 	bl	800180c <memcpy>
 8002026:	4631      	mov	r1, r6
 8002028:	4638      	mov	r0, r7
 800202a:	f7ff ff37 	bl	8001e9c <_free_r>
 800202e:	e7e9      	b.n	8002004 <_realloc_r+0x1c>
 8002030:	4635      	mov	r5, r6
 8002032:	e7e7      	b.n	8002004 <_realloc_r+0x1c>

08002034 <_sbrk_r>:
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	2300      	movs	r3, #0
 8002038:	4d05      	ldr	r5, [pc, #20]	; (8002050 <_sbrk_r+0x1c>)
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	602b      	str	r3, [r5, #0]
 8002040:	f7ff fae2 	bl	8001608 <_sbrk>
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	d102      	bne.n	800204e <_sbrk_r+0x1a>
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	b103      	cbz	r3, 800204e <_sbrk_r+0x1a>
 800204c:	6023      	str	r3, [r4, #0]
 800204e:	bd38      	pop	{r3, r4, r5, pc}
 8002050:	2000067c 	.word	0x2000067c

08002054 <__malloc_lock>:
 8002054:	4801      	ldr	r0, [pc, #4]	; (800205c <__malloc_lock+0x8>)
 8002056:	f000 b811 	b.w	800207c <__retarget_lock_acquire_recursive>
 800205a:	bf00      	nop
 800205c:	20000684 	.word	0x20000684

08002060 <__malloc_unlock>:
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <__malloc_unlock+0x8>)
 8002062:	f000 b80c 	b.w	800207e <__retarget_lock_release_recursive>
 8002066:	bf00      	nop
 8002068:	20000684 	.word	0x20000684

0800206c <_malloc_usable_size_r>:
 800206c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002070:	1f18      	subs	r0, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	bfbc      	itt	lt
 8002076:	580b      	ldrlt	r3, [r1, r0]
 8002078:	18c0      	addlt	r0, r0, r3
 800207a:	4770      	bx	lr

0800207c <__retarget_lock_acquire_recursive>:
 800207c:	4770      	bx	lr

0800207e <__retarget_lock_release_recursive>:
 800207e:	4770      	bx	lr

08002080 <_init>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	bf00      	nop
 8002084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002086:	bc08      	pop	{r3}
 8002088:	469e      	mov	lr, r3
 800208a:	4770      	bx	lr

0800208c <_fini>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr
