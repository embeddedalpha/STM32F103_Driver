
CAN_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d58  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ea0  08000ea0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000ea0  08000ea0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ea0  08000ea0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ea0  08000ea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ea4  08000ea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000004  08000eac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08000eac  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003cee  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b2b  00000000  00000000  00023d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00024848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00024980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011de5  00000000  00000000  00024a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029cf  00000000  00000000  00036845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a6b2  00000000  00000000  00039214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000938c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000384  00000000  00000000  0009391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e70 	.word	0x08000e70

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000e70 	.word	0x08000e70

08000170 <CAN_Init>:
 * @operation		:	Configures the CAN controller as per the CAN_Config struct.
 *                      Take a look at the examples and the CAN_Config structure for
 *                      more information
 */
void CAN_Init(CAN_Config mailbox)
{
 8000170:	b084      	sub	sp, #16
 8000172:	b580      	push	{r7, lr}
 8000174:	af00      	add	r7, sp, #0
 8000176:	f107 0c08 	add.w	ip, r7, #8
 800017a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    RCC -> APB1ENR &= ~RCC_APB1ENR_CAN1EN;
 800017e:	4b82      	ldr	r3, [pc, #520]	; (8000388 <CAN_Init+0x218>)
 8000180:	69db      	ldr	r3, [r3, #28]
 8000182:	4a81      	ldr	r2, [pc, #516]	; (8000388 <CAN_Init+0x218>)
 8000184:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000188:	61d3      	str	r3, [r2, #28]
	GPIO_Pin_Setup(GPIOA, 12, ALT_PUSH_PULL_OUTPUT);
 800018a:	220b      	movs	r2, #11
 800018c:	210c      	movs	r1, #12
 800018e:	487f      	ldr	r0, [pc, #508]	; (800038c <CAN_Init+0x21c>)
 8000190:	f000 fb3c 	bl	800080c <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 11, FLOATING_INPUT);
 8000194:	2204      	movs	r2, #4
 8000196:	210b      	movs	r1, #11
 8000198:	487c      	ldr	r0, [pc, #496]	; (800038c <CAN_Init+0x21c>)
 800019a:	f000 fb37 	bl	800080c <GPIO_Pin_Setup>

    RCC -> APB1ENR |= RCC_APB1ENR_CAN1EN;
 800019e:	4b7a      	ldr	r3, [pc, #488]	; (8000388 <CAN_Init+0x218>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	4a79      	ldr	r2, [pc, #484]	; (8000388 <CAN_Init+0x218>)
 80001a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001a8:	61d3      	str	r3, [r2, #28]
	CAN1 -> MCR |= CAN_MCR_DBF | CAN_MCR_RESET | CAN_MCR_SLEEP;
 80001aa:	4b79      	ldr	r3, [pc, #484]	; (8000390 <CAN_Init+0x220>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a78      	ldr	r2, [pc, #480]	; (8000390 <CAN_Init+0x220>)
 80001b0:	f443 33c0 	orr.w	r3, r3, #98304	; 0x18000
 80001b4:	f043 0302 	orr.w	r3, r3, #2
 80001b8:	6013      	str	r3, [r2, #0]
	while(!(CAN1 -> MSR & CAN_MSR_SLAK)){}
 80001ba:	bf00      	nop
 80001bc:	4b74      	ldr	r3, [pc, #464]	; (8000390 <CAN_Init+0x220>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	f003 0302 	and.w	r3, r3, #2
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0f9      	beq.n	80001bc <CAN_Init+0x4c>
    CAN1 -> MCR &= ~CAN_MCR_SLEEP;
 80001c8:	4b71      	ldr	r3, [pc, #452]	; (8000390 <CAN_Init+0x220>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a70      	ldr	r2, [pc, #448]	; (8000390 <CAN_Init+0x220>)
 80001ce:	f023 0302 	bic.w	r3, r3, #2
 80001d2:	6013      	str	r3, [r2, #0]
	CAN1 -> MCR |= CAN_MCR_INRQ;
 80001d4:	4b6e      	ldr	r3, [pc, #440]	; (8000390 <CAN_Init+0x220>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a6d      	ldr	r2, [pc, #436]	; (8000390 <CAN_Init+0x220>)
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	6013      	str	r3, [r2, #0]
	while((CAN1 -> MSR & CAN_MSR_SLAK)){}
 80001e0:	bf00      	nop
 80001e2:	4b6b      	ldr	r3, [pc, #428]	; (8000390 <CAN_Init+0x220>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	f003 0302 	and.w	r3, r3, #2
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d1f9      	bne.n	80001e2 <CAN_Init+0x72>
	while(!(CAN1-> MSR & CAN_MSR_INAK)){}
 80001ee:	bf00      	nop
 80001f0:	4b67      	ldr	r3, [pc, #412]	; (8000390 <CAN_Init+0x220>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	f003 0301 	and.w	r3, r3, #1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d0f9      	beq.n	80001f0 <CAN_Init+0x80>
	CAN1 -> BTR = mailbox.baudrate;
 80001fc:	68ba      	ldr	r2, [r7, #8]
 80001fe:	4b64      	ldr	r3, [pc, #400]	; (8000390 <CAN_Init+0x220>)
 8000200:	61da      	str	r2, [r3, #28]
	CAN1->BTR |= CAN_BTR_LBKM;  //SET LBKM BIT
 8000202:	4b63      	ldr	r3, [pc, #396]	; (8000390 <CAN_Init+0x220>)
 8000204:	69db      	ldr	r3, [r3, #28]
 8000206:	4a62      	ldr	r2, [pc, #392]	; (8000390 <CAN_Init+0x220>)
 8000208:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800020c:	61d3      	str	r3, [r2, #28]

	CAN1 -> FMR |= CAN_FMR_FINIT;
 800020e:	4b60      	ldr	r3, [pc, #384]	; (8000390 <CAN_Init+0x220>)
 8000210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000214:	4a5e      	ldr	r2, [pc, #376]	; (8000390 <CAN_Init+0x220>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 -> FMR &= 0xFFFFC0FF;
 800021e:	4b5c      	ldr	r3, [pc, #368]	; (8000390 <CAN_Init+0x220>)
 8000220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000224:	4a5a      	ldr	r2, [pc, #360]	; (8000390 <CAN_Init+0x220>)
 8000226:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800022a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 -> FMR |= 0x1C << 8;
 800022e:	4b58      	ldr	r3, [pc, #352]	; (8000390 <CAN_Init+0x220>)
 8000230:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000234:	4a56      	ldr	r2, [pc, #344]	; (8000390 <CAN_Init+0x220>)
 8000236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800023a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	//Deactivate Filter:
	CAN1 -> FA1R &= ~(1 << mailbox.filter_index);
 800023e:	4b54      	ldr	r3, [pc, #336]	; (8000390 <CAN_Init+0x220>)
 8000240:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000244:	693a      	ldr	r2, [r7, #16]
 8000246:	2101      	movs	r1, #1
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	43d2      	mvns	r2, r2
 800024e:	4611      	mov	r1, r2
 8000250:	4a4f      	ldr	r2, [pc, #316]	; (8000390 <CAN_Init+0x220>)
 8000252:	400b      	ands	r3, r1
 8000254:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	//Set Filter Scale
	if(mailbox.filter_scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << mailbox.filter_index);
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d10c      	bne.n	8000278 <CAN_Init+0x108>
 800025e:	4b4c      	ldr	r3, [pc, #304]	; (8000390 <CAN_Init+0x220>)
 8000260:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000264:	693a      	ldr	r2, [r7, #16]
 8000266:	2101      	movs	r1, #1
 8000268:	fa01 f202 	lsl.w	r2, r1, r2
 800026c:	43d2      	mvns	r2, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a47      	ldr	r2, [pc, #284]	; (8000390 <CAN_Init+0x220>)
 8000272:	400b      	ands	r3, r1
 8000274:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	if(mailbox.filter_scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << mailbox.filter_index);
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d10b      	bne.n	8000296 <CAN_Init+0x126>
 800027e:	4b44      	ldr	r3, [pc, #272]	; (8000390 <CAN_Init+0x220>)
 8000280:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000284:	693a      	ldr	r2, [r7, #16]
 8000286:	2101      	movs	r1, #1
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a40      	ldr	r2, [pc, #256]	; (8000390 <CAN_Init+0x220>)
 8000290:	430b      	orrs	r3, r1
 8000292:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	//Set Filter Type
	if(mailbox.filter_type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << mailbox.filter_index);
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	2b0a      	cmp	r3, #10
 800029a:	d10b      	bne.n	80002b4 <CAN_Init+0x144>
 800029c:	4b3c      	ldr	r3, [pc, #240]	; (8000390 <CAN_Init+0x220>)
 800029e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	2101      	movs	r1, #1
 80002a6:	fa01 f202 	lsl.w	r2, r1, r2
 80002aa:	4611      	mov	r1, r2
 80002ac:	4a38      	ldr	r2, [pc, #224]	; (8000390 <CAN_Init+0x220>)
 80002ae:	430b      	orrs	r3, r1
 80002b0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	if(mailbox.filter_type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << mailbox.filter_index);
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d10c      	bne.n	80002d4 <CAN_Init+0x164>
 80002ba:	4b35      	ldr	r3, [pc, #212]	; (8000390 <CAN_Init+0x220>)
 80002bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80002c0:	693a      	ldr	r2, [r7, #16]
 80002c2:	2101      	movs	r1, #1
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	43d2      	mvns	r2, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a30      	ldr	r2, [pc, #192]	; (8000390 <CAN_Init+0x220>)
 80002ce:	400b      	ands	r3, r1
 80002d0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	//Set FIFO for Filter Bank
	if(mailbox.filter_type == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << mailbox.filter_index);
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d10b      	bne.n	80002f2 <CAN_Init+0x182>
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <CAN_Init+0x220>)
 80002dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80002e0:	693a      	ldr	r2, [r7, #16]
 80002e2:	2101      	movs	r1, #1
 80002e4:	fa01 f202 	lsl.w	r2, r1, r2
 80002e8:	4611      	mov	r1, r2
 80002ea:	4a29      	ldr	r2, [pc, #164]	; (8000390 <CAN_Init+0x220>)
 80002ec:	430b      	orrs	r3, r1
 80002ee:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	if(mailbox.filter_type == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << mailbox.filter_index);
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d10c      	bne.n	8000312 <CAN_Init+0x1a2>
 80002f8:	4b25      	ldr	r3, [pc, #148]	; (8000390 <CAN_Init+0x220>)
 80002fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	43d2      	mvns	r2, r2
 8000308:	4611      	mov	r1, r2
 800030a:	4a21      	ldr	r2, [pc, #132]	; (8000390 <CAN_Init+0x220>)
 800030c:	400b      	ands	r3, r1
 800030e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	//Set FIFO Bank
	CAN1 -> sFilterRegister[mailbox.filter_index].FR1 = mailbox.filter_bank1;
 8000312:	491f      	ldr	r1, [pc, #124]	; (8000390 <CAN_Init+0x220>)
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	6a3a      	ldr	r2, [r7, #32]
 8000318:	3348      	adds	r3, #72	; 0x48
 800031a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	CAN1 -> sFilterRegister[mailbox.filter_index].FR2 = mailbox.filter_bank2;
 800031e:	491c      	ldr	r1, [pc, #112]	; (8000390 <CAN_Init+0x220>)
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000324:	3348      	adds	r3, #72	; 0x48
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	440b      	add	r3, r1
 800032a:	605a      	str	r2, [r3, #4]
	CAN1 -> FA1R |= 1 << mailbox.filter_index;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <CAN_Init+0x220>)
 800032e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000332:	693a      	ldr	r2, [r7, #16]
 8000334:	2101      	movs	r1, #1
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	4611      	mov	r1, r2
 800033c:	4a14      	ldr	r2, [pc, #80]	; (8000390 <CAN_Init+0x220>)
 800033e:	430b      	orrs	r3, r1
 8000340:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	CAN1 -> FMR &= ~CAN_FMR_FINIT;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <CAN_Init+0x220>)
 8000346:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800034a:	4a11      	ldr	r2, [pc, #68]	; (8000390 <CAN_Init+0x220>)
 800034c:	f023 0301 	bic.w	r3, r3, #1
 8000350:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
     CAN1->MCR &= ~CAN_MCR_INRQ;
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <CAN_Init+0x220>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <CAN_Init+0x220>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
    CAN1->MCR &= ~CAN_MCR_INRQ;
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <CAN_Init+0x220>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <CAN_Init+0x220>)
 8000366:	f023 0301 	bic.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]
    while((CAN1->MSR & CAN_MSR_INAK));
 800036c:	bf00      	nop
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <CAN_Init+0x220>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1f9      	bne.n	800036e <CAN_Init+0x1fe>
}
 800037a:	bf00      	nop
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000384:	b004      	add	sp, #16
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000
 800038c:	40010800 	.word	0x40010800
 8000390:	40006400 	.word	0x40006400

08000394 <CAN_Send_Payload>:
 * @input param		:	mailbox_id
 * @output param	:	temp
 * @operation		:	Transmits the data in the mailbox
 */
int CAN_Send_Payload(CAN_Config mailbox)
{
 8000394:	b084      	sub	sp, #16
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	f107 0c10 	add.w	ip, r7, #16
 80003a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int mailbox_id;
//	int time_out = 0;
//******************************** Check empty mailbox ******************************
//====================================================================================
	if((CAN1 -> TSR & CAN_TSR_TME_Msk) == CAN_TSR_TME)
 80003a4:	4baa      	ldr	r3, [pc, #680]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f003 53e0 	and.w	r3, r3, #469762048	; 0x1c000000
 80003ac:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 80003b0:	d101      	bne.n	80003b6 <CAN_Send_Payload+0x22>
	{
		mailbox_id = CAN_TX_Mailbox_0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]
	}
//====================================================================================
	if( ((CAN1 -> TSR & CAN_TSR_TME_Msk) == CAN_TSR_TME0) &&
 80003b6:	4ba6      	ldr	r3, [pc, #664]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	f003 53e0 	and.w	r3, r3, #469762048	; 0x1c000000
 80003be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80003c2:	d11b      	bne.n	80003fc <CAN_Send_Payload+0x68>
		((CAN1 -> TSR & CAN_TSR_RQCP2_Msk) == CAN_TSR_RQCP2) &&
 80003c4:	4ba2      	ldr	r3, [pc, #648]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	if( ((CAN1 -> TSR & CAN_TSR_TME_Msk) == CAN_TSR_TME0) &&
 80003cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003d0:	d114      	bne.n	80003fc <CAN_Send_Payload+0x68>
		((CAN1 -> TSR & CAN_TSR_TXOK2_Msk) == CAN_TSR_TXOK2)
 80003d2:	4b9f      	ldr	r3, [pc, #636]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
		((CAN1 -> TSR & CAN_TSR_RQCP2_Msk) == CAN_TSR_RQCP2) &&
 80003da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80003de:	d10d      	bne.n	80003fc <CAN_Send_Payload+0x68>
	  )
	{
		CAN1->TSR |= CAN_TSR_RQCP2;
 80003e0:	4b9b      	ldr	r3, [pc, #620]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	4a9a      	ldr	r2, [pc, #616]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003ea:	6093      	str	r3, [r2, #8]
		CAN1->TSR |= CAN_TSR_TXOK2;
 80003ec:	4b98      	ldr	r3, [pc, #608]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a97      	ldr	r2, [pc, #604]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f6:	6093      	str	r3, [r2, #8]
		mailbox_id = CAN_TX_Mailbox_0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	607b      	str	r3, [r7, #4]
//		CAN1->TSR |= CAN_TSR_RQCP2;
//		CAN1->TSR |= CAN_TSR_TXOK2;
//		mailbox_id = CAN_TX_Mailbox_0;
//	}
//====================================================================================
	if( ((CAN1 -> TSR & CAN_TSR_TME_Msk) == CAN_TSR_TME1) &&
 80003fc:	4b94      	ldr	r3, [pc, #592]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	f003 53e0 	and.w	r3, r3, #469762048	; 0x1c000000
 8000404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000408:	d119      	bne.n	800043e <CAN_Send_Payload+0xaa>
		((CAN1 -> TSR & CAN_TSR_RQCP0_Msk) == CAN_TSR_RQCP0) &&
 800040a:	4b91      	ldr	r3, [pc, #580]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	f003 0301 	and.w	r3, r3, #1
	if( ((CAN1 -> TSR & CAN_TSR_TME_Msk) == CAN_TSR_TME1) &&
 8000412:	2b01      	cmp	r3, #1
 8000414:	d113      	bne.n	800043e <CAN_Send_Payload+0xaa>
		((CAN1 -> TSR & CAN_TSR_TXOK0_Msk) == CAN_TSR_TXOK0)
 8000416:	4b8e      	ldr	r3, [pc, #568]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	f003 0302 	and.w	r3, r3, #2
		((CAN1 -> TSR & CAN_TSR_RQCP0_Msk) == CAN_TSR_RQCP0) &&
 800041e:	2b02      	cmp	r3, #2
 8000420:	d10d      	bne.n	800043e <CAN_Send_Payload+0xaa>
	  )
	{
		CAN1->TSR |= CAN_TSR_RQCP0;
 8000422:	4b8b      	ldr	r3, [pc, #556]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	4a8a      	ldr	r2, [pc, #552]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6093      	str	r3, [r2, #8]
		CAN1->TSR |= CAN_TSR_TXOK0;
 800042e:	4b88      	ldr	r3, [pc, #544]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	4a87      	ldr	r2, [pc, #540]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	6093      	str	r3, [r2, #8]
		mailbox_id = CAN_TX_Mailbox_1;
 800043a:	23aa      	movs	r3, #170	; 0xaa
 800043c:	607b      	str	r3, [r7, #4]
//		CAN1->TSR |= CAN_TSR_RQCP2;
//		CAN1->TSR |= CAN_TSR_TXOK2;
//		mailbox_id = CAN_TX_Mailbox_1;
//	}
//====================================================================================
	if( ((CAN1 -> TSR & CAN_TSR_TME_Msk) == CAN_TSR_TME2) &&
 800043e:	4b84      	ldr	r3, [pc, #528]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	f003 53e0 	and.w	r3, r3, #469762048	; 0x1c000000
 8000446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800044a:	d11b      	bne.n	8000484 <CAN_Send_Payload+0xf0>
		((CAN1 -> TSR & CAN_TSR_RQCP1_Msk) == CAN_TSR_RQCP1) &&
 800044c:	4b80      	ldr	r3, [pc, #512]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	f403 7380 	and.w	r3, r3, #256	; 0x100
	if( ((CAN1 -> TSR & CAN_TSR_TME_Msk) == CAN_TSR_TME2) &&
 8000454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000458:	d114      	bne.n	8000484 <CAN_Send_Payload+0xf0>
		((CAN1 -> TSR & CAN_TSR_TXOK1_Msk) == CAN_TSR_TXOK1)
 800045a:	4b7d      	ldr	r3, [pc, #500]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f403 7300 	and.w	r3, r3, #512	; 0x200
		((CAN1 -> TSR & CAN_TSR_RQCP1_Msk) == CAN_TSR_RQCP1) &&
 8000462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000466:	d10d      	bne.n	8000484 <CAN_Send_Payload+0xf0>
	  )
	{
		CAN1->TSR |= CAN_TSR_TXOK1;
 8000468:	4b79      	ldr	r3, [pc, #484]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	4a78      	ldr	r2, [pc, #480]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800046e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000472:	6093      	str	r3, [r2, #8]
		CAN1->TSR |= CAN_TSR_RQCP1;
 8000474:	4b76      	ldr	r3, [pc, #472]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	4a75      	ldr	r2, [pc, #468]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800047a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047e:	6093      	str	r3, [r2, #8]
		mailbox_id = CAN_TX_Mailbox_2;
 8000480:	23ff      	movs	r3, #255	; 0xff
 8000482:	607b      	str	r3, [r7, #4]
//		CAN1->TSR |= CAN_TSR_RQCP2;
//		CAN1->TSR |= CAN_TSR_TXOK2;
//		mailbox_id = CAN_TX_Mailbox_2;
//	}
//====================================================================================
	if((CAN1 -> TSR & CAN_TSR_TME_Msk) != CAN_TSR_TME)
 8000484:	4b72      	ldr	r3, [pc, #456]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	f003 53e0 	and.w	r3, r3, #469762048	; 0x1c000000
 800048c:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8000490:	d002      	beq.n	8000498 <CAN_Send_Payload+0x104>
	{
		return -1;
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
 8000496:	e174      	b.n	8000782 <CAN_Send_Payload+0x3ee>
	}


//******************************** Clear mailboxes ******************************
		CAN1 -> sTxMailBox[mailbox_id].TIR  &= ~0xFFFFFFFF;
 8000498:	4a6d      	ldr	r2, [pc, #436]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3318      	adds	r3, #24
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	4413      	add	r3, r2
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a6a      	ldr	r2, [pc, #424]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3318      	adds	r3, #24
 80004aa:	011b      	lsls	r3, r3, #4
 80004ac:	4413      	add	r3, r2
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TDHR &= ~0xFFFFFFFF;
 80004b2:	4a67      	ldr	r2, [pc, #412]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	011b      	lsls	r3, r3, #4
 80004b8:	4413      	add	r3, r2
 80004ba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a63      	ldr	r2, [pc, #396]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	4413      	add	r3, r2
 80004c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TDLR &= ~0xFFFFFFFF;
 80004d0:	4a5f      	ldr	r2, [pc, #380]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	011b      	lsls	r3, r3, #4
 80004d6:	4413      	add	r3, r2
 80004d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a5c      	ldr	r2, [pc, #368]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	4413      	add	r3, r2
 80004e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TDTR &= ~0xFFFFFFFF;
 80004ee:	4a58      	ldr	r2, [pc, #352]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3318      	adds	r3, #24
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4413      	add	r3, r2
 80004f8:	3304      	adds	r3, #4
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a54      	ldr	r2, [pc, #336]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3318      	adds	r3, #24
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	4413      	add	r3, r2
 8000506:	3304      	adds	r3, #4
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
//******************************** Fill up the mailboxes ******************************

//================================	Fill-up ID Type	===============================
	switch (mailbox.TX_ID_Type)
 800050c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800050e:	2b00      	cmp	r3, #0
 8000510:	d002      	beq.n	8000518 <CAN_Send_Payload+0x184>
 8000512:	2b0a      	cmp	r3, #10
 8000514:	d018      	beq.n	8000548 <CAN_Send_Payload+0x1b4>
 8000516:	e02f      	b.n	8000578 <CAN_Send_Payload+0x1e4>
	{
		case CAN_ID_Standard:
		{
			CAN1 -> sTxMailBox[mailbox_id].TIR  = mailbox.TX_ID << 21;
 8000518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800051a:	055b      	lsls	r3, r3, #21
 800051c:	4a4c      	ldr	r2, [pc, #304]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3318      	adds	r3, #24
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	4413      	add	r3, r2
 8000528:	6019      	str	r1, [r3, #0]
			CAN1 -> sTxMailBox[mailbox_id].TIR  &= ~1 << 2;
 800052a:	4a49      	ldr	r2, [pc, #292]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3318      	adds	r3, #24
 8000530:	011b      	lsls	r3, r3, #4
 8000532:	4413      	add	r3, r2
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4946      	ldr	r1, [pc, #280]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000538:	f023 0207 	bic.w	r2, r3, #7
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3318      	adds	r3, #24
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	440b      	add	r3, r1
 8000544:	601a      	str	r2, [r3, #0]
#if _CAN_DEBUG_
			printConsole("Standard ID : %d\r\n",mailbox.TX_ID);
#endif
		}
			break;
 8000546:	e017      	b.n	8000578 <CAN_Send_Payload+0x1e4>
		case CAN_ID_Extended:
		{
			CAN1 -> sTxMailBox[mailbox_id].TIR  = mailbox.TX_ID << 3;
 8000548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800054a:	00db      	lsls	r3, r3, #3
 800054c:	4a40      	ldr	r2, [pc, #256]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800054e:	4619      	mov	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3318      	adds	r3, #24
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	4413      	add	r3, r2
 8000558:	6019      	str	r1, [r3, #0]
			CAN1 -> sTxMailBox[mailbox_id].TIR  |= 1 << 2;
 800055a:	4a3d      	ldr	r2, [pc, #244]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3318      	adds	r3, #24
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4413      	add	r3, r2
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	493a      	ldr	r1, [pc, #232]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000568:	f043 0204 	orr.w	r2, r3, #4
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3318      	adds	r3, #24
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	440b      	add	r3, r1
 8000574:	601a      	str	r2, [r3, #0]
#if _CAN_DEBUG_
			printConsole("Extended ID : %d\r\n",mailbox.TX_ID);
#endif
		}
			break;
 8000576:	bf00      	nop
	}

//================================ Fill-up Frame Type ===============================
	switch (mailbox.TX_Frame_Type)
 8000578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <CAN_Send_Payload+0x1f0>
 800057e:	2b0a      	cmp	r3, #10
 8000580:	d00f      	beq.n	80005a2 <CAN_Send_Payload+0x20e>
 8000582:	e01d      	b.n	80005c0 <CAN_Send_Payload+0x22c>
	{
		case CAN_Frame_Data:
		{
			CAN1 -> sTxMailBox[mailbox_id].TIR  &= ~(1 << 1);
 8000584:	4a32      	ldr	r2, [pc, #200]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3318      	adds	r3, #24
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	4413      	add	r3, r2
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	492f      	ldr	r1, [pc, #188]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000592:	f023 0202 	bic.w	r2, r3, #2
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3318      	adds	r3, #24
 800059a:	011b      	lsls	r3, r3, #4
 800059c:	440b      	add	r3, r1
 800059e:	601a      	str	r2, [r3, #0]
#if _CAN_DEBUG_
			printConsole("Frame Type : Data\r\n");
#endif
		}
			break;
 80005a0:	e00e      	b.n	80005c0 <CAN_Send_Payload+0x22c>
		case CAN_Frame_Remote:
		{
			CAN1 -> sTxMailBox[mailbox_id].TIR  |= (1 << 1);
 80005a2:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3318      	adds	r3, #24
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	4413      	add	r3, r2
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4928      	ldr	r1, [pc, #160]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80005b0:	f043 0202 	orr.w	r2, r3, #2
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3318      	adds	r3, #24
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	440b      	add	r3, r1
 80005bc:	601a      	str	r2, [r3, #0]
#if _CAN_DEBUG_
			printConsole("Frame Type : Remote\r\n");
#endif
		}
			break;
 80005be:	bf00      	nop
	}

//================================ Fill-up Actual Data ===============================
	if(mailbox.timestamp_enable == CAN_Timestamp_Enable)
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d146      	bne.n	8000654 <CAN_Send_Payload+0x2c0>
	{
		CAN1 -> sTxMailBox[mailbox_id].TDTR = mailbox.TX_data_length | (1 << 8);
 80005c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005cc:	4a20      	ldr	r2, [pc, #128]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80005ce:	4619      	mov	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3318      	adds	r3, #24
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	4413      	add	r3, r2
 80005d8:	3304      	adds	r3, #4
 80005da:	6019      	str	r1, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
 80005dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80005de:	061a      	lsls	r2, r3, #24
 80005e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005e2:	041b      	lsls	r3, r3, #16
 80005e4:	431a      	orrs	r2, r3
 80005e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005e8:	021b      	lsls	r3, r3, #8
 80005ea:	431a      	orrs	r2, r3
 80005ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005ee:	4313      	orrs	r3, r2
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <CAN_Send_Payload+0x2bc>)
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80005fe:	6019      	str	r1, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 ;
 8000600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000602:	061a      	lsls	r2, r3, #24
 8000604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000606:	041b      	lsls	r3, r3, #16
 8000608:	4313      	orrs	r3, r2
 800060a:	4a11      	ldr	r2, [pc, #68]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800060c:	4619      	mov	r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	4413      	add	r3, r2
 8000614:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000618:	6019      	str	r1, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TIR  |= (1 << 0);
 800061a:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3318      	adds	r3, #24
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	4413      	add	r3, r2
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	490a      	ldr	r1, [pc, #40]	; (8000650 <CAN_Send_Payload+0x2bc>)
 8000628:	f043 0201 	orr.w	r2, r3, #1
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3318      	adds	r3, #24
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	440b      	add	r3, r1
 8000634:	601a      	str	r2, [r3, #0]
		while(CAN1 -> sTxMailBox[mailbox_id].TIR & (1 << 0)){}
 8000636:	bf00      	nop
 8000638:	4a05      	ldr	r2, [pc, #20]	; (8000650 <CAN_Send_Payload+0x2bc>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3318      	adds	r3, #24
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	4413      	add	r3, r2
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1f5      	bne.n	8000638 <CAN_Send_Payload+0x2a4>
 800064c:	e04d      	b.n	80006ea <CAN_Send_Payload+0x356>
 800064e:	bf00      	nop
 8000650:	40006400 	.word	0x40006400
#endif

	}
	else
	{
		CAN1 -> sTxMailBox[mailbox_id].TDTR = mailbox.TX_data_length;
 8000654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000656:	4a4e      	ldr	r2, [pc, #312]	; (8000790 <CAN_Send_Payload+0x3fc>)
 8000658:	4619      	mov	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3318      	adds	r3, #24
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	4413      	add	r3, r2
 8000662:	3304      	adds	r3, #4
 8000664:	6019      	str	r1, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TDTR &= ~CAN_TDT0R_TGT;
 8000666:	4a4a      	ldr	r2, [pc, #296]	; (8000790 <CAN_Send_Payload+0x3fc>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3318      	adds	r3, #24
 800066c:	011b      	lsls	r3, r3, #4
 800066e:	4413      	add	r3, r2
 8000670:	3304      	adds	r3, #4
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4946      	ldr	r1, [pc, #280]	; (8000790 <CAN_Send_Payload+0x3fc>)
 8000676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3318      	adds	r3, #24
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	440b      	add	r3, r1
 8000682:	3304      	adds	r3, #4
 8000684:	601a      	str	r2, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
 8000686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000688:	061a      	lsls	r2, r3, #24
 800068a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800068c:	041b      	lsls	r3, r3, #16
 800068e:	431a      	orrs	r2, r3
 8000690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	431a      	orrs	r2, r3
 8000696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000698:	4313      	orrs	r3, r2
 800069a:	4a3d      	ldr	r2, [pc, #244]	; (8000790 <CAN_Send_Payload+0x3fc>)
 800069c:	4619      	mov	r1, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	4413      	add	r3, r2
 80006a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80006a8:	6019      	str	r1, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 | mailbox.TX_data[1] << 8 | mailbox.TX_data[0] << 0;
 80006aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006ac:	061a      	lsls	r2, r3, #24
 80006ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006b0:	041b      	lsls	r3, r3, #16
 80006b2:	431a      	orrs	r2, r3
 80006b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	431a      	orrs	r2, r3
 80006ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006bc:	4313      	orrs	r3, r2
 80006be:	4a34      	ldr	r2, [pc, #208]	; (8000790 <CAN_Send_Payload+0x3fc>)
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80006cc:	6019      	str	r1, [r3, #0]
		CAN1 -> sTxMailBox[mailbox_id].TIR  |= (1 << 0);
 80006ce:	4a30      	ldr	r2, [pc, #192]	; (8000790 <CAN_Send_Payload+0x3fc>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3318      	adds	r3, #24
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	492d      	ldr	r1, [pc, #180]	; (8000790 <CAN_Send_Payload+0x3fc>)
 80006dc:	f043 0201 	orr.w	r2, r3, #1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3318      	adds	r3, #24
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	440b      	add	r3, r1
 80006e8:	601a      	str	r2, [r3, #0]


//	while(time_out < 10000){ time_out++; }


	if(mailbox_id == CAN_TX_Mailbox_0 && (CAN1->TSR & CAN_TSR_TXOK0) && (CAN1->TSR & CAN_TSR_TME0) && (CAN1->TSR & CAN_TSR_RQCP0)){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d115      	bne.n	800071c <CAN_Send_Payload+0x388>
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <CAN_Send_Payload+0x3fc>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f003 0302 	and.w	r3, r3, #2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00f      	beq.n	800071c <CAN_Send_Payload+0x388>
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <CAN_Send_Payload+0x3fc>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000704:	2b00      	cmp	r3, #0
 8000706:	d009      	beq.n	800071c <CAN_Send_Payload+0x388>
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <CAN_Send_Payload+0x3fc>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d003      	beq.n	800071c <CAN_Send_Payload+0x388>
		return (mailbox_id = CAN_TX_Mailbox_0);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	e032      	b.n	8000782 <CAN_Send_Payload+0x3ee>
	}
	if(mailbox_id == CAN_TX_Mailbox_1 && (CAN1->TSR & CAN_TSR_TXOK1) && (CAN1->TSR & CAN_TSR_TME1) && (CAN1->TSR & CAN_TSR_RQCP1)){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2baa      	cmp	r3, #170	; 0xaa
 8000720:	d115      	bne.n	800074e <CAN_Send_Payload+0x3ba>
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <CAN_Send_Payload+0x3fc>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00f      	beq.n	800074e <CAN_Send_Payload+0x3ba>
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <CAN_Send_Payload+0x3fc>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000736:	2b00      	cmp	r3, #0
 8000738:	d009      	beq.n	800074e <CAN_Send_Payload+0x3ba>
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <CAN_Send_Payload+0x3fc>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <CAN_Send_Payload+0x3ba>
		return (mailbox_id = CAN_TX_Mailbox_1);
 8000746:	23aa      	movs	r3, #170	; 0xaa
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	e019      	b.n	8000782 <CAN_Send_Payload+0x3ee>
	}
	if(mailbox_id == CAN_TX_Mailbox_2 && (CAN1->TSR & CAN_TSR_TXOK2) && (CAN1->TSR & CAN_TSR_TME2) && (CAN1->TSR & CAN_TSR_RQCP2)){
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2bff      	cmp	r3, #255	; 0xff
 8000752:	d115      	bne.n	8000780 <CAN_Send_Payload+0x3ec>
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <CAN_Send_Payload+0x3fc>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00f      	beq.n	8000780 <CAN_Send_Payload+0x3ec>
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <CAN_Send_Payload+0x3fc>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d009      	beq.n	8000780 <CAN_Send_Payload+0x3ec>
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <CAN_Send_Payload+0x3fc>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000774:	2b00      	cmp	r3, #0
 8000776:	d003      	beq.n	8000780 <CAN_Send_Payload+0x3ec>
		return (mailbox_id = CAN_TX_Mailbox_2);
 8000778:	23ff      	movs	r3, #255	; 0xff
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	e000      	b.n	8000782 <CAN_Send_Payload+0x3ee>
	}

	return 10;
 8000780:	230a      	movs	r3, #10
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	b004      	add	sp, #16
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40006400 	.word	0x40006400

08000794 <Console_Init>:

#include "Console.h"


void Console_Init(int32_t baudrate)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <Console_Init+0x68>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a16      	ldr	r2, [pc, #88]	; (80007fc <Console_Init+0x68>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6193      	str	r3, [r2, #24]
	GPIO_Pin_Setup(GPIOA, 9, 0b1011);
 80007a8:	220b      	movs	r2, #11
 80007aa:	2109      	movs	r1, #9
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <Console_Init+0x6c>)
 80007ae:	f000 f82d 	bl	800080c <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 10, 0b1011);
 80007b2:	220b      	movs	r2, #11
 80007b4:	210a      	movs	r1, #10
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <Console_Init+0x6c>)
 80007b8:	f000 f828 	bl	800080c <GPIO_Pin_Setup>
	USART1 -> CR1 |= USART_CR1_UE;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <Console_Init+0x70>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <Console_Init+0x70>)
 80007c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007c6:	60d3      	str	r3, [r2, #12]
	USART1 -> BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <Console_Init+0x74>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	0112      	lsls	r2, r2, #4
 80007d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80007d4:	011a      	lsls	r2, r3, #4
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <Console_Init+0x70>)
 80007d8:	609a      	str	r2, [r3, #8]
	USART1 -> CR1 |= USART_CR1_TE ;
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <Console_Init+0x70>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <Console_Init+0x70>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	60d3      	str	r3, [r2, #12]
	USART1 -> CR1 |=  USART_CR1_RE  ;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <Console_Init+0x70>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	4a06      	ldr	r2, [pc, #24]	; (8000804 <Console_Init+0x70>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	60d3      	str	r3, [r2, #12]
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800
 8000804:	40013800 	.word	0x40013800
 8000808:	20000000 	.word	0x20000000

0800080c <GPIO_Pin_Setup>:
#include "GPIO.h"



void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]
	if(Port == GPIOA)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a4a      	ldr	r2, [pc, #296]	; (8000948 <GPIO_Pin_Setup+0x13c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d12b      	bne.n	800087c <GPIO_Pin_Setup+0x70>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 8000824:	78bb      	ldrb	r3, [r7, #2]
 8000826:	2b0f      	cmp	r3, #15
 8000828:	d002      	beq.n	8000830 <GPIO_Pin_Setup+0x24>
 800082a:	78bb      	ldrb	r3, [r7, #2]
 800082c:	2b0b      	cmp	r3, #11
 800082e:	d106      	bne.n	800083e <GPIO_Pin_Setup+0x32>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 8000830:	4b46      	ldr	r3, [pc, #280]	; (800094c <GPIO_Pin_Setup+0x140>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a45      	ldr	r2, [pc, #276]	; (800094c <GPIO_Pin_Setup+0x140>)
 8000836:	f043 0305 	orr.w	r3, r3, #5
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	e005      	b.n	800084a <GPIO_Pin_Setup+0x3e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800083e:	4b43      	ldr	r3, [pc, #268]	; (800094c <GPIO_Pin_Setup+0x140>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a42      	ldr	r2, [pc, #264]	; (800094c <GPIO_Pin_Setup+0x140>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2b07      	cmp	r3, #7
 800084e:	d80a      	bhi.n	8000866 <GPIO_Pin_Setup+0x5a>
		{
			Port -> CRL |= function << (4*pin);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	78b9      	ldrb	r1, [r7, #2]
 8000856:	78fa      	ldrb	r2, [r7, #3]
 8000858:	0092      	lsls	r2, r2, #2
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	431a      	orrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	e00a      	b.n	800087c <GPIO_Pin_Setup+0x70>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	78b9      	ldrb	r1, [r7, #2]
 800086c:	78fa      	ldrb	r2, [r7, #3]
 800086e:	3a08      	subs	r2, #8
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	431a      	orrs	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	605a      	str	r2, [r3, #4]
		}
	}


	if(Port == GPIOB)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a34      	ldr	r2, [pc, #208]	; (8000950 <GPIO_Pin_Setup+0x144>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d12b      	bne.n	80008dc <GPIO_Pin_Setup+0xd0>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 8000884:	78bb      	ldrb	r3, [r7, #2]
 8000886:	2b0f      	cmp	r3, #15
 8000888:	d002      	beq.n	8000890 <GPIO_Pin_Setup+0x84>
 800088a:	78bb      	ldrb	r3, [r7, #2]
 800088c:	2b0b      	cmp	r3, #11
 800088e:	d106      	bne.n	800089e <GPIO_Pin_Setup+0x92>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <GPIO_Pin_Setup+0x140>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a2d      	ldr	r2, [pc, #180]	; (800094c <GPIO_Pin_Setup+0x140>)
 8000896:	f043 0309 	orr.w	r3, r3, #9
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	e005      	b.n	80008aa <GPIO_Pin_Setup+0x9e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <GPIO_Pin_Setup+0x140>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a2a      	ldr	r2, [pc, #168]	; (800094c <GPIO_Pin_Setup+0x140>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	2b07      	cmp	r3, #7
 80008ae:	d80a      	bhi.n	80008c6 <GPIO_Pin_Setup+0xba>
		{
			Port -> CRL |= function << (4*pin);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	78b9      	ldrb	r1, [r7, #2]
 80008b6:	78fa      	ldrb	r2, [r7, #3]
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	431a      	orrs	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	e00a      	b.n	80008dc <GPIO_Pin_Setup+0xd0>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	78b9      	ldrb	r1, [r7, #2]
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	3a08      	subs	r2, #8
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	431a      	orrs	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	605a      	str	r2, [r3, #4]
		}
	}

	if(Port == GPIOC)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <GPIO_Pin_Setup+0x148>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d12b      	bne.n	800093c <GPIO_Pin_Setup+0x130>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	2b0f      	cmp	r3, #15
 80008e8:	d002      	beq.n	80008f0 <GPIO_Pin_Setup+0xe4>
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	d106      	bne.n	80008fe <GPIO_Pin_Setup+0xf2>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <GPIO_Pin_Setup+0x140>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a15      	ldr	r2, [pc, #84]	; (800094c <GPIO_Pin_Setup+0x140>)
 80008f6:	f043 0311 	orr.w	r3, r3, #17
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	e005      	b.n	800090a <GPIO_Pin_Setup+0xfe>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <GPIO_Pin_Setup+0x140>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <GPIO_Pin_Setup+0x140>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	2b07      	cmp	r3, #7
 800090e:	d80a      	bhi.n	8000926 <GPIO_Pin_Setup+0x11a>
		{
			Port -> CRL |= function << (4*pin);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	78b9      	ldrb	r1, [r7, #2]
 8000916:	78fa      	ldrb	r2, [r7, #3]
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	431a      	orrs	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	601a      	str	r2, [r3, #0]
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
		}
	}
}
 8000924:	e00a      	b.n	800093c <GPIO_Pin_Setup+0x130>
			Port -> CRH |= function << (4*(pin - 8));
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	78b9      	ldrb	r1, [r7, #2]
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	3a08      	subs	r2, #8
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	fa01 f202 	lsl.w	r2, r1, r2
 8000936:	431a      	orrs	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40010800 	.word	0x40010800
 800094c:	40021000 	.word	0x40021000
 8000950:	40010c00 	.word	0x40010c00
 8000954:	40011000 	.word	0x40011000

08000958 <SystemAPB1_Clock_Speed>:

#define Use_External_Crystal 1
#define Use_Internal_Crystal 2

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemAPB1_Clock_Speed+0x20>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <SystemAPB1_Clock_Speed+0x24>)
 8000962:	6852      	ldr	r2, [r2, #4]
 8000964:	0a12      	lsrs	r2, r2, #8
 8000966:	f002 0207 	and.w	r2, r2, #7
 800096a:	4905      	ldr	r1, [pc, #20]	; (8000980 <SystemAPB1_Clock_Speed+0x28>)
 800096c:	5c8a      	ldrb	r2, [r1, r2]
 800096e:	40d3      	lsrs	r3, r2
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000000 	.word	0x20000000
 800097c:	40021000 	.word	0x40021000
 8000980:	08000e98 	.word	0x08000e98

08000984 <SystemAPB2_Clock_Speed>:

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemAPB2_Clock_Speed+0x20>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <SystemAPB2_Clock_Speed+0x24>)
 800098e:	6852      	ldr	r2, [r2, #4]
 8000990:	0ad2      	lsrs	r2, r2, #11
 8000992:	f002 0207 	and.w	r2, r2, #7
 8000996:	4905      	ldr	r1, [pc, #20]	; (80009ac <SystemAPB2_Clock_Speed+0x28>)
 8000998:	5c8a      	ldrb	r2, [r1, r2]
 800099a:	40d3      	lsrs	r3, r2
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000000 	.word	0x20000000
 80009a8:	40021000 	.word	0x40021000
 80009ac:	08000e98 	.word	0x08000e98

080009b0 <MCU_Clock_Init>:

__STATIC_INLINE void MCU_Clock_Init(int crystal)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	SystemInit();
 80009b8:	f000 f986 	bl	8000cc8 <SystemInit>
	switch (crystal) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d003      	beq.n	80009ca <MCU_Clock_Init+0x1a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d052      	beq.n	8000a6e <MCU_Clock_Init+0xbe>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
		}
			break;
	}
}
 80009c8:	e098      	b.n	8000afc <MCU_Clock_Init+0x14c>
			RCC->CR |= RCC_CR_HSEON ;
 80009ca:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <MCU_Clock_Init+0x154>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a4d      	ldr	r2, [pc, #308]	; (8000b04 <MCU_Clock_Init+0x154>)
 80009d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d4:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_HSERDY));
 80009d6:	bf00      	nop
 80009d8:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <MCU_Clock_Init+0x154>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f9      	beq.n	80009d8 <MCU_Clock_Init+0x28>
			FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 80009e4:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <MCU_Clock_Init+0x158>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <MCU_Clock_Init+0x158>)
 80009ea:	f043 0314 	orr.w	r3, r3, #20
 80009ee:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= RCC_CFGR_PLLSRC;
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <MCU_Clock_Init+0x154>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a43      	ldr	r2, [pc, #268]	; (8000b04 <MCU_Clock_Init+0x154>)
 80009f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fa:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 80009fc:	4b41      	ldr	r3, [pc, #260]	; (8000b04 <MCU_Clock_Init+0x154>)
 80009fe:	4a41      	ldr	r2, [pc, #260]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8000a04:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a0a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000a0e:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000a10:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	4a3b      	ldr	r2, [pc, #236]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1a:	6053      	str	r3, [r2, #4]
			RCC->CR |= RCC_CR_PLLON;
 8000a1c:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a26:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_PLLRDY));
 8000a28:	bf00      	nop
 8000a2a:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0f9      	beq.n	8000a2a <MCU_Clock_Init+0x7a>
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	4a32      	ldr	r2, [pc, #200]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6053      	str	r3, [r2, #4]
			while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000a42:	bf00      	nop
 8000a44:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f9      	beq.n	8000a44 <MCU_Clock_Init+0x94>
			SystemCoreClockUpdate();
 8000a50:	f000 f940 	bl	8000cd4 <SystemCoreClockUpdate>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 8000a54:	f7ff ff80 	bl	8000958 <SystemAPB1_Clock_Speed>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <MCU_Clock_Init+0x15c>)
 8000a5e:	601a      	str	r2, [r3, #0]
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 8000a60:	f7ff ff90 	bl	8000984 <SystemAPB2_Clock_Speed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MCU_Clock_Init+0x160>)
 8000a6a:	601a      	str	r2, [r3, #0]
			break;
 8000a6c:	e046      	b.n	8000afc <MCU_Clock_Init+0x14c>
			SystemInit();
 8000a6e:	f000 f92b 	bl	8000cc8 <SystemInit>
			FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MCU_Clock_Init+0x158>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a24      	ldr	r2, [pc, #144]	; (8000b08 <MCU_Clock_Init+0x158>)
 8000a78:	f043 0314 	orr.w	r3, r3, #20
 8000a7c:	6013      	str	r3, [r2, #0]
			RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a88:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000a98:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000a9c:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa8:	6053      	str	r3, [r2, #4]
			RCC->CR |= RCC_CR_PLLON;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab4:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_PLLRDY));
 8000ab6:	bf00      	nop
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <MCU_Clock_Init+0x108>
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	6053      	str	r3, [r2, #4]
			while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000ad0:	bf00      	nop
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MCU_Clock_Init+0x154>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f9      	beq.n	8000ad2 <MCU_Clock_Init+0x122>
			SystemCoreClockUpdate();
 8000ade:	f000 f8f9 	bl	8000cd4 <SystemCoreClockUpdate>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 8000ae2:	f7ff ff39 	bl	8000958 <SystemAPB1_Clock_Speed>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MCU_Clock_Init+0x15c>)
 8000aec:	601a      	str	r2, [r3, #0]
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 8000aee:	f7ff ff49 	bl	8000984 <SystemAPB2_Clock_Speed>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MCU_Clock_Init+0x160>)
 8000af8:	601a      	str	r2, [r3, #0]
			break;
 8000afa:	bf00      	nop
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	20000024 	.word	0x20000024
 8000b10:	20000020 	.word	0x20000020

08000b14 <Delay_Config>:

__STATIC_INLINE uint32_t Delay_Config(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <Delay_Config+0x30>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <Delay_Config+0x30>)
 8000b20:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000b24:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <Delay_Config+0x30>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 5;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <Delay_Config+0x30>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <Delay_Config+0x30>)
 8000b32:	f043 0305 	orr.w	r3, r3, #5
 8000b36:	6013      	str	r3, [r2, #0]
	return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(unsigned long ms)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	unsigned long x = (SystemCoreClock / 1000) * (ms);
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <Delay_ms+0x44>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <Delay_ms+0x48>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	099a      	lsrs	r2, r3, #6
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	fb02 f303 	mul.w	r3, r2, r3
 8000b62:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = x ;
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <Delay_ms+0x4c>)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <Delay_ms+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000b70:	bf00      	nop
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <Delay_ms+0x4c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f9      	beq.n	8000b72 <Delay_ms+0x2a>
	return (0UL);                                                     /* Function successful */
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	10624dd3 	.word	0x10624dd3
 8000b94:	e000e010 	.word	0xe000e010

08000b98 <Delay_s>:


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 8000bac:	e005      	b.n	8000bba <Delay_s+0x22>
	{
		Delay_ms(1);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff ffca 	bl	8000b48 <Delay_ms>
	for (; s>0; s--)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f6      	bne.n	8000bae <Delay_s+0x16>
	}
	return (0UL);
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <A>:

CAN_Config payload;


void A(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	payload.baudrate = CAN_BAUDRATE_1000_KBPS;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <A+0x38>)
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <A+0x3c>)
 8000bd4:	601a      	str	r2, [r3, #0]
	payload.timestamp_enable = CAN_Timestamp_Disable;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <A+0x38>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
	payload.filter_type = CAN_FILTER_MASK_MODE;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <A+0x38>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
	payload.filter_scale = CAN_Filter_Scale_32bit;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <A+0x38>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	611a      	str	r2, [r3, #16]
	payload.filter_index = 0;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <A+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
	payload.filter_bank1 = 0x00;
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <A+0x38>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
	payload.filter_bank2 = 0x00;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <A+0x38>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]


}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000028 	.word	0x20000028
 8000c08:	001e0001 	.word	0x001e0001

08000c0c <main>:

int main(void)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b0af      	sub	sp, #188	; 0xbc
 8000c10:	af2e      	add	r7, sp, #184	; 0xb8
	MCU_Clock_Init(Use_External_Crystal);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f7ff fecc 	bl	80009b0 <MCU_Clock_Init>
	Console_Init(115200);
 8000c18:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000c1c:	f7ff fdba 	bl	8000794 <Console_Init>
	Delay_Config();
 8000c20:	f7ff ff78 	bl	8000b14 <Delay_Config>

	A();
 8000c24:	f7ff ffd2 	bl	8000bcc <A>
	CAN_Init(payload);
 8000c28:	4c26      	ldr	r4, [pc, #152]	; (8000cc4 <main+0xb8>)
 8000c2a:	4668      	mov	r0, sp
 8000c2c:	f104 0310 	add.w	r3, r4, #16
 8000c30:	22b4      	movs	r2, #180	; 0xb4
 8000c32:	4619      	mov	r1, r3
 8000c34:	f000 f90e 	bl	8000e54 <memcpy>
 8000c38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c3c:	f7ff fa98 	bl	8000170 <CAN_Init>


    /* Loop forever */
	for(;;)
	{
		payload.TX_ID_Type = CAN_ID_Standard;
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <main+0xb8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
		payload.TX_ID = 0x20D;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <main+0xb8>)
 8000c48:	f240 220d 	movw	r2, #525	; 0x20d
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
		payload.TX_Frame_Type = CAN_Frame_Data;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <main+0xb8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
		payload.TX_data_length = 1;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <main+0xb8>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	631a      	str	r2, [r3, #48]	; 0x30
		payload.TX_data[0] = 0x01;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <main+0xb8>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
		CAN_Send_Payload(payload);
 8000c60:	4c18      	ldr	r4, [pc, #96]	; (8000cc4 <main+0xb8>)
 8000c62:	4668      	mov	r0, sp
 8000c64:	f104 0310 	add.w	r3, r4, #16
 8000c68:	22b4      	movs	r2, #180	; 0xb4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f000 f8f2 	bl	8000e54 <memcpy>
 8000c70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c74:	f7ff fb8e 	bl	8000394 <CAN_Send_Payload>
		Delay_ms(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ff65 	bl	8000b48 <Delay_ms>
		payload.TX_ID_Type = CAN_ID_Standard;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <main+0xb8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
		payload.TX_ID = 0x20A;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <main+0xb8>)
 8000c86:	f240 220a 	movw	r2, #522	; 0x20a
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
		payload.TX_Frame_Type = CAN_Frame_Data;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <main+0xb8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
		payload.TX_data_length = 2;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <main+0xb8>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	631a      	str	r2, [r3, #48]	; 0x30
		payload.TX_data[0] = 0x01;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <main+0xb8>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
		payload.TX_data[0] = 0x02;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <main+0xb8>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	635a      	str	r2, [r3, #52]	; 0x34
		CAN_Send_Payload(payload);
 8000ca4:	4c07      	ldr	r4, [pc, #28]	; (8000cc4 <main+0xb8>)
 8000ca6:	4668      	mov	r0, sp
 8000ca8:	f104 0310 	add.w	r3, r4, #16
 8000cac:	22b4      	movs	r2, #180	; 0xb4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f000 f8d0 	bl	8000e54 <memcpy>
 8000cb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cb8:	f7ff fb6c 	bl	8000394 <CAN_Send_Payload>
		Delay_s(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f7ff ff6b 	bl	8000b98 <Delay_s>
		payload.TX_ID_Type = CAN_ID_Standard;
 8000cc2:	e7bd      	b.n	8000c40 <main+0x34>
 8000cc4:	20000028 	.word	0x20000028

08000cc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <SystemCoreClockUpdate+0xd0>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d011      	beq.n	8000d1a <SystemCoreClockUpdate+0x46>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d83a      	bhi.n	8000d72 <SystemCoreClockUpdate+0x9e>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <SystemCoreClockUpdate+0x36>
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d004      	beq.n	8000d12 <SystemCoreClockUpdate+0x3e>
 8000d08:	e033      	b.n	8000d72 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <SystemCoreClockUpdate+0xd4>)
 8000d0c:	4a27      	ldr	r2, [pc, #156]	; (8000dac <SystemCoreClockUpdate+0xd8>)
 8000d0e:	601a      	str	r2, [r3, #0]
      break;
 8000d10:	e033      	b.n	8000d7a <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <SystemCoreClockUpdate+0xd4>)
 8000d14:	4a25      	ldr	r2, [pc, #148]	; (8000dac <SystemCoreClockUpdate+0xd8>)
 8000d16:	601a      	str	r2, [r3, #0]
      break;
 8000d18:	e02f      	b.n	8000d7a <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000d1a:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <SystemCoreClockUpdate+0xd0>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000d22:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <SystemCoreClockUpdate+0xd0>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	0c9b      	lsrs	r3, r3, #18
 8000d32:	3302      	adds	r3, #2
 8000d34:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d106      	bne.n	8000d4a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <SystemCoreClockUpdate+0xdc>)
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <SystemCoreClockUpdate+0xd4>)
 8000d46:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000d48:	e017      	b.n	8000d7a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <SystemCoreClockUpdate+0xd0>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <SystemCoreClockUpdate+0xdc>)
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <SystemCoreClockUpdate+0xd4>)
 8000d60:	6013      	str	r3, [r2, #0]
      break;
 8000d62:	e00a      	b.n	8000d7a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <SystemCoreClockUpdate+0xd8>)
 8000d68:	fb02 f303 	mul.w	r3, r2, r3
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <SystemCoreClockUpdate+0xd4>)
 8000d6e:	6013      	str	r3, [r2, #0]
      break;
 8000d70:	e003      	b.n	8000d7a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <SystemCoreClockUpdate+0xd4>)
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <SystemCoreClockUpdate+0xd8>)
 8000d76:	601a      	str	r2, [r3, #0]
      break;
 8000d78:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <SystemCoreClockUpdate+0xd0>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <SystemCoreClockUpdate+0xe0>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <SystemCoreClockUpdate+0xd4>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	fa22 f303 	lsr.w	r3, r2, r3
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <SystemCoreClockUpdate+0xd4>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	20000000 	.word	0x20000000
 8000dac:	007a1200 	.word	0x007a1200
 8000db0:	003d0900 	.word	0x003d0900
 8000db4:	08000e88 	.word	0x08000e88

08000db8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dbc:	f7ff ff84 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopForever+0xe>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopForever+0x16>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000de6:	f000 f811 	bl	8000e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dea:	f7ff ff0f 	bl	8000c0c <main>

08000dee <LoopForever>:

LoopForever:
    b LoopForever
 8000dee:	e7fe      	b.n	8000dee <LoopForever>
  ldr   r0, =_estack
 8000df0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000dfc:	08000ea8 	.word	0x08000ea8
  ldr r2, =_sbss
 8000e00:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000e04:	200000ec 	.word	0x200000ec

08000e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_2_IRQHandler>
	...

08000e0c <__libc_init_array>:
 8000e0c:	b570      	push	{r4, r5, r6, lr}
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4d0c      	ldr	r5, [pc, #48]	; (8000e44 <__libc_init_array+0x38>)
 8000e12:	4c0d      	ldr	r4, [pc, #52]	; (8000e48 <__libc_init_array+0x3c>)
 8000e14:	1b64      	subs	r4, r4, r5
 8000e16:	10a4      	asrs	r4, r4, #2
 8000e18:	42a6      	cmp	r6, r4
 8000e1a:	d109      	bne.n	8000e30 <__libc_init_array+0x24>
 8000e1c:	f000 f828 	bl	8000e70 <_init>
 8000e20:	2600      	movs	r6, #0
 8000e22:	4d0a      	ldr	r5, [pc, #40]	; (8000e4c <__libc_init_array+0x40>)
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <__libc_init_array+0x44>)
 8000e26:	1b64      	subs	r4, r4, r5
 8000e28:	10a4      	asrs	r4, r4, #2
 8000e2a:	42a6      	cmp	r6, r4
 8000e2c:	d105      	bne.n	8000e3a <__libc_init_array+0x2e>
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
 8000e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e34:	4798      	blx	r3
 8000e36:	3601      	adds	r6, #1
 8000e38:	e7ee      	b.n	8000e18 <__libc_init_array+0xc>
 8000e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e3e:	4798      	blx	r3
 8000e40:	3601      	adds	r6, #1
 8000e42:	e7f2      	b.n	8000e2a <__libc_init_array+0x1e>
 8000e44:	08000ea0 	.word	0x08000ea0
 8000e48:	08000ea0 	.word	0x08000ea0
 8000e4c:	08000ea0 	.word	0x08000ea0
 8000e50:	08000ea4 	.word	0x08000ea4

08000e54 <memcpy>:
 8000e54:	440a      	add	r2, r1
 8000e56:	4291      	cmp	r1, r2
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	d100      	bne.n	8000e60 <memcpy+0xc>
 8000e5e:	4770      	bx	lr
 8000e60:	b510      	push	{r4, lr}
 8000e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e66:	4291      	cmp	r1, r2
 8000e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000e6c:	d1f9      	bne.n	8000e62 <memcpy+0xe>
 8000e6e:	bd10      	pop	{r4, pc}

08000e70 <_init>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	bf00      	nop
 8000e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e76:	bc08      	pop	{r3}
 8000e78:	469e      	mov	lr, r3
 8000e7a:	4770      	bx	lr

08000e7c <_fini>:
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	bf00      	nop
 8000e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e82:	bc08      	pop	{r3}
 8000e84:	469e      	mov	lr, r3
 8000e86:	4770      	bx	lr
