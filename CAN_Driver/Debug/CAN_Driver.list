
CAN_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000714  08000714  00010714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800072c  0800072c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800072c  0800072c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800072c  0800072c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800072c  0800072c  0001072c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000730  08000730  00010730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000738  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000738  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ebc  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000889  00000000  00000000  00022ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00023778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00023888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011aaa  00000000  00000000  00023950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f9a  00000000  00000000  000353fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a483  00000000  00000000  00037394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00091817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002d4  00000000  00000000  0009186c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080006fc 	.word	0x080006fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080006fc 	.word	0x080006fc

08000170 <CAN_Init>:

#include "CAN.h"


void CAN_Init(int32_t baudrate)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR &= ~RCC_APB1ENR_CAN1EN;
 8000178:	4b2f      	ldr	r3, [pc, #188]	; (8000238 <CAN_Init+0xc8>)
 800017a:	69db      	ldr	r3, [r3, #28]
 800017c:	4a2e      	ldr	r2, [pc, #184]	; (8000238 <CAN_Init+0xc8>)
 800017e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000182:	61d3      	str	r3, [r2, #28]
	GPIO_Pin_Setup(GPIOA, 12, ALT_PUSH_PULL_OUTPUT);
 8000184:	220b      	movs	r2, #11
 8000186:	210c      	movs	r1, #12
 8000188:	482c      	ldr	r0, [pc, #176]	; (800023c <CAN_Init+0xcc>)
 800018a:	f000 f85b 	bl	8000244 <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 11, FLOATING_INPUT);
 800018e:	2204      	movs	r2, #4
 8000190:	210b      	movs	r1, #11
 8000192:	482a      	ldr	r0, [pc, #168]	; (800023c <CAN_Init+0xcc>)
 8000194:	f000 f856 	bl	8000244 <GPIO_Pin_Setup>
	RCC -> APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000198:	4b27      	ldr	r3, [pc, #156]	; (8000238 <CAN_Init+0xc8>)
 800019a:	69db      	ldr	r3, [r3, #28]
 800019c:	4a26      	ldr	r2, [pc, #152]	; (8000238 <CAN_Init+0xc8>)
 800019e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001a2:	61d3      	str	r3, [r2, #28]
	CAN1 -> MCR |= CAN_MCR_DBF | CAN_MCR_RESET | CAN_MCR_SLEEP;
 80001a4:	4b26      	ldr	r3, [pc, #152]	; (8000240 <CAN_Init+0xd0>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a25      	ldr	r2, [pc, #148]	; (8000240 <CAN_Init+0xd0>)
 80001aa:	f443 33c0 	orr.w	r3, r3, #98304	; 0x18000
 80001ae:	f043 0302 	orr.w	r3, r3, #2
 80001b2:	6013      	str	r3, [r2, #0]
	while(!(CAN1 -> MSR & CAN_MSR_SLAK)){}
 80001b4:	bf00      	nop
 80001b6:	4b22      	ldr	r3, [pc, #136]	; (8000240 <CAN_Init+0xd0>)
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	f003 0302 	and.w	r3, r3, #2
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d0f9      	beq.n	80001b6 <CAN_Init+0x46>
	CAN1 -> MCR &= ~CAN_MCR_SLEEP;
 80001c2:	4b1f      	ldr	r3, [pc, #124]	; (8000240 <CAN_Init+0xd0>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a1e      	ldr	r2, [pc, #120]	; (8000240 <CAN_Init+0xd0>)
 80001c8:	f023 0302 	bic.w	r3, r3, #2
 80001cc:	6013      	str	r3, [r2, #0]
	CAN1 -> MCR |= CAN_MCR_INRQ;
 80001ce:	4b1c      	ldr	r3, [pc, #112]	; (8000240 <CAN_Init+0xd0>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <CAN_Init+0xd0>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6013      	str	r3, [r2, #0]
	while((CAN1 -> MSR & CAN_MSR_SLAK)){}
 80001da:	bf00      	nop
 80001dc:	4b18      	ldr	r3, [pc, #96]	; (8000240 <CAN_Init+0xd0>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	f003 0302 	and.w	r3, r3, #2
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d1f9      	bne.n	80001dc <CAN_Init+0x6c>
	while(!(CAN1-> MSR & CAN_MSR_INAK)){}
 80001e8:	bf00      	nop
 80001ea:	4b15      	ldr	r3, [pc, #84]	; (8000240 <CAN_Init+0xd0>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	f003 0301 	and.w	r3, r3, #1
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0f9      	beq.n	80001ea <CAN_Init+0x7a>
	CAN1 -> BTR = baudrate;
 80001f6:	4a12      	ldr	r2, [pc, #72]	; (8000240 <CAN_Init+0xd0>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	61d3      	str	r3, [r2, #28]
	CAN1->BTR |= CAN_BTR_LBKM;  //SET LBKM BIT
 80001fc:	4b10      	ldr	r3, [pc, #64]	; (8000240 <CAN_Init+0xd0>)
 80001fe:	69db      	ldr	r3, [r3, #28]
 8000200:	4a0f      	ldr	r2, [pc, #60]	; (8000240 <CAN_Init+0xd0>)
 8000202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000206:	61d3      	str	r3, [r2, #28]
    CAN1->MCR &= ~CAN_MCR_INRQ;
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <CAN_Init+0xd0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <CAN_Init+0xd0>)
 800020e:	f023 0301 	bic.w	r3, r3, #1
 8000212:	6013      	str	r3, [r2, #0]
    CAN1->MCR &= ~CAN_MCR_INRQ;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <CAN_Init+0xd0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a09      	ldr	r2, [pc, #36]	; (8000240 <CAN_Init+0xd0>)
 800021a:	f023 0301 	bic.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]
    while((CAN1->MSR & CAN_MSR_INAK));
 8000220:	bf00      	nop
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <CAN_Init+0xd0>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	f003 0301 	and.w	r3, r3, #1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d1f9      	bne.n	8000222 <CAN_Init+0xb2>
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800
 8000240:	40006400 	.word	0x40006400

08000244 <GPIO_Pin_Setup>:
#include "GPIO.h"



void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	460b      	mov	r3, r1
 800024e:	70fb      	strb	r3, [r7, #3]
 8000250:	4613      	mov	r3, r2
 8000252:	70bb      	strb	r3, [r7, #2]
	if(Port == GPIOA)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4a4a      	ldr	r2, [pc, #296]	; (8000380 <GPIO_Pin_Setup+0x13c>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d12b      	bne.n	80002b4 <GPIO_Pin_Setup+0x70>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 800025c:	78bb      	ldrb	r3, [r7, #2]
 800025e:	2b0f      	cmp	r3, #15
 8000260:	d002      	beq.n	8000268 <GPIO_Pin_Setup+0x24>
 8000262:	78bb      	ldrb	r3, [r7, #2]
 8000264:	2b0b      	cmp	r3, #11
 8000266:	d106      	bne.n	8000276 <GPIO_Pin_Setup+0x32>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 8000268:	4b46      	ldr	r3, [pc, #280]	; (8000384 <GPIO_Pin_Setup+0x140>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a45      	ldr	r2, [pc, #276]	; (8000384 <GPIO_Pin_Setup+0x140>)
 800026e:	f043 0305 	orr.w	r3, r3, #5
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	e005      	b.n	8000282 <GPIO_Pin_Setup+0x3e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000276:	4b43      	ldr	r3, [pc, #268]	; (8000384 <GPIO_Pin_Setup+0x140>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a42      	ldr	r2, [pc, #264]	; (8000384 <GPIO_Pin_Setup+0x140>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 8000282:	78fb      	ldrb	r3, [r7, #3]
 8000284:	2b07      	cmp	r3, #7
 8000286:	d80a      	bhi.n	800029e <GPIO_Pin_Setup+0x5a>
		{
			Port -> CRL |= function << (4*pin);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	78b9      	ldrb	r1, [r7, #2]
 800028e:	78fa      	ldrb	r2, [r7, #3]
 8000290:	0092      	lsls	r2, r2, #2
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	e00a      	b.n	80002b4 <GPIO_Pin_Setup+0x70>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	78b9      	ldrb	r1, [r7, #2]
 80002a4:	78fa      	ldrb	r2, [r7, #3]
 80002a6:	3a08      	subs	r2, #8
 80002a8:	0092      	lsls	r2, r2, #2
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	605a      	str	r2, [r3, #4]
		}
	}


	if(Port == GPIOB)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a34      	ldr	r2, [pc, #208]	; (8000388 <GPIO_Pin_Setup+0x144>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d12b      	bne.n	8000314 <GPIO_Pin_Setup+0xd0>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 80002bc:	78bb      	ldrb	r3, [r7, #2]
 80002be:	2b0f      	cmp	r3, #15
 80002c0:	d002      	beq.n	80002c8 <GPIO_Pin_Setup+0x84>
 80002c2:	78bb      	ldrb	r3, [r7, #2]
 80002c4:	2b0b      	cmp	r3, #11
 80002c6:	d106      	bne.n	80002d6 <GPIO_Pin_Setup+0x92>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 80002c8:	4b2e      	ldr	r3, [pc, #184]	; (8000384 <GPIO_Pin_Setup+0x140>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a2d      	ldr	r2, [pc, #180]	; (8000384 <GPIO_Pin_Setup+0x140>)
 80002ce:	f043 0309 	orr.w	r3, r3, #9
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	e005      	b.n	80002e2 <GPIO_Pin_Setup+0x9e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80002d6:	4b2b      	ldr	r3, [pc, #172]	; (8000384 <GPIO_Pin_Setup+0x140>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a2a      	ldr	r2, [pc, #168]	; (8000384 <GPIO_Pin_Setup+0x140>)
 80002dc:	f043 0308 	orr.w	r3, r3, #8
 80002e0:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80002e2:	78fb      	ldrb	r3, [r7, #3]
 80002e4:	2b07      	cmp	r3, #7
 80002e6:	d80a      	bhi.n	80002fe <GPIO_Pin_Setup+0xba>
		{
			Port -> CRL |= function << (4*pin);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	78b9      	ldrb	r1, [r7, #2]
 80002ee:	78fa      	ldrb	r2, [r7, #3]
 80002f0:	0092      	lsls	r2, r2, #2
 80002f2:	fa01 f202 	lsl.w	r2, r1, r2
 80002f6:	431a      	orrs	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	e00a      	b.n	8000314 <GPIO_Pin_Setup+0xd0>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	78b9      	ldrb	r1, [r7, #2]
 8000304:	78fa      	ldrb	r2, [r7, #3]
 8000306:	3a08      	subs	r2, #8
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	431a      	orrs	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	605a      	str	r2, [r3, #4]
		}
	}

	if(Port == GPIOC)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a1d      	ldr	r2, [pc, #116]	; (800038c <GPIO_Pin_Setup+0x148>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d12b      	bne.n	8000374 <GPIO_Pin_Setup+0x130>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 800031c:	78bb      	ldrb	r3, [r7, #2]
 800031e:	2b0f      	cmp	r3, #15
 8000320:	d002      	beq.n	8000328 <GPIO_Pin_Setup+0xe4>
 8000322:	78bb      	ldrb	r3, [r7, #2]
 8000324:	2b0b      	cmp	r3, #11
 8000326:	d106      	bne.n	8000336 <GPIO_Pin_Setup+0xf2>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 8000328:	4b16      	ldr	r3, [pc, #88]	; (8000384 <GPIO_Pin_Setup+0x140>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <GPIO_Pin_Setup+0x140>)
 800032e:	f043 0311 	orr.w	r3, r3, #17
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	e005      	b.n	8000342 <GPIO_Pin_Setup+0xfe>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <GPIO_Pin_Setup+0x140>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <GPIO_Pin_Setup+0x140>)
 800033c:	f043 0310 	orr.w	r3, r3, #16
 8000340:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	2b07      	cmp	r3, #7
 8000346:	d80a      	bhi.n	800035e <GPIO_Pin_Setup+0x11a>
		{
			Port -> CRL |= function << (4*pin);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	78b9      	ldrb	r1, [r7, #2]
 800034e:	78fa      	ldrb	r2, [r7, #3]
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	fa01 f202 	lsl.w	r2, r1, r2
 8000356:	431a      	orrs	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
		}
	}
}
 800035c:	e00a      	b.n	8000374 <GPIO_Pin_Setup+0x130>
			Port -> CRH |= function << (4*(pin - 8));
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	78b9      	ldrb	r1, [r7, #2]
 8000364:	78fa      	ldrb	r2, [r7, #3]
 8000366:	3a08      	subs	r2, #8
 8000368:	0092      	lsls	r2, r2, #2
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	605a      	str	r2, [r3, #4]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40010800 	.word	0x40010800
 8000384:	40021000 	.word	0x40021000
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40011000 	.word	0x40011000

08000390 <SystemAPB1_Clock_Speed>:

uint32_t APB1CLK_SPEED;
uint32_t APB2CLK_SPEED;

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <SystemAPB1_Clock_Speed+0x20>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a06      	ldr	r2, [pc, #24]	; (80003b4 <SystemAPB1_Clock_Speed+0x24>)
 800039a:	6852      	ldr	r2, [r2, #4]
 800039c:	0a12      	lsrs	r2, r2, #8
 800039e:	f002 0207 	and.w	r2, r2, #7
 80003a2:	4905      	ldr	r1, [pc, #20]	; (80003b8 <SystemAPB1_Clock_Speed+0x28>)
 80003a4:	5c8a      	ldrb	r2, [r1, r2]
 80003a6:	40d3      	lsrs	r3, r2
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	20000000 	.word	0x20000000
 80003b4:	40021000 	.word	0x40021000
 80003b8:	08000724 	.word	0x08000724

080003bc <SystemAPB2_Clock_Speed>:

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <SystemAPB2_Clock_Speed+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <SystemAPB2_Clock_Speed+0x24>)
 80003c6:	6852      	ldr	r2, [r2, #4]
 80003c8:	0ad2      	lsrs	r2, r2, #11
 80003ca:	f002 0207 	and.w	r2, r2, #7
 80003ce:	4905      	ldr	r1, [pc, #20]	; (80003e4 <SystemAPB2_Clock_Speed+0x28>)
 80003d0:	5c8a      	ldrb	r2, [r1, r2]
 80003d2:	40d3      	lsrs	r3, r2
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	20000000 	.word	0x20000000
 80003e0:	40021000 	.word	0x40021000
 80003e4:	08000724 	.word	0x08000724

080003e8 <MCU_Clock_Init>:

__STATIC_INLINE void MCU_Clock_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	SystemInit();
 80003ec:	f000 f8c0 	bl	8000570 <SystemInit>
	RCC->CR |= RCC_CR_HSEON ;
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <MCU_Clock_Init+0xb0>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a28      	ldr	r2, [pc, #160]	; (8000498 <MCU_Clock_Init+0xb0>)
 80003f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003fa:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 80003fc:	bf00      	nop
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f9      	beq.n	80003fe <MCU_Clock_Init+0x16>
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <MCU_Clock_Init+0xb4>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a23      	ldr	r2, [pc, #140]	; (800049c <MCU_Clock_Init+0xb4>)
 8000410:	f043 0314 	orr.w	r3, r3, #20
 8000414:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000416:	4b20      	ldr	r3, [pc, #128]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	4a1f      	ldr	r2, [pc, #124]	; (8000498 <MCU_Clock_Init+0xb0>)
 800041c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000420:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 8000422:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000424:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 800042a:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MCU_Clock_Init+0xb0>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	4a1a      	ldr	r2, [pc, #104]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000430:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000434:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	4a17      	ldr	r2, [pc, #92]	; (8000498 <MCU_Clock_Init+0xb0>)
 800043c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000440:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a14      	ldr	r2, [pc, #80]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800044c:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 800044e:	bf00      	nop
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f9      	beq.n	8000450 <MCU_Clock_Init+0x68>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MCU_Clock_Init+0xb0>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <MCU_Clock_Init+0xb0>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000468:	bf00      	nop
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MCU_Clock_Init+0xb0>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f003 0308 	and.w	r3, r3, #8
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0f9      	beq.n	800046a <MCU_Clock_Init+0x82>
	SystemCoreClockUpdate();
 8000476:	f000 f881 	bl	800057c <SystemCoreClockUpdate>
	APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 800047a:	f7ff ff89 	bl	8000390 <SystemAPB1_Clock_Speed>
 800047e:	4603      	mov	r3, r0
 8000480:	461a      	mov	r2, r3
 8000482:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <MCU_Clock_Init+0xb8>)
 8000484:	601a      	str	r2, [r3, #0]
	APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 8000486:	f7ff ff99 	bl	80003bc <SystemAPB2_Clock_Speed>
 800048a:	4603      	mov	r3, r0
 800048c:	461a      	mov	r2, r3
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <MCU_Clock_Init+0xbc>)
 8000490:	601a      	str	r2, [r3, #0]
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40022000 	.word	0x40022000
 80004a0:	20000024 	.word	0x20000024
 80004a4:	20000020 	.word	0x20000020

080004a8 <Delay_Config>:

__STATIC_INLINE uint32_t Delay_Config(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <Delay_Config+0x30>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <Delay_Config+0x30>)
 80004b4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80004b8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <Delay_Config+0x30>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 5;
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <Delay_Config+0x30>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <Delay_Config+0x30>)
 80004c6:	f043 0305 	orr.w	r3, r3, #5
 80004ca:	6013      	str	r3, [r2, #0]
	return (0UL);                                                     /* Function successful */
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000e010 	.word	0xe000e010

080004dc <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(unsigned long ms)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	unsigned long x = (SystemCoreClock / 1000) * (ms);
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <Delay_ms+0x44>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <Delay_ms+0x48>)
 80004ea:	fba2 2303 	umull	r2, r3, r2, r3
 80004ee:	099a      	lsrs	r2, r3, #6
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	fb02 f303 	mul.w	r3, r2, r3
 80004f6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = x ;
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <Delay_ms+0x4c>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <Delay_ms+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000504:	bf00      	nop
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <Delay_ms+0x4c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f9      	beq.n	8000506 <Delay_ms+0x2a>
	return (0UL);                                                     /* Function successful */
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000
 8000524:	10624dd3 	.word	0x10624dd3
 8000528:	e000e010 	.word	0xe000e010

0800052c <main>:
#include <stdint.h>
#include "main.h"
#include "CAN.h"

int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    MCU_Clock_Init();
 8000530:	f7ff ff5a 	bl	80003e8 <MCU_Clock_Init>
    Delay_Config();
 8000534:	f7ff ffb8 	bl	80004a8 <Delay_Config>
    CAN_Init(CAN_BAUDRATE_1000_KBPS);
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <main+0x3c>)
 800053a:	f7ff fe19 	bl	8000170 <CAN_Init>
    GPIO_Pin_Setup(GPIOC, 13, GEN_PUSH_PULL_OUTPUT);
 800053e:	2203      	movs	r2, #3
 8000540:	210d      	movs	r1, #13
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <main+0x40>)
 8000544:	f7ff fe7e 	bl	8000244 <GPIO_Pin_Setup>

	for(;;)
	{
		GPIOC -> BSRR |= GPIO_BSRR_BR13;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <main+0x40>)
 800054a:	691b      	ldr	r3, [r3, #16]
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <main+0x40>)
 800054e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000552:	6113      	str	r3, [r2, #16]

		GPIOC -> BSRR |= GPIO_BSRR_BS13;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <main+0x40>)
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <main+0x40>)
 800055a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800055e:	6113      	str	r3, [r2, #16]
		Delay_ms(100);
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f7ff ffbb 	bl	80004dc <Delay_ms>
		GPIOC -> BSRR |= GPIO_BSRR_BR13;
 8000566:	e7ef      	b.n	8000548 <main+0x1c>
 8000568:	001e0001 	.word	0x001e0001
 800056c:	40011000 	.word	0x40011000

08000570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <SystemCoreClockUpdate+0xd0>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	f003 030c 	and.w	r3, r3, #12
 8000596:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b08      	cmp	r3, #8
 800059c:	d011      	beq.n	80005c2 <SystemCoreClockUpdate+0x46>
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d83a      	bhi.n	800061a <SystemCoreClockUpdate+0x9e>
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <SystemCoreClockUpdate+0x36>
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d004      	beq.n	80005ba <SystemCoreClockUpdate+0x3e>
 80005b0:	e033      	b.n	800061a <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemCoreClockUpdate+0xd4>)
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemCoreClockUpdate+0xd8>)
 80005b6:	601a      	str	r2, [r3, #0]
      break;
 80005b8:	e033      	b.n	8000622 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemCoreClockUpdate+0xd4>)
 80005bc:	4a25      	ldr	r2, [pc, #148]	; (8000654 <SystemCoreClockUpdate+0xd8>)
 80005be:	601a      	str	r2, [r3, #0]
      break;
 80005c0:	e02f      	b.n	8000622 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemCoreClockUpdate+0xd0>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80005ca:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemCoreClockUpdate+0xd0>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005d4:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	0c9b      	lsrs	r3, r3, #18
 80005da:	3302      	adds	r3, #2
 80005dc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d106      	bne.n	80005f2 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <SystemCoreClockUpdate+0xdc>)
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	4a18      	ldr	r2, [pc, #96]	; (8000650 <SystemCoreClockUpdate+0xd4>)
 80005ee:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 80005f0:	e017      	b.n	8000622 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <SystemCoreClockUpdate+0xd0>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a15      	ldr	r2, [pc, #84]	; (8000658 <SystemCoreClockUpdate+0xdc>)
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <SystemCoreClockUpdate+0xd4>)
 8000608:	6013      	str	r3, [r2, #0]
      break;
 800060a:	e00a      	b.n	8000622 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <SystemCoreClockUpdate+0xd8>)
 8000610:	fb02 f303 	mul.w	r3, r2, r3
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <SystemCoreClockUpdate+0xd4>)
 8000616:	6013      	str	r3, [r2, #0]
      break;
 8000618:	e003      	b.n	8000622 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <SystemCoreClockUpdate+0xd4>)
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <SystemCoreClockUpdate+0xd8>)
 800061e:	601a      	str	r2, [r3, #0]
      break;
 8000620:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <SystemCoreClockUpdate+0xd0>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	091b      	lsrs	r3, r3, #4
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <SystemCoreClockUpdate+0xe0>)
 800062e:	5cd3      	ldrb	r3, [r2, r3]
 8000630:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <SystemCoreClockUpdate+0xd4>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	fa22 f303 	lsr.w	r3, r2, r3
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <SystemCoreClockUpdate+0xd4>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	20000000 	.word	0x20000000
 8000654:	007a1200 	.word	0x007a1200
 8000658:	003d0900 	.word	0x003d0900
 800065c:	08000714 	.word	0x08000714

08000660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f7ff ff84 	bl	8000570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068e:	f000 f811 	bl	80006b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff ff4b 	bl	800052c <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006a4:	08000734 	.word	0x08000734
  ldr r2, =_sbss
 80006a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006ac:	20000028 	.word	0x20000028

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>
	...

080006b4 <__libc_init_array>:
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	2600      	movs	r6, #0
 80006b8:	4d0c      	ldr	r5, [pc, #48]	; (80006ec <__libc_init_array+0x38>)
 80006ba:	4c0d      	ldr	r4, [pc, #52]	; (80006f0 <__libc_init_array+0x3c>)
 80006bc:	1b64      	subs	r4, r4, r5
 80006be:	10a4      	asrs	r4, r4, #2
 80006c0:	42a6      	cmp	r6, r4
 80006c2:	d109      	bne.n	80006d8 <__libc_init_array+0x24>
 80006c4:	f000 f81a 	bl	80006fc <_init>
 80006c8:	2600      	movs	r6, #0
 80006ca:	4d0a      	ldr	r5, [pc, #40]	; (80006f4 <__libc_init_array+0x40>)
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <__libc_init_array+0x44>)
 80006ce:	1b64      	subs	r4, r4, r5
 80006d0:	10a4      	asrs	r4, r4, #2
 80006d2:	42a6      	cmp	r6, r4
 80006d4:	d105      	bne.n	80006e2 <__libc_init_array+0x2e>
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006dc:	4798      	blx	r3
 80006de:	3601      	adds	r6, #1
 80006e0:	e7ee      	b.n	80006c0 <__libc_init_array+0xc>
 80006e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e6:	4798      	blx	r3
 80006e8:	3601      	adds	r6, #1
 80006ea:	e7f2      	b.n	80006d2 <__libc_init_array+0x1e>
 80006ec:	0800072c 	.word	0x0800072c
 80006f0:	0800072c 	.word	0x0800072c
 80006f4:	0800072c 	.word	0x0800072c
 80006f8:	08000730 	.word	0x08000730

080006fc <_init>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr

08000708 <_fini>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr
