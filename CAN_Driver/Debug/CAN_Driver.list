
CAN_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001838  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001aa4  08001aa4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001aa4  08001aa4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001aa4  08001aa4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa4  08001aa4  00011aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aa8  08001aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000068  08001b14  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08001b14  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e2c  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e06  00000000  00000000  00024ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00025cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00025e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012155  00000000  00000000  00025f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034f4  00000000  00000000  000380a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005aca4  00000000  00000000  0003b599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009623d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000081c  00000000  00000000  00096290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001950 	.word	0x08001950

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001950 	.word	0x08001950

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <CAN_Init>:
#include "CAN.h"

int next_mailbox = 0;

void CAN_Init(CAN_Config mailbox)
{
 8000180:	b084      	sub	sp, #16
 8000182:	b580      	push	{r7, lr}
 8000184:	af00      	add	r7, sp, #0
 8000186:	f107 0c08 	add.w	ip, r7, #8
 800018a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	RCC -> APB1ENR |= RCC_APB1ENR_CAN1EN;
 800018e:	4b7b      	ldr	r3, [pc, #492]	; (800037c <CAN_Init+0x1fc>)
 8000190:	69db      	ldr	r3, [r3, #28]
 8000192:	4a7a      	ldr	r2, [pc, #488]	; (800037c <CAN_Init+0x1fc>)
 8000194:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000198:	61d3      	str	r3, [r2, #28]
	GPIO_Pin_Setup(GPIOA, 12, ALT_PUSH_PULL_OUTPUT);
 800019a:	220b      	movs	r2, #11
 800019c:	210c      	movs	r1, #12
 800019e:	4878      	ldr	r0, [pc, #480]	; (8000380 <CAN_Init+0x200>)
 80001a0:	f000 fbd4 	bl	800094c <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 11, PULL_DOWN_INPUT);
 80001a4:	2208      	movs	r2, #8
 80001a6:	210b      	movs	r1, #11
 80001a8:	4875      	ldr	r0, [pc, #468]	; (8000380 <CAN_Init+0x200>)
 80001aa:	f000 fbcf 	bl	800094c <GPIO_Pin_Setup>

	CAN1 -> MCR |= CAN_MCR_INRQ;
 80001ae:	4b75      	ldr	r3, [pc, #468]	; (8000384 <CAN_Init+0x204>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a74      	ldr	r2, [pc, #464]	; (8000384 <CAN_Init+0x204>)
 80001b4:	f043 0301 	orr.w	r3, r3, #1
 80001b8:	6013      	str	r3, [r2, #0]
	while(!(CAN1 -> MSR & CAN_MSR_INAK)){}
 80001ba:	bf00      	nop
 80001bc:	4b71      	ldr	r3, [pc, #452]	; (8000384 <CAN_Init+0x204>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	f003 0301 	and.w	r3, r3, #1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0f9      	beq.n	80001bc <CAN_Init+0x3c>
	CAN1 -> MCR |= CAN_MCR_ABOM;
 80001c8:	4b6e      	ldr	r3, [pc, #440]	; (8000384 <CAN_Init+0x204>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a6d      	ldr	r2, [pc, #436]	; (8000384 <CAN_Init+0x204>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
	CAN1 -> MCR &= ~CAN_MCR_DBF;
 80001d4:	4b6b      	ldr	r3, [pc, #428]	; (8000384 <CAN_Init+0x204>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a6a      	ldr	r2, [pc, #424]	; (8000384 <CAN_Init+0x204>)
 80001da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001de:	6013      	str	r3, [r2, #0]
	CAN1 -> BTR |= CAN_BTR_LBKM;
 80001e0:	4b68      	ldr	r3, [pc, #416]	; (8000384 <CAN_Init+0x204>)
 80001e2:	69db      	ldr	r3, [r3, #28]
 80001e4:	4a67      	ldr	r2, [pc, #412]	; (8000384 <CAN_Init+0x204>)
 80001e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80001ea:	61d3      	str	r3, [r2, #28]
	CAN1 -> BTR = mailbox.baudrate;
 80001ec:	68ba      	ldr	r2, [r7, #8]
 80001ee:	4b65      	ldr	r3, [pc, #404]	; (8000384 <CAN_Init+0x204>)
 80001f0:	61da      	str	r2, [r3, #28]
	CAN1 -> FMR |= CAN_FMR_FINIT;
 80001f2:	4b64      	ldr	r3, [pc, #400]	; (8000384 <CAN_Init+0x204>)
 80001f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80001f8:	4a62      	ldr	r2, [pc, #392]	; (8000384 <CAN_Init+0x204>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 -> FMR &= 0xFFFFC0FF;
 8000202:	4b60      	ldr	r3, [pc, #384]	; (8000384 <CAN_Init+0x204>)
 8000204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000208:	4a5e      	ldr	r2, [pc, #376]	; (8000384 <CAN_Init+0x204>)
 800020a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800020e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 -> FMR |= 0x1C << 8;
 8000212:	4b5c      	ldr	r3, [pc, #368]	; (8000384 <CAN_Init+0x204>)
 8000214:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000218:	4a5a      	ldr	r2, [pc, #360]	; (8000384 <CAN_Init+0x204>)
 800021a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800021e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	//Deactivate Filter:
	CAN1 -> FA1R &= ~(1 << mailbox.filter_index);
 8000222:	4b58      	ldr	r3, [pc, #352]	; (8000384 <CAN_Init+0x204>)
 8000224:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000228:	693a      	ldr	r2, [r7, #16]
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f202 	lsl.w	r2, r1, r2
 8000230:	43d2      	mvns	r2, r2
 8000232:	4611      	mov	r1, r2
 8000234:	4a53      	ldr	r2, [pc, #332]	; (8000384 <CAN_Init+0x204>)
 8000236:	400b      	ands	r3, r1
 8000238:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	//Set Filter Scale
	if(mailbox.filter_scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << mailbox.filter_index);
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10c      	bne.n	800025c <CAN_Init+0xdc>
 8000242:	4b50      	ldr	r3, [pc, #320]	; (8000384 <CAN_Init+0x204>)
 8000244:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000248:	693a      	ldr	r2, [r7, #16]
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a4b      	ldr	r2, [pc, #300]	; (8000384 <CAN_Init+0x204>)
 8000256:	400b      	ands	r3, r1
 8000258:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	if(mailbox.filter_scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << mailbox.filter_index);
 800025c:	69bb      	ldr	r3, [r7, #24]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d10b      	bne.n	800027a <CAN_Init+0xfa>
 8000262:	4b48      	ldr	r3, [pc, #288]	; (8000384 <CAN_Init+0x204>)
 8000264:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000268:	693a      	ldr	r2, [r7, #16]
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f202 	lsl.w	r2, r1, r2
 8000270:	4611      	mov	r1, r2
 8000272:	4a44      	ldr	r2, [pc, #272]	; (8000384 <CAN_Init+0x204>)
 8000274:	430b      	orrs	r3, r1
 8000276:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	//Set Filter Type
	if(mailbox.filter_type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << mailbox.filter_index);
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	2b0a      	cmp	r3, #10
 800027e:	d10b      	bne.n	8000298 <CAN_Init+0x118>
 8000280:	4b40      	ldr	r3, [pc, #256]	; (8000384 <CAN_Init+0x204>)
 8000282:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000286:	693a      	ldr	r2, [r7, #16]
 8000288:	2101      	movs	r1, #1
 800028a:	fa01 f202 	lsl.w	r2, r1, r2
 800028e:	4611      	mov	r1, r2
 8000290:	4a3c      	ldr	r2, [pc, #240]	; (8000384 <CAN_Init+0x204>)
 8000292:	430b      	orrs	r3, r1
 8000294:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	if(mailbox.filter_type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << mailbox.filter_index);
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d10c      	bne.n	80002b8 <CAN_Init+0x138>
 800029e:	4b39      	ldr	r3, [pc, #228]	; (8000384 <CAN_Init+0x204>)
 80002a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80002a4:	693a      	ldr	r2, [r7, #16]
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	43d2      	mvns	r2, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a34      	ldr	r2, [pc, #208]	; (8000384 <CAN_Init+0x204>)
 80002b2:	400b      	ands	r3, r1
 80002b4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	//Set FIFO for Filter Bank
	if(mailbox.filter_type == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << mailbox.filter_index);
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d10b      	bne.n	80002d6 <CAN_Init+0x156>
 80002be:	4b31      	ldr	r3, [pc, #196]	; (8000384 <CAN_Init+0x204>)
 80002c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80002c4:	693a      	ldr	r2, [r7, #16]
 80002c6:	2101      	movs	r1, #1
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	4611      	mov	r1, r2
 80002ce:	4a2d      	ldr	r2, [pc, #180]	; (8000384 <CAN_Init+0x204>)
 80002d0:	430b      	orrs	r3, r1
 80002d2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	if(mailbox.filter_type == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << mailbox.filter_index);
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d10c      	bne.n	80002f6 <CAN_Init+0x176>
 80002dc:	4b29      	ldr	r3, [pc, #164]	; (8000384 <CAN_Init+0x204>)
 80002de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80002e2:	693a      	ldr	r2, [r7, #16]
 80002e4:	2101      	movs	r1, #1
 80002e6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a25      	ldr	r2, [pc, #148]	; (8000384 <CAN_Init+0x204>)
 80002f0:	400b      	ands	r3, r1
 80002f2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	//Set FIFO Bank
	CAN1 -> sFilterRegister[mailbox.filter_index].FR1 = mailbox.filter_bank1;
 80002f6:	4923      	ldr	r1, [pc, #140]	; (8000384 <CAN_Init+0x204>)
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	6a3a      	ldr	r2, [r7, #32]
 80002fc:	3348      	adds	r3, #72	; 0x48
 80002fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	CAN1 -> sFilterRegister[mailbox.filter_index].FR2 = mailbox.filter_bank2;
 8000302:	4920      	ldr	r1, [pc, #128]	; (8000384 <CAN_Init+0x204>)
 8000304:	693b      	ldr	r3, [r7, #16]
 8000306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000308:	3348      	adds	r3, #72	; 0x48
 800030a:	00db      	lsls	r3, r3, #3
 800030c:	440b      	add	r3, r1
 800030e:	605a      	str	r2, [r3, #4]
	CAN1 -> FA1R |= 1 << mailbox.filter_index;
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <CAN_Init+0x204>)
 8000312:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000316:	693a      	ldr	r2, [r7, #16]
 8000318:	2101      	movs	r1, #1
 800031a:	fa01 f202 	lsl.w	r2, r1, r2
 800031e:	4611      	mov	r1, r2
 8000320:	4a18      	ldr	r2, [pc, #96]	; (8000384 <CAN_Init+0x204>)
 8000322:	430b      	orrs	r3, r1
 8000324:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	CAN1 -> FMR &= ~CAN_FMR_FINIT;
 8000328:	4b16      	ldr	r3, [pc, #88]	; (8000384 <CAN_Init+0x204>)
 800032a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800032e:	4a15      	ldr	r2, [pc, #84]	; (8000384 <CAN_Init+0x204>)
 8000330:	f023 0301 	bic.w	r3, r3, #1
 8000334:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 -> MCR &= ~CAN_MCR_INRQ;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <CAN_Init+0x204>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a11      	ldr	r2, [pc, #68]	; (8000384 <CAN_Init+0x204>)
 800033e:	f023 0301 	bic.w	r3, r3, #1
 8000342:	6013      	str	r3, [r2, #0]
	CAN1 -> MCR &= ~CAN_MCR_SLEEP;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <CAN_Init+0x204>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <CAN_Init+0x204>)
 800034a:	f023 0302 	bic.w	r3, r3, #2
 800034e:	6013      	str	r3, [r2, #0]
	while((CAN1->MSR & CAN_MSR_INAK));
 8000350:	bf00      	nop
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <CAN_Init+0x204>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f9      	bne.n	8000352 <CAN_Init+0x1d2>
	while((CAN1->MSR & CAN_MSR_SLAK));
 800035e:	bf00      	nop
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <CAN_Init+0x204>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	f003 0302 	and.w	r3, r3, #2
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1f9      	bne.n	8000360 <CAN_Init+0x1e0>


}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000376:	b004      	add	sp, #16
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40010800 	.word	0x40010800
 8000384:	40006400 	.word	0x40006400

08000388 <CAN_TX_Payload>:




void CAN_TX_Payload(CAN_Config mailbox)
{
 8000388:	b084      	sub	sp, #16
 800038a:	b580      	push	{r7, lr}
 800038c:	b088      	sub	sp, #32
 800038e:	af00      	add	r7, sp, #0
 8000390:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000394:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int code;
//	int code = (0x3000000 && (CAN1 -> TSR & CAN_TSR_CODE)) >> CAN_TSR_CODE_Pos;

	code = next_mailbox;
 8000398:	4b9a      	ldr	r3, [pc, #616]	; (8000604 <CAN_TX_Payload+0x27c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	61fb      	str	r3, [r7, #28]

	switch (code) {
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	f000 817d 	beq.w	80006a0 <CAN_TX_Payload+0x318>
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	f300 8228 	bgt.w	80007fe <CAN_TX_Payload+0x476>
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d004      	beq.n	80003be <CAN_TX_Payload+0x36>
 80003b4:	69fb      	ldr	r3, [r7, #28]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	f000 80b3 	beq.w	8000522 <CAN_TX_Payload+0x19a>
			}
			next_mailbox = 0;
		}
		break;
	}
}
 80003bc:	e21f      	b.n	80007fe <CAN_TX_Payload+0x476>
			printConsole("Mailbox 1 \r\n");
 80003be:	4892      	ldr	r0, [pc, #584]	; (8000608 <CAN_TX_Payload+0x280>)
 80003c0:	f000 fa68 	bl	8000894 <printConsole>
			if(mailbox.TX_ID_Type == CAN_ID_Standard)
 80003c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d10c      	bne.n	80003e4 <CAN_TX_Payload+0x5c>
				CAN1 -> sTxMailBox[0].TIR  = mailbox.TX_ID << 21;
 80003ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80003cc:	055a      	lsls	r2, r3, #21
 80003ce:	4b8f      	ldr	r3, [pc, #572]	; (800060c <CAN_TX_Payload+0x284>)
 80003d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				CAN1 -> sTxMailBox[0].TIR  &= ~CAN_TI0R_EXID;
 80003d4:	4b8d      	ldr	r3, [pc, #564]	; (800060c <CAN_TX_Payload+0x284>)
 80003d6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80003da:	498c      	ldr	r1, [pc, #560]	; (800060c <CAN_TX_Payload+0x284>)
 80003dc:	4b8c      	ldr	r3, [pc, #560]	; (8000610 <CAN_TX_Payload+0x288>)
 80003de:	4013      	ands	r3, r2
 80003e0:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
			if(mailbox.TX_ID_Type == CAN_ID_Extended)
 80003e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003e6:	2b0a      	cmp	r3, #10
 80003e8:	d10c      	bne.n	8000404 <CAN_TX_Payload+0x7c>
				CAN1 -> sTxMailBox[0].TIR  = mailbox.TX_ID << 3;
 80003ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80003ec:	00da      	lsls	r2, r3, #3
 80003ee:	4b87      	ldr	r3, [pc, #540]	; (800060c <CAN_TX_Payload+0x284>)
 80003f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				CAN1 -> sTxMailBox[0].TIR  |= 1 << 2;
 80003f4:	4b85      	ldr	r3, [pc, #532]	; (800060c <CAN_TX_Payload+0x284>)
 80003f6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80003fa:	4a84      	ldr	r2, [pc, #528]	; (800060c <CAN_TX_Payload+0x284>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if(mailbox.TX_Frame_Type == CAN_Frame_Data)
 8000404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000406:	2b00      	cmp	r3, #0
 8000408:	d107      	bne.n	800041a <CAN_TX_Payload+0x92>
				CAN1 -> sTxMailBox[0].TIR  &= ~CAN_TI0R_RTR;
 800040a:	4b80      	ldr	r3, [pc, #512]	; (800060c <CAN_TX_Payload+0x284>)
 800040c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000410:	4a7e      	ldr	r2, [pc, #504]	; (800060c <CAN_TX_Payload+0x284>)
 8000412:	f023 0302 	bic.w	r3, r3, #2
 8000416:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if(mailbox.TX_Frame_Type == CAN_Frame_Remote)
 800041a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800041c:	2b0a      	cmp	r3, #10
 800041e:	d107      	bne.n	8000430 <CAN_TX_Payload+0xa8>
				CAN1 -> sTxMailBox[0].TIR  |= CAN_TI0R_RTR;
 8000420:	4b7a      	ldr	r3, [pc, #488]	; (800060c <CAN_TX_Payload+0x284>)
 8000422:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000426:	4a79      	ldr	r2, [pc, #484]	; (800060c <CAN_TX_Payload+0x284>)
 8000428:	f043 0302 	orr.w	r3, r3, #2
 800042c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if(mailbox.timestamp_enable == CAN_Timestamp_Enable)
 8000430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000432:	2b01      	cmp	r3, #1
 8000434:	d133      	bne.n	800049e <CAN_TX_Payload+0x116>
				CAN1 -> sTxMailBox[0].TDTR = mailbox.TX_data_length | CAN_TDT0R_TGT;
 8000436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000438:	4a74      	ldr	r2, [pc, #464]	; (800060c <CAN_TX_Payload+0x284>)
 800043a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800043e:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
				CAN1 -> sTxMailBox[0].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
 8000442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000444:	061a      	lsls	r2, r3, #24
 8000446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000448:	041b      	lsls	r3, r3, #16
 800044a:	431a      	orrs	r2, r3
 800044c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800044e:	021b      	lsls	r3, r3, #8
 8000450:	431a      	orrs	r2, r3
 8000452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000454:	431a      	orrs	r2, r3
 8000456:	4b6d      	ldr	r3, [pc, #436]	; (800060c <CAN_TX_Payload+0x284>)
 8000458:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
				CAN1 -> sTxMailBox[0].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 ;
 800045c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800045e:	061a      	lsls	r2, r3, #24
 8000460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000462:	041b      	lsls	r3, r3, #16
 8000464:	431a      	orrs	r2, r3
 8000466:	4b69      	ldr	r3, [pc, #420]	; (800060c <CAN_TX_Payload+0x284>)
 8000468:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
				CAN1 -> sTxMailBox[0].TIR  |= CAN_TI0R_TXRQ;
 800046c:	4b67      	ldr	r3, [pc, #412]	; (800060c <CAN_TX_Payload+0x284>)
 800046e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000472:	4a66      	ldr	r2, [pc, #408]	; (800060c <CAN_TX_Payload+0x284>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
				volatile int attempt = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
				while(CAN1->sTxMailBox[0].TIR & 0x1UL && attempt++ < 1000000);
 8000480:	bf00      	nop
 8000482:	4b62      	ldr	r3, [pc, #392]	; (800060c <CAN_TX_Payload+0x284>)
 8000484:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d044      	beq.n	800051a <CAN_TX_Payload+0x192>
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	61ba      	str	r2, [r7, #24]
 8000496:	4a5f      	ldr	r2, [pc, #380]	; (8000614 <CAN_TX_Payload+0x28c>)
 8000498:	4293      	cmp	r3, r2
 800049a:	ddf2      	ble.n	8000482 <CAN_TX_Payload+0xfa>
 800049c:	e03d      	b.n	800051a <CAN_TX_Payload+0x192>
				CAN1 -> sTxMailBox[0].TDTR = mailbox.TX_data_length;
 800049e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80004a0:	4b5a      	ldr	r3, [pc, #360]	; (800060c <CAN_TX_Payload+0x284>)
 80004a2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
				CAN1 -> sTxMailBox[0].TDTR &= ~CAN_TDT0R_TGT;
 80004a6:	4b59      	ldr	r3, [pc, #356]	; (800060c <CAN_TX_Payload+0x284>)
 80004a8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80004ac:	4a57      	ldr	r2, [pc, #348]	; (800060c <CAN_TX_Payload+0x284>)
 80004ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b2:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
				CAN1 -> sTxMailBox[0].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
 80004b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80004b8:	061a      	lsls	r2, r3, #24
 80004ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80004bc:	041b      	lsls	r3, r3, #16
 80004be:	431a      	orrs	r2, r3
 80004c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80004c2:	021b      	lsls	r3, r3, #8
 80004c4:	431a      	orrs	r2, r3
 80004c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80004c8:	431a      	orrs	r2, r3
 80004ca:	4b50      	ldr	r3, [pc, #320]	; (800060c <CAN_TX_Payload+0x284>)
 80004cc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
				CAN1 -> sTxMailBox[0].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 | mailbox.TX_data[1] << 8 | mailbox.TX_data[0] << 0;
 80004d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004d2:	061a      	lsls	r2, r3, #24
 80004d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80004d6:	041b      	lsls	r3, r3, #16
 80004d8:	431a      	orrs	r2, r3
 80004da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	431a      	orrs	r2, r3
 80004e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80004e2:	431a      	orrs	r2, r3
 80004e4:	4b49      	ldr	r3, [pc, #292]	; (800060c <CAN_TX_Payload+0x284>)
 80004e6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
				CAN1 -> sTxMailBox[0].TIR  |= CAN_TI0R_TXRQ;
 80004ea:	4b48      	ldr	r3, [pc, #288]	; (800060c <CAN_TX_Payload+0x284>)
 80004ec:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80004f0:	4a46      	ldr	r2, [pc, #280]	; (800060c <CAN_TX_Payload+0x284>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
				volatile int attempt = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
				while(CAN1->sTxMailBox[0].TIR & 0x1UL && attempt++ < 1000000);
 80004fe:	bf00      	nop
 8000500:	4b42      	ldr	r3, [pc, #264]	; (800060c <CAN_TX_Payload+0x284>)
 8000502:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	2b00      	cmp	r3, #0
 800050c:	d005      	beq.n	800051a <CAN_TX_Payload+0x192>
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	1c5a      	adds	r2, r3, #1
 8000512:	617a      	str	r2, [r7, #20]
 8000514:	4a3f      	ldr	r2, [pc, #252]	; (8000614 <CAN_TX_Payload+0x28c>)
 8000516:	4293      	cmp	r3, r2
 8000518:	ddf2      	ble.n	8000500 <CAN_TX_Payload+0x178>
			next_mailbox = 1;
 800051a:	4b3a      	ldr	r3, [pc, #232]	; (8000604 <CAN_TX_Payload+0x27c>)
 800051c:	2201      	movs	r2, #1
 800051e:	601a      	str	r2, [r3, #0]
			break;
 8000520:	e16d      	b.n	80007fe <CAN_TX_Payload+0x476>
			printConsole("Mailbox 2 \r\n");
 8000522:	483d      	ldr	r0, [pc, #244]	; (8000618 <CAN_TX_Payload+0x290>)
 8000524:	f000 f9b6 	bl	8000894 <printConsole>
			if(mailbox.TX_ID_Type == CAN_ID_Standard)
 8000528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10c      	bne.n	8000548 <CAN_TX_Payload+0x1c0>
				CAN1 -> sTxMailBox[1].TIR  = mailbox.TX_ID << 21;
 800052e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000530:	055a      	lsls	r2, r3, #21
 8000532:	4b36      	ldr	r3, [pc, #216]	; (800060c <CAN_TX_Payload+0x284>)
 8000534:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
				CAN1 -> sTxMailBox[1].TIR  &= ~CAN_TI1R_EXID;
 8000538:	4b34      	ldr	r3, [pc, #208]	; (800060c <CAN_TX_Payload+0x284>)
 800053a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800053e:	4933      	ldr	r1, [pc, #204]	; (800060c <CAN_TX_Payload+0x284>)
 8000540:	4b33      	ldr	r3, [pc, #204]	; (8000610 <CAN_TX_Payload+0x288>)
 8000542:	4013      	ands	r3, r2
 8000544:	f8c1 3190 	str.w	r3, [r1, #400]	; 0x190
			if(mailbox.TX_ID_Type == CAN_ID_Extended)
 8000548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800054a:	2b0a      	cmp	r3, #10
 800054c:	d10c      	bne.n	8000568 <CAN_TX_Payload+0x1e0>
				CAN1 -> sTxMailBox[1].TIR  = mailbox.TX_ID << 3;
 800054e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000550:	00da      	lsls	r2, r3, #3
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <CAN_TX_Payload+0x284>)
 8000554:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
				CAN1 -> sTxMailBox[1].TIR  |= 1 << 2;
 8000558:	4b2c      	ldr	r3, [pc, #176]	; (800060c <CAN_TX_Payload+0x284>)
 800055a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800055e:	4a2b      	ldr	r2, [pc, #172]	; (800060c <CAN_TX_Payload+0x284>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			if(mailbox.TX_Frame_Type == CAN_Frame_Data)
 8000568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800056a:	2b00      	cmp	r3, #0
 800056c:	d107      	bne.n	800057e <CAN_TX_Payload+0x1f6>
				CAN1 -> sTxMailBox[1].TIR  &= ~CAN_TI1R_RTR;
 800056e:	4b27      	ldr	r3, [pc, #156]	; (800060c <CAN_TX_Payload+0x284>)
 8000570:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000574:	4a25      	ldr	r2, [pc, #148]	; (800060c <CAN_TX_Payload+0x284>)
 8000576:	f023 0302 	bic.w	r3, r3, #2
 800057a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			if(mailbox.TX_Frame_Type == CAN_Frame_Remote)
 800057e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000580:	2b0a      	cmp	r3, #10
 8000582:	d107      	bne.n	8000594 <CAN_TX_Payload+0x20c>
				CAN1 -> sTxMailBox[1].TIR  |= CAN_TI1R_RTR;
 8000584:	4b21      	ldr	r3, [pc, #132]	; (800060c <CAN_TX_Payload+0x284>)
 8000586:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800058a:	4a20      	ldr	r2, [pc, #128]	; (800060c <CAN_TX_Payload+0x284>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			if(mailbox.timestamp_enable == CAN_Timestamp_Enable)
 8000594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000596:	2b01      	cmp	r3, #1
 8000598:	d140      	bne.n	800061c <CAN_TX_Payload+0x294>
				CAN1 -> sTxMailBox[1].TDTR = mailbox.TX_data_length | CAN_TDT1R_TGT;
 800059a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <CAN_TX_Payload+0x284>)
 800059e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a2:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
				CAN1 -> sTxMailBox[1].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
 80005a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005a8:	061a      	lsls	r2, r3, #24
 80005aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005ac:	041b      	lsls	r3, r3, #16
 80005ae:	431a      	orrs	r2, r3
 80005b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005b2:	021b      	lsls	r3, r3, #8
 80005b4:	431a      	orrs	r2, r3
 80005b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <CAN_TX_Payload+0x284>)
 80005bc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
				CAN1 -> sTxMailBox[1].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 ;
 80005c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005c2:	061a      	lsls	r2, r3, #24
 80005c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005c6:	041b      	lsls	r3, r3, #16
 80005c8:	431a      	orrs	r2, r3
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <CAN_TX_Payload+0x284>)
 80005cc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				CAN1 -> sTxMailBox[1].TIR  |= CAN_TI1R_TXRQ;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <CAN_TX_Payload+0x284>)
 80005d2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005d6:	4a0d      	ldr	r2, [pc, #52]	; (800060c <CAN_TX_Payload+0x284>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
				volatile int attempt = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
				while(CAN1->sTxMailBox[0].TIR & 0x1UL && attempt++ < 1000000);
 80005e4:	bf00      	nop
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <CAN_TX_Payload+0x284>)
 80005e8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d051      	beq.n	8000698 <CAN_TX_Payload+0x310>
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	613a      	str	r2, [r7, #16]
 80005fa:	4a06      	ldr	r2, [pc, #24]	; (8000614 <CAN_TX_Payload+0x28c>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	ddf2      	ble.n	80005e6 <CAN_TX_Payload+0x25e>
 8000600:	e04a      	b.n	8000698 <CAN_TX_Payload+0x310>
 8000602:	bf00      	nop
 8000604:	20000084 	.word	0x20000084
 8000608:	08001968 	.word	0x08001968
 800060c:	40006400 	.word	0x40006400
 8000610:	ffe00007 	.word	0xffe00007
 8000614:	000f423f 	.word	0x000f423f
 8000618:	08001978 	.word	0x08001978
				CAN1 -> sTxMailBox[1].TDTR = mailbox.TX_data_length;
 800061c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800061e:	4b7b      	ldr	r3, [pc, #492]	; (800080c <CAN_TX_Payload+0x484>)
 8000620:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
				CAN1 -> sTxMailBox[1].TDTR &= ~CAN_TDT1R_TGT;
 8000624:	4b79      	ldr	r3, [pc, #484]	; (800080c <CAN_TX_Payload+0x484>)
 8000626:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800062a:	4a78      	ldr	r2, [pc, #480]	; (800080c <CAN_TX_Payload+0x484>)
 800062c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000630:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
				CAN1 -> sTxMailBox[1].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
 8000634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000636:	061a      	lsls	r2, r3, #24
 8000638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800063a:	041b      	lsls	r3, r3, #16
 800063c:	431a      	orrs	r2, r3
 800063e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	431a      	orrs	r2, r3
 8000644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000646:	431a      	orrs	r2, r3
 8000648:	4b70      	ldr	r3, [pc, #448]	; (800080c <CAN_TX_Payload+0x484>)
 800064a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
				CAN1 -> sTxMailBox[1].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 | mailbox.TX_data[1] << 8 | mailbox.TX_data[0] << 0;
 800064e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000650:	061a      	lsls	r2, r3, #24
 8000652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000654:	041b      	lsls	r3, r3, #16
 8000656:	431a      	orrs	r2, r3
 8000658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	431a      	orrs	r2, r3
 800065e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000660:	431a      	orrs	r2, r3
 8000662:	4b6a      	ldr	r3, [pc, #424]	; (800080c <CAN_TX_Payload+0x484>)
 8000664:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				CAN1 -> sTxMailBox[1].TIR  |= CAN_TI1R_TXRQ;
 8000668:	4b68      	ldr	r3, [pc, #416]	; (800080c <CAN_TX_Payload+0x484>)
 800066a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800066e:	4a67      	ldr	r2, [pc, #412]	; (800080c <CAN_TX_Payload+0x484>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
				volatile int attempt = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
				while(CAN1->sTxMailBox[1].TIR & 0x1UL && attempt++ < 1000000);
 800067c:	bf00      	nop
 800067e:	4b63      	ldr	r3, [pc, #396]	; (800080c <CAN_TX_Payload+0x484>)
 8000680:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d005      	beq.n	8000698 <CAN_TX_Payload+0x310>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	60fa      	str	r2, [r7, #12]
 8000692:	4a5f      	ldr	r2, [pc, #380]	; (8000810 <CAN_TX_Payload+0x488>)
 8000694:	4293      	cmp	r3, r2
 8000696:	ddf2      	ble.n	800067e <CAN_TX_Payload+0x2f6>
			next_mailbox = 2;
 8000698:	4b5e      	ldr	r3, [pc, #376]	; (8000814 <CAN_TX_Payload+0x48c>)
 800069a:	2202      	movs	r2, #2
 800069c:	601a      	str	r2, [r3, #0]
		break;
 800069e:	e0ae      	b.n	80007fe <CAN_TX_Payload+0x476>
			if(mailbox.TX_ID_Type == CAN_ID_Standard)
 80006a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10c      	bne.n	80006c0 <CAN_TX_Payload+0x338>
				CAN1 -> sTxMailBox[2].TIR  = mailbox.TX_ID << 21;
 80006a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006a8:	055a      	lsls	r2, r3, #21
 80006aa:	4b58      	ldr	r3, [pc, #352]	; (800080c <CAN_TX_Payload+0x484>)
 80006ac:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
				CAN1 -> sTxMailBox[2].TIR  &= ~CAN_TI2R_EXID;
 80006b0:	4b56      	ldr	r3, [pc, #344]	; (800080c <CAN_TX_Payload+0x484>)
 80006b2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 80006b6:	4955      	ldr	r1, [pc, #340]	; (800080c <CAN_TX_Payload+0x484>)
 80006b8:	4b57      	ldr	r3, [pc, #348]	; (8000818 <CAN_TX_Payload+0x490>)
 80006ba:	4013      	ands	r3, r2
 80006bc:	f8c1 31a0 	str.w	r3, [r1, #416]	; 0x1a0
			if(mailbox.TX_ID_Type == CAN_ID_Extended)
 80006c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d10c      	bne.n	80006e0 <CAN_TX_Payload+0x358>
				CAN1 -> sTxMailBox[2].TIR  = mailbox.TX_ID << 3;
 80006c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006c8:	00da      	lsls	r2, r3, #3
 80006ca:	4b50      	ldr	r3, [pc, #320]	; (800080c <CAN_TX_Payload+0x484>)
 80006cc:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
				CAN1 -> sTxMailBox[2].TIR  |= 1 << 2;
 80006d0:	4b4e      	ldr	r3, [pc, #312]	; (800080c <CAN_TX_Payload+0x484>)
 80006d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006d6:	4a4d      	ldr	r2, [pc, #308]	; (800080c <CAN_TX_Payload+0x484>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
			if(mailbox.TX_Frame_Type == CAN_Frame_Data)
 80006e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d107      	bne.n	80006f6 <CAN_TX_Payload+0x36e>
				CAN1 -> sTxMailBox[2].TIR  &= ~CAN_TI2R_RTR;
 80006e6:	4b49      	ldr	r3, [pc, #292]	; (800080c <CAN_TX_Payload+0x484>)
 80006e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006ec:	4a47      	ldr	r2, [pc, #284]	; (800080c <CAN_TX_Payload+0x484>)
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
			if(mailbox.TX_Frame_Type == CAN_Frame_Remote)
 80006f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006f8:	2b0a      	cmp	r3, #10
 80006fa:	d107      	bne.n	800070c <CAN_TX_Payload+0x384>
				CAN1 -> sTxMailBox[2].TIR  |= CAN_TI2R_RTR;
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <CAN_TX_Payload+0x484>)
 80006fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000702:	4a42      	ldr	r2, [pc, #264]	; (800080c <CAN_TX_Payload+0x484>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
			if(mailbox.timestamp_enable == CAN_Timestamp_Enable)
 800070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070e:	2b01      	cmp	r3, #1
 8000710:	d133      	bne.n	800077a <CAN_TX_Payload+0x3f2>
				CAN1 -> sTxMailBox[2].TDTR = mailbox.TX_data_length | CAN_TDT2R_TGT;
 8000712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000714:	4a3d      	ldr	r2, [pc, #244]	; (800080c <CAN_TX_Payload+0x484>)
 8000716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800071a:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
				CAN1 -> sTxMailBox[2].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
 800071e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000720:	061a      	lsls	r2, r3, #24
 8000722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	431a      	orrs	r2, r3
 8000728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	431a      	orrs	r2, r3
 800072e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000730:	431a      	orrs	r2, r3
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <CAN_TX_Payload+0x484>)
 8000734:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
				CAN1 -> sTxMailBox[2].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 ;
 8000738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800073a:	061a      	lsls	r2, r3, #24
 800073c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800073e:	041b      	lsls	r3, r3, #16
 8000740:	431a      	orrs	r2, r3
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <CAN_TX_Payload+0x484>)
 8000744:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
				CAN1 -> sTxMailBox[2].TIR  |= CAN_TI2R_TXRQ;
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <CAN_TX_Payload+0x484>)
 800074a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800074e:	4a2f      	ldr	r2, [pc, #188]	; (800080c <CAN_TX_Payload+0x484>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
				volatile int attempt = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
				while(CAN1->sTxMailBox[2].TIR & 0x1UL && attempt++ < 1000000);
 800075c:	bf00      	nop
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <CAN_TX_Payload+0x484>)
 8000760:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d044      	beq.n	80007f6 <CAN_TX_Payload+0x46e>
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	60ba      	str	r2, [r7, #8]
 8000772:	4a27      	ldr	r2, [pc, #156]	; (8000810 <CAN_TX_Payload+0x488>)
 8000774:	4293      	cmp	r3, r2
 8000776:	ddf2      	ble.n	800075e <CAN_TX_Payload+0x3d6>
 8000778:	e03d      	b.n	80007f6 <CAN_TX_Payload+0x46e>
				CAN1 -> sTxMailBox[2].TDTR = mailbox.TX_data_length;
 800077a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <CAN_TX_Payload+0x484>)
 800077e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
				CAN1 -> sTxMailBox[2].TDTR &= ~CAN_TDT1R_TGT;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <CAN_TX_Payload+0x484>)
 8000784:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <CAN_TX_Payload+0x484>)
 800078a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800078e:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
				CAN1 -> sTxMailBox[2].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
 8000792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000794:	061a      	lsls	r2, r3, #24
 8000796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000798:	041b      	lsls	r3, r3, #16
 800079a:	431a      	orrs	r2, r3
 800079c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	431a      	orrs	r2, r3
 80007a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007a4:	431a      	orrs	r2, r3
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <CAN_TX_Payload+0x484>)
 80007a8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
				CAN1 -> sTxMailBox[2].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 | mailbox.TX_data[1] << 8 | mailbox.TX_data[0] << 0;
 80007ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ae:	061a      	lsls	r2, r3, #24
 80007b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b2:	041b      	lsls	r3, r3, #16
 80007b4:	431a      	orrs	r2, r3
 80007b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	431a      	orrs	r2, r3
 80007bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007be:	431a      	orrs	r2, r3
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <CAN_TX_Payload+0x484>)
 80007c2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
				CAN1 -> sTxMailBox[2].TIR  |= CAN_TI2R_TXRQ;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <CAN_TX_Payload+0x484>)
 80007c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007cc:	4a0f      	ldr	r2, [pc, #60]	; (800080c <CAN_TX_Payload+0x484>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
				volatile int attempt = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
				while(CAN1->sTxMailBox[2].TIR & 0x1UL && attempt++ < 1000000);
 80007da:	bf00      	nop
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <CAN_TX_Payload+0x484>)
 80007de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d005      	beq.n	80007f6 <CAN_TX_Payload+0x46e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <CAN_TX_Payload+0x488>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	ddf2      	ble.n	80007dc <CAN_TX_Payload+0x454>
			next_mailbox = 0;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <CAN_TX_Payload+0x48c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
		break;
 80007fc:	bf00      	nop
}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000808:	b004      	add	sp, #16
 800080a:	4770      	bx	lr
 800080c:	40006400 	.word	0x40006400
 8000810:	000f423f 	.word	0x000f423f
 8000814:	20000084 	.word	0x20000084
 8000818:	ffe00007 	.word	0xffe00007

0800081c <Console_Init>:

#include "Console.h"


void Console_Init(int32_t baudrate)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <Console_Init+0x68>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a16      	ldr	r2, [pc, #88]	; (8000884 <Console_Init+0x68>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6193      	str	r3, [r2, #24]
	GPIO_Pin_Setup(GPIOA, 9, 0b1011);
 8000830:	220b      	movs	r2, #11
 8000832:	2109      	movs	r1, #9
 8000834:	4814      	ldr	r0, [pc, #80]	; (8000888 <Console_Init+0x6c>)
 8000836:	f000 f889 	bl	800094c <GPIO_Pin_Setup>
	GPIO_Pin_Setup(GPIOA, 10, 0b1011);
 800083a:	220b      	movs	r2, #11
 800083c:	210a      	movs	r1, #10
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <Console_Init+0x6c>)
 8000840:	f000 f884 	bl	800094c <GPIO_Pin_Setup>
	USART1 -> CR1 |= USART_CR1_UE;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <Console_Init+0x70>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	4a10      	ldr	r2, [pc, #64]	; (800088c <Console_Init+0x70>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	60d3      	str	r3, [r2, #12]
	USART1 -> BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <Console_Init+0x74>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	fbb3 f3f2 	udiv	r3, r3, r2
 800085c:	011a      	lsls	r2, r3, #4
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <Console_Init+0x70>)
 8000860:	609a      	str	r2, [r3, #8]
	USART1 -> CR1 |= USART_CR1_TE ;
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <Console_Init+0x70>)
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <Console_Init+0x70>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	60d3      	str	r3, [r2, #12]
	USART1 -> CR1 |=  USART_CR1_RE  ;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <Console_Init+0x70>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <Console_Init+0x70>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	60d3      	str	r3, [r2, #12]
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000
 8000888:	40010800 	.word	0x40010800
 800088c:	40013800 	.word	0x40013800
 8000890:	20000000 	.word	0x20000000

08000894 <printConsole>:


void printConsole(char *msg, ...)
{
 8000894:	b40f      	push	{r0, r1, r2, r3}
 8000896:	b580      	push	{r7, lr}
 8000898:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
	char buff[10000];
	va_list args;
	va_start(args, msg);
 80008a0:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80008a4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	3b18      	subs	r3, #24
 80008ae:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	3b18      	subs	r3, #24
 80008b6:	f107 0018 	add.w	r0, r7, #24
 80008ba:	3814      	subs	r0, #20
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80008c2:	f103 0320 	add.w	r3, r3, #32
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	f000 fc2c 	bl	8001124 <vsiprintf>

	for(int i = 0; i<= strlen(buff); i++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80008d2:	f102 0214 	add.w	r2, r2, #20
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	e01d      	b.n	8000916 <printConsole+0x82>
	{
		USART1 -> DR = buff[i];
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	3b14      	subs	r3, #20
 80008e0:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80008e4:	f102 0214 	add.w	r2, r2, #20
 80008e8:	6812      	ldr	r2, [r2, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	781a      	ldrb	r2, [r3, #0]
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <printConsole+0xb4>)
 80008f0:	605a      	str	r2, [r3, #4]
		while (!(USART1->SR & USART_SR_TXE));
 80008f2:	bf00      	nop
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <printConsole+0xb4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0f9      	beq.n	80008f4 <printConsole+0x60>
	for(int i = 0; i<= strlen(buff); i++)
 8000900:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000904:	f103 0314 	add.w	r3, r3, #20
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000910:	f102 0214 	add.w	r2, r2, #20
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	3b14      	subs	r3, #20
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fc27 	bl	8000170 <strlen>
 8000922:	4602      	mov	r2, r0
 8000924:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000928:	f103 0314 	add.w	r3, r3, #20
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	429a      	cmp	r2, r3
 8000930:	d2d3      	bcs.n	80008da <printConsole+0x46>
	}

}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	f507 571c 	add.w	r7, r7, #9984	; 0x2700
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000942:	b004      	add	sp, #16
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40013800 	.word	0x40013800

0800094c <GPIO_Pin_Setup>:
#include "GPIO.h"



void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
 8000958:	4613      	mov	r3, r2
 800095a:	70bb      	strb	r3, [r7, #2]
	if(Port == GPIOA)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a4a      	ldr	r2, [pc, #296]	; (8000a88 <GPIO_Pin_Setup+0x13c>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d12b      	bne.n	80009bc <GPIO_Pin_Setup+0x70>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 8000964:	78bb      	ldrb	r3, [r7, #2]
 8000966:	2b0f      	cmp	r3, #15
 8000968:	d002      	beq.n	8000970 <GPIO_Pin_Setup+0x24>
 800096a:	78bb      	ldrb	r3, [r7, #2]
 800096c:	2b0b      	cmp	r3, #11
 800096e:	d106      	bne.n	800097e <GPIO_Pin_Setup+0x32>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 8000970:	4b46      	ldr	r3, [pc, #280]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a45      	ldr	r2, [pc, #276]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 8000976:	f043 0305 	orr.w	r3, r3, #5
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	e005      	b.n	800098a <GPIO_Pin_Setup+0x3e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800097e:	4b43      	ldr	r3, [pc, #268]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a42      	ldr	r2, [pc, #264]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d80a      	bhi.n	80009a6 <GPIO_Pin_Setup+0x5a>
		{
			Port -> CRL |= function << (4*pin);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	78b9      	ldrb	r1, [r7, #2]
 8000996:	78fa      	ldrb	r2, [r7, #3]
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	e00a      	b.n	80009bc <GPIO_Pin_Setup+0x70>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	78b9      	ldrb	r1, [r7, #2]
 80009ac:	78fa      	ldrb	r2, [r7, #3]
 80009ae:	3a08      	subs	r2, #8
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	fa01 f202 	lsl.w	r2, r1, r2
 80009b6:	431a      	orrs	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	605a      	str	r2, [r3, #4]
		}
	}


	if(Port == GPIOB)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a34      	ldr	r2, [pc, #208]	; (8000a90 <GPIO_Pin_Setup+0x144>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d12b      	bne.n	8000a1c <GPIO_Pin_Setup+0xd0>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 80009c4:	78bb      	ldrb	r3, [r7, #2]
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d002      	beq.n	80009d0 <GPIO_Pin_Setup+0x84>
 80009ca:	78bb      	ldrb	r3, [r7, #2]
 80009cc:	2b0b      	cmp	r3, #11
 80009ce:	d106      	bne.n	80009de <GPIO_Pin_Setup+0x92>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 80009d0:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 80009d6:	f043 0309 	orr.w	r3, r3, #9
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	e005      	b.n	80009ea <GPIO_Pin_Setup+0x9e>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d80a      	bhi.n	8000a06 <GPIO_Pin_Setup+0xba>
		{
			Port -> CRL |= function << (4*pin);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	78b9      	ldrb	r1, [r7, #2]
 80009f6:	78fa      	ldrb	r2, [r7, #3]
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	fa01 f202 	lsl.w	r2, r1, r2
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	e00a      	b.n	8000a1c <GPIO_Pin_Setup+0xd0>
		}
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	78b9      	ldrb	r1, [r7, #2]
 8000a0c:	78fa      	ldrb	r2, [r7, #3]
 8000a0e:	3a08      	subs	r2, #8
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	605a      	str	r2, [r3, #4]
		}
	}

	if(Port == GPIOC)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <GPIO_Pin_Setup+0x148>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d12b      	bne.n	8000a7c <GPIO_Pin_Setup+0x130>
	{
		if((function == ALT_OPEN_DRAIN_OUTPUT) || (function == ALT_PUSH_PULL_OUTPUT))
 8000a24:	78bb      	ldrb	r3, [r7, #2]
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d002      	beq.n	8000a30 <GPIO_Pin_Setup+0xe4>
 8000a2a:	78bb      	ldrb	r3, [r7, #2]
 8000a2c:	2b0b      	cmp	r3, #11
 8000a2e:	d106      	bne.n	8000a3e <GPIO_Pin_Setup+0xf2>
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 8000a36:	f043 0311 	orr.w	r3, r3, #17
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	e005      	b.n	8000a4a <GPIO_Pin_Setup+0xfe>
		}
		else
		{
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <GPIO_Pin_Setup+0x140>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6193      	str	r3, [r2, #24]
		}

		if(pin < 8)
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	2b07      	cmp	r3, #7
 8000a4e:	d80a      	bhi.n	8000a66 <GPIO_Pin_Setup+0x11a>
		{
			Port -> CRL |= function << (4*pin);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	78b9      	ldrb	r1, [r7, #2]
 8000a56:	78fa      	ldrb	r2, [r7, #3]
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	601a      	str	r2, [r3, #0]
		else
		{
			Port -> CRH |= function << (4*(pin - 8));
		}
	}
}
 8000a64:	e00a      	b.n	8000a7c <GPIO_Pin_Setup+0x130>
			Port -> CRH |= function << (4*(pin - 8));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	78b9      	ldrb	r1, [r7, #2]
 8000a6c:	78fa      	ldrb	r2, [r7, #3]
 8000a6e:	3a08      	subs	r2, #8
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	fa01 f202 	lsl.w	r2, r1, r2
 8000a76:	431a      	orrs	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	605a      	str	r2, [r3, #4]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	40011000 	.word	0x40011000

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4906      	ldr	r1, [pc, #24]	; (8000acc <__NVIC_EnableIRQ+0x34>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <SystemAPB1_Clock_Speed>:

#define Use_External_Crystal 1
#define Use_Internal_Crystal 2

__STATIC_INLINE int32_t SystemAPB1_Clock_Speed(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemAPB1_Clock_Speed+0x20>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <SystemAPB1_Clock_Speed+0x24>)
 8000ada:	6852      	ldr	r2, [r2, #4]
 8000adc:	0a12      	lsrs	r2, r2, #8
 8000ade:	f002 0207 	and.w	r2, r2, #7
 8000ae2:	4905      	ldr	r1, [pc, #20]	; (8000af8 <SystemAPB1_Clock_Speed+0x28>)
 8000ae4:	5c8a      	ldrb	r2, [r1, r2]
 8000ae6:	40d3      	lsrs	r3, r2
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000000 	.word	0x20000000
 8000af4:	40021000 	.word	0x40021000
 8000af8:	08001a68 	.word	0x08001a68

08000afc <SystemAPB2_Clock_Speed>:

__STATIC_INLINE int32_t SystemAPB2_Clock_Speed(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemAPB2_Clock_Speed+0x20>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <SystemAPB2_Clock_Speed+0x24>)
 8000b06:	6852      	ldr	r2, [r2, #4]
 8000b08:	0ad2      	lsrs	r2, r2, #11
 8000b0a:	f002 0207 	and.w	r2, r2, #7
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <SystemAPB2_Clock_Speed+0x28>)
 8000b10:	5c8a      	ldrb	r2, [r1, r2]
 8000b12:	40d3      	lsrs	r3, r2
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	08001a68 	.word	0x08001a68

08000b28 <MCU_Clock_Init>:

__STATIC_INLINE void MCU_Clock_Init(int crystal)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	SystemInit();
 8000b30:	f000 fa08 	bl	8000f44 <SystemInit>
	switch (crystal) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d003      	beq.n	8000b42 <MCU_Clock_Init+0x1a>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d052      	beq.n	8000be6 <MCU_Clock_Init+0xbe>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
		}
			break;
	}
}
 8000b40:	e098      	b.n	8000c74 <MCU_Clock_Init+0x14c>
			RCC->CR |= RCC_CR_HSEON ;
 8000b42:	4b4e      	ldr	r3, [pc, #312]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a4d      	ldr	r2, [pc, #308]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4c:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_HSERDY));
 8000b4e:	bf00      	nop
 8000b50:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f9      	beq.n	8000b50 <MCU_Clock_Init+0x28>
			FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 8000b5c:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <MCU_Clock_Init+0x158>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <MCU_Clock_Init+0x158>)
 8000b62:	f043 0314 	orr.w	r3, r3, #20
 8000b66:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000b68:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a43      	ldr	r2, [pc, #268]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 8000b74:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b76:	4a41      	ldr	r2, [pc, #260]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4a3e      	ldr	r2, [pc, #248]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b82:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000b86:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000b88:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a3b      	ldr	r2, [pc, #236]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b92:	6053      	str	r3, [r2, #4]
			RCC->CR |= RCC_CR_PLLON;
 8000b94:	4b39      	ldr	r3, [pc, #228]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a38      	ldr	r2, [pc, #224]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b9e:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_PLLRDY));
 8000ba0:	bf00      	nop
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f9      	beq.n	8000ba2 <MCU_Clock_Init+0x7a>
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000bae:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6053      	str	r3, [r2, #4]
			while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000bba:	bf00      	nop
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f9      	beq.n	8000bbc <MCU_Clock_Init+0x94>
			SystemCoreClockUpdate();
 8000bc8:	f000 f9c2 	bl	8000f50 <SystemCoreClockUpdate>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 8000bcc:	f7ff ff80 	bl	8000ad0 <SystemAPB1_Clock_Speed>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <MCU_Clock_Init+0x15c>)
 8000bd6:	601a      	str	r2, [r3, #0]
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 8000bd8:	f7ff ff90 	bl	8000afc <SystemAPB2_Clock_Speed>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MCU_Clock_Init+0x160>)
 8000be2:	601a      	str	r2, [r3, #0]
			break;
 8000be4:	e046      	b.n	8000c74 <MCU_Clock_Init+0x14c>
			SystemInit();
 8000be6:	f000 f9ad 	bl	8000f44 <SystemInit>
			FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <MCU_Clock_Init+0x158>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <MCU_Clock_Init+0x158>)
 8000bf0:	f043 0314 	orr.w	r3, r3, #20
 8000bf4:	6013      	str	r3, [r2, #0]
			RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4a20      	ldr	r2, [pc, #128]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c00:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c10:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000c14:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c20:	6053      	str	r3, [r2, #4]
			RCC->CR |= RCC_CR_PLLON;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	6013      	str	r3, [r2, #0]
			while(!(RCC->CR & RCC_CR_PLLRDY));
 8000c2e:	bf00      	nop
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f9      	beq.n	8000c30 <MCU_Clock_Init+0x108>
			RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	6053      	str	r3, [r2, #4]
			while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000c48:	bf00      	nop
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MCU_Clock_Init+0x154>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f9      	beq.n	8000c4a <MCU_Clock_Init+0x122>
			SystemCoreClockUpdate();
 8000c56:	f000 f97b 	bl	8000f50 <SystemCoreClockUpdate>
			APB1CLK_SPEED = SystemAPB1_Clock_Speed();
 8000c5a:	f7ff ff39 	bl	8000ad0 <SystemAPB1_Clock_Speed>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MCU_Clock_Init+0x15c>)
 8000c64:	601a      	str	r2, [r3, #0]
			APB2CLK_SPEED = SystemAPB2_Clock_Speed();
 8000c66:	f7ff ff49 	bl	8000afc <SystemAPB2_Clock_Speed>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MCU_Clock_Init+0x160>)
 8000c70:	601a      	str	r2, [r3, #0]
			break;
 8000c72:	bf00      	nop
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40022000 	.word	0x40022000
 8000c84:	20000098 	.word	0x20000098
 8000c88:	20000094 	.word	0x20000094

08000c8c <Delay_Config>:

__STATIC_INLINE uint32_t Delay_Config(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <Delay_Config+0x30>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <Delay_Config+0x30>)
 8000c98:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000c9c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <Delay_Config+0x30>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 5;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <Delay_Config+0x30>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <Delay_Config+0x30>)
 8000caa:	f043 0305 	orr.w	r3, r3, #5
 8000cae:	6013      	str	r3, [r2, #0]
	return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(unsigned long ms)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	unsigned long x = (SystemCoreClock / 1000) * (ms);
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <Delay_ms+0x44>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <Delay_ms+0x48>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	099a      	lsrs	r2, r3, #6
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = x ;
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <Delay_ms+0x4c>)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <Delay_ms+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000ce8:	bf00      	nop
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <Delay_ms+0x4c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f9      	beq.n	8000cea <Delay_ms+0x2a>
	return (0UL);                                                     /* Function successful */
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000000 	.word	0x20000000
 8000d08:	10624dd3 	.word	0x10624dd3
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <CAN_TX>:


void CAN1_SCE_IRQHandler(void);

void CAN_TX(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b0bd      	sub	sp, #244	; 0xf4
 8000d14:	af3c      	add	r7, sp, #240	; 0xf0
    //General Configutation
    payload.baudrate = CAN_BAUDRATE_1000_KBPS;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <CAN_TX+0xac>)
 8000d18:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <CAN_TX+0xb0>)
 8000d1a:	601a      	str	r2, [r3, #0]
    payload.timestamp_enable = CAN_Timestamp_Disable;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <CAN_TX+0xac>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
    //Filter Configuration
    payload.filter_index = 0;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <CAN_TX+0xac>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
    payload.filter_scale = CAN_Filter_Scale_32bit;
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <CAN_TX+0xac>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	611a      	str	r2, [r3, #16]
    payload.filter_type = CAN_FILTER_MASK_MODE;
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <CAN_TX+0xac>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    payload.filter_bank_index = 0;
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <CAN_TX+0xac>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
    payload.filter_bank1 = 0x00;
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <CAN_TX+0xac>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
    payload.filter_bank2 = 0x00;
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <CAN_TX+0xac>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
    //TX
    payload.baudrate = CAN_BAUDRATE_1000_KBPS;
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <CAN_TX+0xac>)
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <CAN_TX+0xb0>)
 8000d4a:	601a      	str	r2, [r3, #0]
    payload.TX_Mailbox_ID = CAN_TX_Mailbox_1;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <CAN_TX+0xac>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
    payload.TX_Frame_Type = CAN_Frame_Data;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <CAN_TX+0xac>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
    payload.TX_ID_Type = CAN_ID_Standard;
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <CAN_TX+0xac>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
    payload.TX_ID = 0x201;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <CAN_TX+0xac>)
 8000d60:	f240 2201 	movw	r2, #513	; 0x201
 8000d64:	631a      	str	r2, [r3, #48]	; 0x30
    payload.TX_data_length = 8;
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <CAN_TX+0xac>)
 8000d68:	2208      	movs	r2, #8
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
    payload.TX_data[0] = 0x01;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <CAN_TX+0xac>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	639a      	str	r2, [r3, #56]	; 0x38
    payload.TX_data[1] = 0x02;
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <CAN_TX+0xac>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
    payload.TX_data[2] = 0x03;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <CAN_TX+0xac>)
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
    payload.TX_data[3] = 0x04;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <CAN_TX+0xac>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	645a      	str	r2, [r3, #68]	; 0x44
    payload.TX_data[4] = 0x05;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <CAN_TX+0xac>)
 8000d86:	2205      	movs	r2, #5
 8000d88:	649a      	str	r2, [r3, #72]	; 0x48
    payload.TX_data[5] = 0x06;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <CAN_TX+0xac>)
 8000d8c:	2206      	movs	r2, #6
 8000d8e:	64da      	str	r2, [r3, #76]	; 0x4c
    payload.TX_data[6] = 0x07;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <CAN_TX+0xac>)
 8000d92:	2207      	movs	r2, #7
 8000d94:	651a      	str	r2, [r3, #80]	; 0x50
    payload.TX_data[7] = 0x08;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <CAN_TX+0xac>)
 8000d98:	2208      	movs	r2, #8
 8000d9a:	655a      	str	r2, [r3, #84]	; 0x54

    CAN_Init(payload);
 8000d9c:	4c07      	ldr	r4, [pc, #28]	; (8000dbc <CAN_TX+0xac>)
 8000d9e:	4668      	mov	r0, sp
 8000da0:	f104 0310 	add.w	r3, r4, #16
 8000da4:	22f0      	movs	r2, #240	; 0xf0
 8000da6:	4619      	mov	r1, r3
 8000da8:	f000 f998 	bl	80010dc <memcpy>
 8000dac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db0:	f7ff f9e6 	bl	8000180 <CAN_Init>
}
 8000db4:	bf00      	nop
 8000db6:	3704      	adds	r7, #4
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	2000009c 	.word	0x2000009c
 8000dc0:	001e0001 	.word	0x001e0001

08000dc4 <main>:



int main(void)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b0bd      	sub	sp, #244	; 0xf4
 8000dc8:	af3c      	add	r7, sp, #240	; 0xf0
    MCU_Clock_Init(Use_External_Crystal);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff feac 	bl	8000b28 <MCU_Clock_Init>
    Delay_Config();
 8000dd0:	f7ff ff5c 	bl	8000c8c <Delay_Config>
    Console_Init(115200);
 8000dd4:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000dd8:	f7ff fd20 	bl	800081c <Console_Init>
    GPIO_Pin_Setup(GPIOC, 13, GEN_PUSH_PULL_OUTPUT);
 8000ddc:	2203      	movs	r2, #3
 8000dde:	210d      	movs	r1, #13
 8000de0:	4833      	ldr	r0, [pc, #204]	; (8000eb0 <main+0xec>)
 8000de2:	f7ff fdb3 	bl	800094c <GPIO_Pin_Setup>
    GPIOC -> BSRR |= GPIO_BSRR_BS13;
 8000de6:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <main+0xec>)
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	4a31      	ldr	r2, [pc, #196]	; (8000eb0 <main+0xec>)
 8000dec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000df0:	6113      	str	r3, [r2, #16]

    CAN_TX();
 8000df2:	f7ff ff8d 	bl	8000d10 <CAN_TX>
	printConsole("MCR = %"PRIx32"\r\n",CAN1 -> MCR);
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <main+0xf0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	482e      	ldr	r0, [pc, #184]	; (8000eb8 <main+0xf4>)
 8000dfe:	f7ff fd49 	bl	8000894 <printConsole>
	printConsole("MSR = %"PRIx32"\r\n",CAN1 -> MSR);
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <main+0xf0>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4619      	mov	r1, r3
 8000e08:	482c      	ldr	r0, [pc, #176]	; (8000ebc <main+0xf8>)
 8000e0a:	f7ff fd43 	bl	8000894 <printConsole>
	printConsole("TSR = %"PRIx32"\r\n",CAN1 -> TSR);
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <main+0xf0>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	4619      	mov	r1, r3
 8000e14:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <main+0xfc>)
 8000e16:	f7ff fd3d 	bl	8000894 <printConsole>
	printConsole("ESR = %"PRIx32"\r\n",CAN1 -> ESR);
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <main+0xf0>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4828      	ldr	r0, [pc, #160]	; (8000ec4 <main+0x100>)
 8000e22:	f7ff fd37 	bl	8000894 <printConsole>
	CAN_TX_Payload(payload);
 8000e26:	4c28      	ldr	r4, [pc, #160]	; (8000ec8 <main+0x104>)
 8000e28:	4668      	mov	r0, sp
 8000e2a:	f104 0310 	add.w	r3, r4, #16
 8000e2e:	22f0      	movs	r2, #240	; 0xf0
 8000e30:	4619      	mov	r1, r3
 8000e32:	f000 f953 	bl	80010dc <memcpy>
 8000e36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e3a:	f7ff faa5 	bl	8000388 <CAN_TX_Payload>

	NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e3e:	2016      	movs	r0, #22
 8000e40:	f7ff fe2a 	bl	8000a98 <__NVIC_EnableIRQ>

	for(;;)
	{
		GPIOC -> BSRR |= GPIO_BSRR_BS13;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <main+0xec>)
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <main+0xec>)
 8000e4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e4e:	6113      	str	r3, [r2, #16]
//		CAN_TX_Payload(payload);
		Delay_ms(500);
 8000e50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e54:	f7ff ff34 	bl	8000cc0 <Delay_ms>
//		printConsole("MCR = %"PRIx32"\r\n",CAN1 -> MCR);
//		printConsole("MSR = %"PRIx32"\r\n",CAN1 -> MSR);
		printConsole("TSR = %"PRIx32"\r\n",CAN1 -> TSR);
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <main+0xf0>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <main+0xfc>)
 8000e60:	f7ff fd18 	bl	8000894 <printConsole>
		printConsole("TI0R = %"PRIx32"\r\n",CAN1->sTxMailBox[0].TIR);
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <main+0xf0>)
 8000e66:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <main+0x108>)
 8000e6e:	f7ff fd11 	bl	8000894 <printConsole>
		printConsole("TI1R = %"PRIx32"\r\n",CAN1->sTxMailBox[1].TIR);
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <main+0xf0>)
 8000e74:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <main+0x10c>)
 8000e7c:	f7ff fd0a 	bl	8000894 <printConsole>
		printConsole("TI2R = %"PRIx32"\r\n",CAN1->sTxMailBox[2].TIR);
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <main+0xf0>)
 8000e82:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e86:	4619      	mov	r1, r3
 8000e88:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <main+0x110>)
 8000e8a:	f7ff fd03 	bl	8000894 <printConsole>
		printConsole("ESR = %"PRIx32"\r\n",CAN1 -> ESR);
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <main+0xf0>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4619      	mov	r1, r3
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <main+0x100>)
 8000e96:	f7ff fcfd 	bl	8000894 <printConsole>
//		printConsole("RF1R = %"PRIx32"\r\n",CAN1 -> RF1R);
		GPIOC -> BSRR |= GPIO_BSRR_BR13;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <main+0xec>)
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <main+0xec>)
 8000ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ea4:	6113      	str	r3, [r2, #16]
		Delay_ms(500);
 8000ea6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eaa:	f7ff ff09 	bl	8000cc0 <Delay_ms>
		GPIOC -> BSRR |= GPIO_BSRR_BS13;
 8000eae:	e7c9      	b.n	8000e44 <main+0x80>
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40006400 	.word	0x40006400
 8000eb8:	08001988 	.word	0x08001988
 8000ebc:	08001994 	.word	0x08001994
 8000ec0:	080019a0 	.word	0x080019a0
 8000ec4:	080019ac 	.word	0x080019ac
 8000ec8:	2000009c 	.word	0x2000009c
 8000ecc:	080019b8 	.word	0x080019b8
 8000ed0:	080019c8 	.word	0x080019c8
 8000ed4:	080019d8 	.word	0x080019d8

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f000 f8be 	bl	8001088 <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20005000 	.word	0x20005000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	20000088 	.word	0x20000088
 8000f40:	200001b0 	.word	0x200001b0

08000f44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <SystemCoreClockUpdate+0xd0>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d011      	beq.n	8000f96 <SystemCoreClockUpdate+0x46>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d83a      	bhi.n	8000fee <SystemCoreClockUpdate+0x9e>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <SystemCoreClockUpdate+0x36>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d004      	beq.n	8000f8e <SystemCoreClockUpdate+0x3e>
 8000f84:	e033      	b.n	8000fee <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <SystemCoreClockUpdate+0xd4>)
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <SystemCoreClockUpdate+0xd8>)
 8000f8a:	601a      	str	r2, [r3, #0]
      break;
 8000f8c:	e033      	b.n	8000ff6 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <SystemCoreClockUpdate+0xd4>)
 8000f90:	4a25      	ldr	r2, [pc, #148]	; (8001028 <SystemCoreClockUpdate+0xd8>)
 8000f92:	601a      	str	r2, [r3, #0]
      break;
 8000f94:	e02f      	b.n	8000ff6 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <SystemCoreClockUpdate+0xd0>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f9e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <SystemCoreClockUpdate+0xd0>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa8:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	0c9b      	lsrs	r3, r3, #18
 8000fae:	3302      	adds	r3, #2
 8000fb0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d106      	bne.n	8000fc6 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <SystemCoreClockUpdate+0xdc>)
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <SystemCoreClockUpdate+0xd4>)
 8000fc2:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000fc4:	e017      	b.n	8000ff6 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <SystemCoreClockUpdate+0xd0>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4a15      	ldr	r2, [pc, #84]	; (800102c <SystemCoreClockUpdate+0xdc>)
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <SystemCoreClockUpdate+0xd4>)
 8000fdc:	6013      	str	r3, [r2, #0]
      break;
 8000fde:	e00a      	b.n	8000ff6 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <SystemCoreClockUpdate+0xd8>)
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <SystemCoreClockUpdate+0xd4>)
 8000fea:	6013      	str	r3, [r2, #0]
      break;
 8000fec:	e003      	b.n	8000ff6 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <SystemCoreClockUpdate+0xd4>)
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <SystemCoreClockUpdate+0xd8>)
 8000ff2:	601a      	str	r2, [r3, #0]
      break;
 8000ff4:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SystemCoreClockUpdate+0xd0>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <SystemCoreClockUpdate+0xe0>)
 8001002:	5cd3      	ldrb	r3, [r2, r3]
 8001004:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <SystemCoreClockUpdate+0xd4>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <SystemCoreClockUpdate+0xd4>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	20000000 	.word	0x20000000
 8001028:	007a1200 	.word	0x007a1200
 800102c:	003d0900 	.word	0x003d0900
 8001030:	08001a58 	.word	0x08001a58

08001034 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001036:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001038:	f7ff ff84 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <LoopForever+0x6>)
  ldr r1, =_edata
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <LoopForever+0xe>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001054:	4c0a      	ldr	r4, [pc, #40]	; (8001080 <LoopForever+0x16>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001062:	f000 f817 	bl	8001094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff fead 	bl	8000dc4 <main>

0800106a <LoopForever>:

LoopForever:
    b LoopForever
 800106a:	e7fe      	b.n	800106a <LoopForever>
  ldr   r0, =_estack
 800106c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001078:	08001aac 	.word	0x08001aac
  ldr r2, =_sbss
 800107c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001080:	200001ac 	.word	0x200001ac

08001084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_2_IRQHandler>
	...

08001088 <__errno>:
 8001088:	4b01      	ldr	r3, [pc, #4]	; (8001090 <__errno+0x8>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000004 	.word	0x20000004

08001094 <__libc_init_array>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	2600      	movs	r6, #0
 8001098:	4d0c      	ldr	r5, [pc, #48]	; (80010cc <__libc_init_array+0x38>)
 800109a:	4c0d      	ldr	r4, [pc, #52]	; (80010d0 <__libc_init_array+0x3c>)
 800109c:	1b64      	subs	r4, r4, r5
 800109e:	10a4      	asrs	r4, r4, #2
 80010a0:	42a6      	cmp	r6, r4
 80010a2:	d109      	bne.n	80010b8 <__libc_init_array+0x24>
 80010a4:	f000 fc54 	bl	8001950 <_init>
 80010a8:	2600      	movs	r6, #0
 80010aa:	4d0a      	ldr	r5, [pc, #40]	; (80010d4 <__libc_init_array+0x40>)
 80010ac:	4c0a      	ldr	r4, [pc, #40]	; (80010d8 <__libc_init_array+0x44>)
 80010ae:	1b64      	subs	r4, r4, r5
 80010b0:	10a4      	asrs	r4, r4, #2
 80010b2:	42a6      	cmp	r6, r4
 80010b4:	d105      	bne.n	80010c2 <__libc_init_array+0x2e>
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
 80010b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010bc:	4798      	blx	r3
 80010be:	3601      	adds	r6, #1
 80010c0:	e7ee      	b.n	80010a0 <__libc_init_array+0xc>
 80010c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c6:	4798      	blx	r3
 80010c8:	3601      	adds	r6, #1
 80010ca:	e7f2      	b.n	80010b2 <__libc_init_array+0x1e>
 80010cc:	08001aa4 	.word	0x08001aa4
 80010d0:	08001aa4 	.word	0x08001aa4
 80010d4:	08001aa4 	.word	0x08001aa4
 80010d8:	08001aa8 	.word	0x08001aa8

080010dc <memcpy>:
 80010dc:	440a      	add	r2, r1
 80010de:	4291      	cmp	r1, r2
 80010e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010e4:	d100      	bne.n	80010e8 <memcpy+0xc>
 80010e6:	4770      	bx	lr
 80010e8:	b510      	push	{r4, lr}
 80010ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010ee:	4291      	cmp	r1, r2
 80010f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80010f4:	d1f9      	bne.n	80010ea <memcpy+0xe>
 80010f6:	bd10      	pop	{r4, pc}

080010f8 <_vsiprintf_r>:
 80010f8:	b500      	push	{lr}
 80010fa:	b09b      	sub	sp, #108	; 0x6c
 80010fc:	9100      	str	r1, [sp, #0]
 80010fe:	9104      	str	r1, [sp, #16]
 8001100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001104:	9105      	str	r1, [sp, #20]
 8001106:	9102      	str	r1, [sp, #8]
 8001108:	4905      	ldr	r1, [pc, #20]	; (8001120 <_vsiprintf_r+0x28>)
 800110a:	9103      	str	r1, [sp, #12]
 800110c:	4669      	mov	r1, sp
 800110e:	f000 f86f 	bl	80011f0 <_svfiprintf_r>
 8001112:	2200      	movs	r2, #0
 8001114:	9b00      	ldr	r3, [sp, #0]
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	b01b      	add	sp, #108	; 0x6c
 800111a:	f85d fb04 	ldr.w	pc, [sp], #4
 800111e:	bf00      	nop
 8001120:	ffff0208 	.word	0xffff0208

08001124 <vsiprintf>:
 8001124:	4613      	mov	r3, r2
 8001126:	460a      	mov	r2, r1
 8001128:	4601      	mov	r1, r0
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <vsiprintf+0x10>)
 800112c:	6800      	ldr	r0, [r0, #0]
 800112e:	f7ff bfe3 	b.w	80010f8 <_vsiprintf_r>
 8001132:	bf00      	nop
 8001134:	20000004 	.word	0x20000004

08001138 <__ssputs_r>:
 8001138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800113c:	688e      	ldr	r6, [r1, #8]
 800113e:	4682      	mov	sl, r0
 8001140:	429e      	cmp	r6, r3
 8001142:	460c      	mov	r4, r1
 8001144:	4690      	mov	r8, r2
 8001146:	461f      	mov	r7, r3
 8001148:	d838      	bhi.n	80011bc <__ssputs_r+0x84>
 800114a:	898a      	ldrh	r2, [r1, #12]
 800114c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001150:	d032      	beq.n	80011b8 <__ssputs_r+0x80>
 8001152:	6825      	ldr	r5, [r4, #0]
 8001154:	6909      	ldr	r1, [r1, #16]
 8001156:	3301      	adds	r3, #1
 8001158:	eba5 0901 	sub.w	r9, r5, r1
 800115c:	6965      	ldr	r5, [r4, #20]
 800115e:	444b      	add	r3, r9
 8001160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001168:	106d      	asrs	r5, r5, #1
 800116a:	429d      	cmp	r5, r3
 800116c:	bf38      	it	cc
 800116e:	461d      	movcc	r5, r3
 8001170:	0553      	lsls	r3, r2, #21
 8001172:	d531      	bpl.n	80011d8 <__ssputs_r+0xa0>
 8001174:	4629      	mov	r1, r5
 8001176:	f000 fb45 	bl	8001804 <_malloc_r>
 800117a:	4606      	mov	r6, r0
 800117c:	b950      	cbnz	r0, 8001194 <__ssputs_r+0x5c>
 800117e:	230c      	movs	r3, #12
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f8ca 3000 	str.w	r3, [sl]
 8001188:	89a3      	ldrh	r3, [r4, #12]
 800118a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118e:	81a3      	strh	r3, [r4, #12]
 8001190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001194:	464a      	mov	r2, r9
 8001196:	6921      	ldr	r1, [r4, #16]
 8001198:	f7ff ffa0 	bl	80010dc <memcpy>
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80011a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a6:	81a3      	strh	r3, [r4, #12]
 80011a8:	6126      	str	r6, [r4, #16]
 80011aa:	444e      	add	r6, r9
 80011ac:	6026      	str	r6, [r4, #0]
 80011ae:	463e      	mov	r6, r7
 80011b0:	6165      	str	r5, [r4, #20]
 80011b2:	eba5 0509 	sub.w	r5, r5, r9
 80011b6:	60a5      	str	r5, [r4, #8]
 80011b8:	42be      	cmp	r6, r7
 80011ba:	d900      	bls.n	80011be <__ssputs_r+0x86>
 80011bc:	463e      	mov	r6, r7
 80011be:	4632      	mov	r2, r6
 80011c0:	4641      	mov	r1, r8
 80011c2:	6820      	ldr	r0, [r4, #0]
 80011c4:	f000 fab8 	bl	8001738 <memmove>
 80011c8:	68a3      	ldr	r3, [r4, #8]
 80011ca:	6822      	ldr	r2, [r4, #0]
 80011cc:	1b9b      	subs	r3, r3, r6
 80011ce:	4432      	add	r2, r6
 80011d0:	2000      	movs	r0, #0
 80011d2:	60a3      	str	r3, [r4, #8]
 80011d4:	6022      	str	r2, [r4, #0]
 80011d6:	e7db      	b.n	8001190 <__ssputs_r+0x58>
 80011d8:	462a      	mov	r2, r5
 80011da:	f000 fb6d 	bl	80018b8 <_realloc_r>
 80011de:	4606      	mov	r6, r0
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d1e1      	bne.n	80011a8 <__ssputs_r+0x70>
 80011e4:	4650      	mov	r0, sl
 80011e6:	6921      	ldr	r1, [r4, #16]
 80011e8:	f000 fac0 	bl	800176c <_free_r>
 80011ec:	e7c7      	b.n	800117e <__ssputs_r+0x46>
	...

080011f0 <_svfiprintf_r>:
 80011f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f4:	4698      	mov	r8, r3
 80011f6:	898b      	ldrh	r3, [r1, #12]
 80011f8:	4607      	mov	r7, r0
 80011fa:	061b      	lsls	r3, r3, #24
 80011fc:	460d      	mov	r5, r1
 80011fe:	4614      	mov	r4, r2
 8001200:	b09d      	sub	sp, #116	; 0x74
 8001202:	d50e      	bpl.n	8001222 <_svfiprintf_r+0x32>
 8001204:	690b      	ldr	r3, [r1, #16]
 8001206:	b963      	cbnz	r3, 8001222 <_svfiprintf_r+0x32>
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	f000 fafb 	bl	8001804 <_malloc_r>
 800120e:	6028      	str	r0, [r5, #0]
 8001210:	6128      	str	r0, [r5, #16]
 8001212:	b920      	cbnz	r0, 800121e <_svfiprintf_r+0x2e>
 8001214:	230c      	movs	r3, #12
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	e0d1      	b.n	80013c2 <_svfiprintf_r+0x1d2>
 800121e:	2340      	movs	r3, #64	; 0x40
 8001220:	616b      	str	r3, [r5, #20]
 8001222:	2300      	movs	r3, #0
 8001224:	9309      	str	r3, [sp, #36]	; 0x24
 8001226:	2320      	movs	r3, #32
 8001228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800122c:	2330      	movs	r3, #48	; 0x30
 800122e:	f04f 0901 	mov.w	r9, #1
 8001232:	f8cd 800c 	str.w	r8, [sp, #12]
 8001236:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80013dc <_svfiprintf_r+0x1ec>
 800123a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800123e:	4623      	mov	r3, r4
 8001240:	469a      	mov	sl, r3
 8001242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001246:	b10a      	cbz	r2, 800124c <_svfiprintf_r+0x5c>
 8001248:	2a25      	cmp	r2, #37	; 0x25
 800124a:	d1f9      	bne.n	8001240 <_svfiprintf_r+0x50>
 800124c:	ebba 0b04 	subs.w	fp, sl, r4
 8001250:	d00b      	beq.n	800126a <_svfiprintf_r+0x7a>
 8001252:	465b      	mov	r3, fp
 8001254:	4622      	mov	r2, r4
 8001256:	4629      	mov	r1, r5
 8001258:	4638      	mov	r0, r7
 800125a:	f7ff ff6d 	bl	8001138 <__ssputs_r>
 800125e:	3001      	adds	r0, #1
 8001260:	f000 80aa 	beq.w	80013b8 <_svfiprintf_r+0x1c8>
 8001264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001266:	445a      	add	r2, fp
 8001268:	9209      	str	r2, [sp, #36]	; 0x24
 800126a:	f89a 3000 	ldrb.w	r3, [sl]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80a2 	beq.w	80013b8 <_svfiprintf_r+0x1c8>
 8001274:	2300      	movs	r3, #0
 8001276:	f04f 32ff 	mov.w	r2, #4294967295
 800127a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800127e:	f10a 0a01 	add.w	sl, sl, #1
 8001282:	9304      	str	r3, [sp, #16]
 8001284:	9307      	str	r3, [sp, #28]
 8001286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800128a:	931a      	str	r3, [sp, #104]	; 0x68
 800128c:	4654      	mov	r4, sl
 800128e:	2205      	movs	r2, #5
 8001290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001294:	4851      	ldr	r0, [pc, #324]	; (80013dc <_svfiprintf_r+0x1ec>)
 8001296:	f000 fa41 	bl	800171c <memchr>
 800129a:	9a04      	ldr	r2, [sp, #16]
 800129c:	b9d8      	cbnz	r0, 80012d6 <_svfiprintf_r+0xe6>
 800129e:	06d0      	lsls	r0, r2, #27
 80012a0:	bf44      	itt	mi
 80012a2:	2320      	movmi	r3, #32
 80012a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80012a8:	0711      	lsls	r1, r2, #28
 80012aa:	bf44      	itt	mi
 80012ac:	232b      	movmi	r3, #43	; 0x2b
 80012ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80012b2:	f89a 3000 	ldrb.w	r3, [sl]
 80012b6:	2b2a      	cmp	r3, #42	; 0x2a
 80012b8:	d015      	beq.n	80012e6 <_svfiprintf_r+0xf6>
 80012ba:	4654      	mov	r4, sl
 80012bc:	2000      	movs	r0, #0
 80012be:	f04f 0c0a 	mov.w	ip, #10
 80012c2:	9a07      	ldr	r2, [sp, #28]
 80012c4:	4621      	mov	r1, r4
 80012c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012ca:	3b30      	subs	r3, #48	; 0x30
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	d94e      	bls.n	800136e <_svfiprintf_r+0x17e>
 80012d0:	b1b0      	cbz	r0, 8001300 <_svfiprintf_r+0x110>
 80012d2:	9207      	str	r2, [sp, #28]
 80012d4:	e014      	b.n	8001300 <_svfiprintf_r+0x110>
 80012d6:	eba0 0308 	sub.w	r3, r0, r8
 80012da:	fa09 f303 	lsl.w	r3, r9, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	46a2      	mov	sl, r4
 80012e2:	9304      	str	r3, [sp, #16]
 80012e4:	e7d2      	b.n	800128c <_svfiprintf_r+0x9c>
 80012e6:	9b03      	ldr	r3, [sp, #12]
 80012e8:	1d19      	adds	r1, r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	9103      	str	r1, [sp, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfbb      	ittet	lt
 80012f2:	425b      	neglt	r3, r3
 80012f4:	f042 0202 	orrlt.w	r2, r2, #2
 80012f8:	9307      	strge	r3, [sp, #28]
 80012fa:	9307      	strlt	r3, [sp, #28]
 80012fc:	bfb8      	it	lt
 80012fe:	9204      	strlt	r2, [sp, #16]
 8001300:	7823      	ldrb	r3, [r4, #0]
 8001302:	2b2e      	cmp	r3, #46	; 0x2e
 8001304:	d10c      	bne.n	8001320 <_svfiprintf_r+0x130>
 8001306:	7863      	ldrb	r3, [r4, #1]
 8001308:	2b2a      	cmp	r3, #42	; 0x2a
 800130a:	d135      	bne.n	8001378 <_svfiprintf_r+0x188>
 800130c:	9b03      	ldr	r3, [sp, #12]
 800130e:	3402      	adds	r4, #2
 8001310:	1d1a      	adds	r2, r3, #4
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	9203      	str	r2, [sp, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	bfb8      	it	lt
 800131a:	f04f 33ff 	movlt.w	r3, #4294967295
 800131e:	9305      	str	r3, [sp, #20]
 8001320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80013ec <_svfiprintf_r+0x1fc>
 8001324:	2203      	movs	r2, #3
 8001326:	4650      	mov	r0, sl
 8001328:	7821      	ldrb	r1, [r4, #0]
 800132a:	f000 f9f7 	bl	800171c <memchr>
 800132e:	b140      	cbz	r0, 8001342 <_svfiprintf_r+0x152>
 8001330:	2340      	movs	r3, #64	; 0x40
 8001332:	eba0 000a 	sub.w	r0, r0, sl
 8001336:	fa03 f000 	lsl.w	r0, r3, r0
 800133a:	9b04      	ldr	r3, [sp, #16]
 800133c:	3401      	adds	r4, #1
 800133e:	4303      	orrs	r3, r0
 8001340:	9304      	str	r3, [sp, #16]
 8001342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001346:	2206      	movs	r2, #6
 8001348:	4825      	ldr	r0, [pc, #148]	; (80013e0 <_svfiprintf_r+0x1f0>)
 800134a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800134e:	f000 f9e5 	bl	800171c <memchr>
 8001352:	2800      	cmp	r0, #0
 8001354:	d038      	beq.n	80013c8 <_svfiprintf_r+0x1d8>
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <_svfiprintf_r+0x1f4>)
 8001358:	bb1b      	cbnz	r3, 80013a2 <_svfiprintf_r+0x1b2>
 800135a:	9b03      	ldr	r3, [sp, #12]
 800135c:	3307      	adds	r3, #7
 800135e:	f023 0307 	bic.w	r3, r3, #7
 8001362:	3308      	adds	r3, #8
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001368:	4433      	add	r3, r6
 800136a:	9309      	str	r3, [sp, #36]	; 0x24
 800136c:	e767      	b.n	800123e <_svfiprintf_r+0x4e>
 800136e:	460c      	mov	r4, r1
 8001370:	2001      	movs	r0, #1
 8001372:	fb0c 3202 	mla	r2, ip, r2, r3
 8001376:	e7a5      	b.n	80012c4 <_svfiprintf_r+0xd4>
 8001378:	2300      	movs	r3, #0
 800137a:	f04f 0c0a 	mov.w	ip, #10
 800137e:	4619      	mov	r1, r3
 8001380:	3401      	adds	r4, #1
 8001382:	9305      	str	r3, [sp, #20]
 8001384:	4620      	mov	r0, r4
 8001386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800138a:	3a30      	subs	r2, #48	; 0x30
 800138c:	2a09      	cmp	r2, #9
 800138e:	d903      	bls.n	8001398 <_svfiprintf_r+0x1a8>
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0c5      	beq.n	8001320 <_svfiprintf_r+0x130>
 8001394:	9105      	str	r1, [sp, #20]
 8001396:	e7c3      	b.n	8001320 <_svfiprintf_r+0x130>
 8001398:	4604      	mov	r4, r0
 800139a:	2301      	movs	r3, #1
 800139c:	fb0c 2101 	mla	r1, ip, r1, r2
 80013a0:	e7f0      	b.n	8001384 <_svfiprintf_r+0x194>
 80013a2:	ab03      	add	r3, sp, #12
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	462a      	mov	r2, r5
 80013a8:	4638      	mov	r0, r7
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <_svfiprintf_r+0x1f8>)
 80013ac:	a904      	add	r1, sp, #16
 80013ae:	f3af 8000 	nop.w
 80013b2:	1c42      	adds	r2, r0, #1
 80013b4:	4606      	mov	r6, r0
 80013b6:	d1d6      	bne.n	8001366 <_svfiprintf_r+0x176>
 80013b8:	89ab      	ldrh	r3, [r5, #12]
 80013ba:	065b      	lsls	r3, r3, #25
 80013bc:	f53f af2c 	bmi.w	8001218 <_svfiprintf_r+0x28>
 80013c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013c2:	b01d      	add	sp, #116	; 0x74
 80013c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013c8:	ab03      	add	r3, sp, #12
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	462a      	mov	r2, r5
 80013ce:	4638      	mov	r0, r7
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <_svfiprintf_r+0x1f8>)
 80013d2:	a904      	add	r1, sp, #16
 80013d4:	f000 f87c 	bl	80014d0 <_printf_i>
 80013d8:	e7eb      	b.n	80013b2 <_svfiprintf_r+0x1c2>
 80013da:	bf00      	nop
 80013dc:	08001a70 	.word	0x08001a70
 80013e0:	08001a7a 	.word	0x08001a7a
 80013e4:	00000000 	.word	0x00000000
 80013e8:	08001139 	.word	0x08001139
 80013ec:	08001a76 	.word	0x08001a76

080013f0 <_printf_common>:
 80013f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013f4:	4616      	mov	r6, r2
 80013f6:	4699      	mov	r9, r3
 80013f8:	688a      	ldr	r2, [r1, #8]
 80013fa:	690b      	ldr	r3, [r1, #16]
 80013fc:	4607      	mov	r7, r0
 80013fe:	4293      	cmp	r3, r2
 8001400:	bfb8      	it	lt
 8001402:	4613      	movlt	r3, r2
 8001404:	6033      	str	r3, [r6, #0]
 8001406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800140a:	460c      	mov	r4, r1
 800140c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001410:	b10a      	cbz	r2, 8001416 <_printf_common+0x26>
 8001412:	3301      	adds	r3, #1
 8001414:	6033      	str	r3, [r6, #0]
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	0699      	lsls	r1, r3, #26
 800141a:	bf42      	ittt	mi
 800141c:	6833      	ldrmi	r3, [r6, #0]
 800141e:	3302      	addmi	r3, #2
 8001420:	6033      	strmi	r3, [r6, #0]
 8001422:	6825      	ldr	r5, [r4, #0]
 8001424:	f015 0506 	ands.w	r5, r5, #6
 8001428:	d106      	bne.n	8001438 <_printf_common+0x48>
 800142a:	f104 0a19 	add.w	sl, r4, #25
 800142e:	68e3      	ldr	r3, [r4, #12]
 8001430:	6832      	ldr	r2, [r6, #0]
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	42ab      	cmp	r3, r5
 8001436:	dc28      	bgt.n	800148a <_printf_common+0x9a>
 8001438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800143c:	1e13      	subs	r3, r2, #0
 800143e:	6822      	ldr	r2, [r4, #0]
 8001440:	bf18      	it	ne
 8001442:	2301      	movne	r3, #1
 8001444:	0692      	lsls	r2, r2, #26
 8001446:	d42d      	bmi.n	80014a4 <_printf_common+0xb4>
 8001448:	4649      	mov	r1, r9
 800144a:	4638      	mov	r0, r7
 800144c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001450:	47c0      	blx	r8
 8001452:	3001      	adds	r0, #1
 8001454:	d020      	beq.n	8001498 <_printf_common+0xa8>
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	68e5      	ldr	r5, [r4, #12]
 800145a:	f003 0306 	and.w	r3, r3, #6
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf18      	it	ne
 8001462:	2500      	movne	r5, #0
 8001464:	6832      	ldr	r2, [r6, #0]
 8001466:	f04f 0600 	mov.w	r6, #0
 800146a:	68a3      	ldr	r3, [r4, #8]
 800146c:	bf08      	it	eq
 800146e:	1aad      	subeq	r5, r5, r2
 8001470:	6922      	ldr	r2, [r4, #16]
 8001472:	bf08      	it	eq
 8001474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001478:	4293      	cmp	r3, r2
 800147a:	bfc4      	itt	gt
 800147c:	1a9b      	subgt	r3, r3, r2
 800147e:	18ed      	addgt	r5, r5, r3
 8001480:	341a      	adds	r4, #26
 8001482:	42b5      	cmp	r5, r6
 8001484:	d11a      	bne.n	80014bc <_printf_common+0xcc>
 8001486:	2000      	movs	r0, #0
 8001488:	e008      	b.n	800149c <_printf_common+0xac>
 800148a:	2301      	movs	r3, #1
 800148c:	4652      	mov	r2, sl
 800148e:	4649      	mov	r1, r9
 8001490:	4638      	mov	r0, r7
 8001492:	47c0      	blx	r8
 8001494:	3001      	adds	r0, #1
 8001496:	d103      	bne.n	80014a0 <_printf_common+0xb0>
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014a0:	3501      	adds	r5, #1
 80014a2:	e7c4      	b.n	800142e <_printf_common+0x3e>
 80014a4:	2030      	movs	r0, #48	; 0x30
 80014a6:	18e1      	adds	r1, r4, r3
 80014a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80014b2:	4422      	add	r2, r4
 80014b4:	3302      	adds	r3, #2
 80014b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80014ba:	e7c5      	b.n	8001448 <_printf_common+0x58>
 80014bc:	2301      	movs	r3, #1
 80014be:	4622      	mov	r2, r4
 80014c0:	4649      	mov	r1, r9
 80014c2:	4638      	mov	r0, r7
 80014c4:	47c0      	blx	r8
 80014c6:	3001      	adds	r0, #1
 80014c8:	d0e6      	beq.n	8001498 <_printf_common+0xa8>
 80014ca:	3601      	adds	r6, #1
 80014cc:	e7d9      	b.n	8001482 <_printf_common+0x92>
	...

080014d0 <_printf_i>:
 80014d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014d4:	460c      	mov	r4, r1
 80014d6:	7e27      	ldrb	r7, [r4, #24]
 80014d8:	4691      	mov	r9, r2
 80014da:	2f78      	cmp	r7, #120	; 0x78
 80014dc:	4680      	mov	r8, r0
 80014de:	469a      	mov	sl, r3
 80014e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014e6:	d807      	bhi.n	80014f8 <_printf_i+0x28>
 80014e8:	2f62      	cmp	r7, #98	; 0x62
 80014ea:	d80a      	bhi.n	8001502 <_printf_i+0x32>
 80014ec:	2f00      	cmp	r7, #0
 80014ee:	f000 80d9 	beq.w	80016a4 <_printf_i+0x1d4>
 80014f2:	2f58      	cmp	r7, #88	; 0x58
 80014f4:	f000 80a4 	beq.w	8001640 <_printf_i+0x170>
 80014f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80014fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001500:	e03a      	b.n	8001578 <_printf_i+0xa8>
 8001502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001506:	2b15      	cmp	r3, #21
 8001508:	d8f6      	bhi.n	80014f8 <_printf_i+0x28>
 800150a:	a001      	add	r0, pc, #4	; (adr r0, 8001510 <_printf_i+0x40>)
 800150c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001510:	08001569 	.word	0x08001569
 8001514:	0800157d 	.word	0x0800157d
 8001518:	080014f9 	.word	0x080014f9
 800151c:	080014f9 	.word	0x080014f9
 8001520:	080014f9 	.word	0x080014f9
 8001524:	080014f9 	.word	0x080014f9
 8001528:	0800157d 	.word	0x0800157d
 800152c:	080014f9 	.word	0x080014f9
 8001530:	080014f9 	.word	0x080014f9
 8001534:	080014f9 	.word	0x080014f9
 8001538:	080014f9 	.word	0x080014f9
 800153c:	0800168b 	.word	0x0800168b
 8001540:	080015ad 	.word	0x080015ad
 8001544:	0800166d 	.word	0x0800166d
 8001548:	080014f9 	.word	0x080014f9
 800154c:	080014f9 	.word	0x080014f9
 8001550:	080016ad 	.word	0x080016ad
 8001554:	080014f9 	.word	0x080014f9
 8001558:	080015ad 	.word	0x080015ad
 800155c:	080014f9 	.word	0x080014f9
 8001560:	080014f9 	.word	0x080014f9
 8001564:	08001675 	.word	0x08001675
 8001568:	680b      	ldr	r3, [r1, #0]
 800156a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800156e:	1d1a      	adds	r2, r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	600a      	str	r2, [r1, #0]
 8001574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001578:	2301      	movs	r3, #1
 800157a:	e0a4      	b.n	80016c6 <_printf_i+0x1f6>
 800157c:	6825      	ldr	r5, [r4, #0]
 800157e:	6808      	ldr	r0, [r1, #0]
 8001580:	062e      	lsls	r6, r5, #24
 8001582:	f100 0304 	add.w	r3, r0, #4
 8001586:	d50a      	bpl.n	800159e <_printf_i+0xce>
 8001588:	6805      	ldr	r5, [r0, #0]
 800158a:	600b      	str	r3, [r1, #0]
 800158c:	2d00      	cmp	r5, #0
 800158e:	da03      	bge.n	8001598 <_printf_i+0xc8>
 8001590:	232d      	movs	r3, #45	; 0x2d
 8001592:	426d      	negs	r5, r5
 8001594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001598:	230a      	movs	r3, #10
 800159a:	485e      	ldr	r0, [pc, #376]	; (8001714 <_printf_i+0x244>)
 800159c:	e019      	b.n	80015d2 <_printf_i+0x102>
 800159e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80015a2:	6805      	ldr	r5, [r0, #0]
 80015a4:	600b      	str	r3, [r1, #0]
 80015a6:	bf18      	it	ne
 80015a8:	b22d      	sxthne	r5, r5
 80015aa:	e7ef      	b.n	800158c <_printf_i+0xbc>
 80015ac:	680b      	ldr	r3, [r1, #0]
 80015ae:	6825      	ldr	r5, [r4, #0]
 80015b0:	1d18      	adds	r0, r3, #4
 80015b2:	6008      	str	r0, [r1, #0]
 80015b4:	0628      	lsls	r0, r5, #24
 80015b6:	d501      	bpl.n	80015bc <_printf_i+0xec>
 80015b8:	681d      	ldr	r5, [r3, #0]
 80015ba:	e002      	b.n	80015c2 <_printf_i+0xf2>
 80015bc:	0669      	lsls	r1, r5, #25
 80015be:	d5fb      	bpl.n	80015b8 <_printf_i+0xe8>
 80015c0:	881d      	ldrh	r5, [r3, #0]
 80015c2:	2f6f      	cmp	r7, #111	; 0x6f
 80015c4:	bf0c      	ite	eq
 80015c6:	2308      	moveq	r3, #8
 80015c8:	230a      	movne	r3, #10
 80015ca:	4852      	ldr	r0, [pc, #328]	; (8001714 <_printf_i+0x244>)
 80015cc:	2100      	movs	r1, #0
 80015ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80015d2:	6866      	ldr	r6, [r4, #4]
 80015d4:	2e00      	cmp	r6, #0
 80015d6:	bfa8      	it	ge
 80015d8:	6821      	ldrge	r1, [r4, #0]
 80015da:	60a6      	str	r6, [r4, #8]
 80015dc:	bfa4      	itt	ge
 80015de:	f021 0104 	bicge.w	r1, r1, #4
 80015e2:	6021      	strge	r1, [r4, #0]
 80015e4:	b90d      	cbnz	r5, 80015ea <_printf_i+0x11a>
 80015e6:	2e00      	cmp	r6, #0
 80015e8:	d04d      	beq.n	8001686 <_printf_i+0x1b6>
 80015ea:	4616      	mov	r6, r2
 80015ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80015f0:	fb03 5711 	mls	r7, r3, r1, r5
 80015f4:	5dc7      	ldrb	r7, [r0, r7]
 80015f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015fa:	462f      	mov	r7, r5
 80015fc:	42bb      	cmp	r3, r7
 80015fe:	460d      	mov	r5, r1
 8001600:	d9f4      	bls.n	80015ec <_printf_i+0x11c>
 8001602:	2b08      	cmp	r3, #8
 8001604:	d10b      	bne.n	800161e <_printf_i+0x14e>
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	07df      	lsls	r7, r3, #31
 800160a:	d508      	bpl.n	800161e <_printf_i+0x14e>
 800160c:	6923      	ldr	r3, [r4, #16]
 800160e:	6861      	ldr	r1, [r4, #4]
 8001610:	4299      	cmp	r1, r3
 8001612:	bfde      	ittt	le
 8001614:	2330      	movle	r3, #48	; 0x30
 8001616:	f806 3c01 	strble.w	r3, [r6, #-1]
 800161a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800161e:	1b92      	subs	r2, r2, r6
 8001620:	6122      	str	r2, [r4, #16]
 8001622:	464b      	mov	r3, r9
 8001624:	4621      	mov	r1, r4
 8001626:	4640      	mov	r0, r8
 8001628:	f8cd a000 	str.w	sl, [sp]
 800162c:	aa03      	add	r2, sp, #12
 800162e:	f7ff fedf 	bl	80013f0 <_printf_common>
 8001632:	3001      	adds	r0, #1
 8001634:	d14c      	bne.n	80016d0 <_printf_i+0x200>
 8001636:	f04f 30ff 	mov.w	r0, #4294967295
 800163a:	b004      	add	sp, #16
 800163c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001640:	4834      	ldr	r0, [pc, #208]	; (8001714 <_printf_i+0x244>)
 8001642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001646:	680e      	ldr	r6, [r1, #0]
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	f856 5b04 	ldr.w	r5, [r6], #4
 800164e:	061f      	lsls	r7, r3, #24
 8001650:	600e      	str	r6, [r1, #0]
 8001652:	d514      	bpl.n	800167e <_printf_i+0x1ae>
 8001654:	07d9      	lsls	r1, r3, #31
 8001656:	bf44      	itt	mi
 8001658:	f043 0320 	orrmi.w	r3, r3, #32
 800165c:	6023      	strmi	r3, [r4, #0]
 800165e:	b91d      	cbnz	r5, 8001668 <_printf_i+0x198>
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	f023 0320 	bic.w	r3, r3, #32
 8001666:	6023      	str	r3, [r4, #0]
 8001668:	2310      	movs	r3, #16
 800166a:	e7af      	b.n	80015cc <_printf_i+0xfc>
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	6023      	str	r3, [r4, #0]
 8001674:	2378      	movs	r3, #120	; 0x78
 8001676:	4828      	ldr	r0, [pc, #160]	; (8001718 <_printf_i+0x248>)
 8001678:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800167c:	e7e3      	b.n	8001646 <_printf_i+0x176>
 800167e:	065e      	lsls	r6, r3, #25
 8001680:	bf48      	it	mi
 8001682:	b2ad      	uxthmi	r5, r5
 8001684:	e7e6      	b.n	8001654 <_printf_i+0x184>
 8001686:	4616      	mov	r6, r2
 8001688:	e7bb      	b.n	8001602 <_printf_i+0x132>
 800168a:	680b      	ldr	r3, [r1, #0]
 800168c:	6826      	ldr	r6, [r4, #0]
 800168e:	1d1d      	adds	r5, r3, #4
 8001690:	6960      	ldr	r0, [r4, #20]
 8001692:	600d      	str	r5, [r1, #0]
 8001694:	0635      	lsls	r5, r6, #24
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	d501      	bpl.n	800169e <_printf_i+0x1ce>
 800169a:	6018      	str	r0, [r3, #0]
 800169c:	e002      	b.n	80016a4 <_printf_i+0x1d4>
 800169e:	0671      	lsls	r1, r6, #25
 80016a0:	d5fb      	bpl.n	800169a <_printf_i+0x1ca>
 80016a2:	8018      	strh	r0, [r3, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	4616      	mov	r6, r2
 80016a8:	6123      	str	r3, [r4, #16]
 80016aa:	e7ba      	b.n	8001622 <_printf_i+0x152>
 80016ac:	680b      	ldr	r3, [r1, #0]
 80016ae:	1d1a      	adds	r2, r3, #4
 80016b0:	600a      	str	r2, [r1, #0]
 80016b2:	681e      	ldr	r6, [r3, #0]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4630      	mov	r0, r6
 80016b8:	6862      	ldr	r2, [r4, #4]
 80016ba:	f000 f82f 	bl	800171c <memchr>
 80016be:	b108      	cbz	r0, 80016c4 <_printf_i+0x1f4>
 80016c0:	1b80      	subs	r0, r0, r6
 80016c2:	6060      	str	r0, [r4, #4]
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	6123      	str	r3, [r4, #16]
 80016c8:	2300      	movs	r3, #0
 80016ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016ce:	e7a8      	b.n	8001622 <_printf_i+0x152>
 80016d0:	4632      	mov	r2, r6
 80016d2:	4649      	mov	r1, r9
 80016d4:	4640      	mov	r0, r8
 80016d6:	6923      	ldr	r3, [r4, #16]
 80016d8:	47d0      	blx	sl
 80016da:	3001      	adds	r0, #1
 80016dc:	d0ab      	beq.n	8001636 <_printf_i+0x166>
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	079b      	lsls	r3, r3, #30
 80016e2:	d413      	bmi.n	800170c <_printf_i+0x23c>
 80016e4:	68e0      	ldr	r0, [r4, #12]
 80016e6:	9b03      	ldr	r3, [sp, #12]
 80016e8:	4298      	cmp	r0, r3
 80016ea:	bfb8      	it	lt
 80016ec:	4618      	movlt	r0, r3
 80016ee:	e7a4      	b.n	800163a <_printf_i+0x16a>
 80016f0:	2301      	movs	r3, #1
 80016f2:	4632      	mov	r2, r6
 80016f4:	4649      	mov	r1, r9
 80016f6:	4640      	mov	r0, r8
 80016f8:	47d0      	blx	sl
 80016fa:	3001      	adds	r0, #1
 80016fc:	d09b      	beq.n	8001636 <_printf_i+0x166>
 80016fe:	3501      	adds	r5, #1
 8001700:	68e3      	ldr	r3, [r4, #12]
 8001702:	9903      	ldr	r1, [sp, #12]
 8001704:	1a5b      	subs	r3, r3, r1
 8001706:	42ab      	cmp	r3, r5
 8001708:	dcf2      	bgt.n	80016f0 <_printf_i+0x220>
 800170a:	e7eb      	b.n	80016e4 <_printf_i+0x214>
 800170c:	2500      	movs	r5, #0
 800170e:	f104 0619 	add.w	r6, r4, #25
 8001712:	e7f5      	b.n	8001700 <_printf_i+0x230>
 8001714:	08001a81 	.word	0x08001a81
 8001718:	08001a92 	.word	0x08001a92

0800171c <memchr>:
 800171c:	4603      	mov	r3, r0
 800171e:	b510      	push	{r4, lr}
 8001720:	b2c9      	uxtb	r1, r1
 8001722:	4402      	add	r2, r0
 8001724:	4293      	cmp	r3, r2
 8001726:	4618      	mov	r0, r3
 8001728:	d101      	bne.n	800172e <memchr+0x12>
 800172a:	2000      	movs	r0, #0
 800172c:	e003      	b.n	8001736 <memchr+0x1a>
 800172e:	7804      	ldrb	r4, [r0, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	428c      	cmp	r4, r1
 8001734:	d1f6      	bne.n	8001724 <memchr+0x8>
 8001736:	bd10      	pop	{r4, pc}

08001738 <memmove>:
 8001738:	4288      	cmp	r0, r1
 800173a:	b510      	push	{r4, lr}
 800173c:	eb01 0402 	add.w	r4, r1, r2
 8001740:	d902      	bls.n	8001748 <memmove+0x10>
 8001742:	4284      	cmp	r4, r0
 8001744:	4623      	mov	r3, r4
 8001746:	d807      	bhi.n	8001758 <memmove+0x20>
 8001748:	1e43      	subs	r3, r0, #1
 800174a:	42a1      	cmp	r1, r4
 800174c:	d008      	beq.n	8001760 <memmove+0x28>
 800174e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001756:	e7f8      	b.n	800174a <memmove+0x12>
 8001758:	4601      	mov	r1, r0
 800175a:	4402      	add	r2, r0
 800175c:	428a      	cmp	r2, r1
 800175e:	d100      	bne.n	8001762 <memmove+0x2a>
 8001760:	bd10      	pop	{r4, pc}
 8001762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800176a:	e7f7      	b.n	800175c <memmove+0x24>

0800176c <_free_r>:
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4605      	mov	r5, r0
 8001770:	2900      	cmp	r1, #0
 8001772:	d043      	beq.n	80017fc <_free_r+0x90>
 8001774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001778:	1f0c      	subs	r4, r1, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	bfb8      	it	lt
 800177e:	18e4      	addlt	r4, r4, r3
 8001780:	f000 f8d0 	bl	8001924 <__malloc_lock>
 8001784:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <_free_r+0x94>)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	4610      	mov	r0, r2
 800178a:	b933      	cbnz	r3, 800179a <_free_r+0x2e>
 800178c:	6063      	str	r3, [r4, #4]
 800178e:	6014      	str	r4, [r2, #0]
 8001790:	4628      	mov	r0, r5
 8001792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001796:	f000 b8cb 	b.w	8001930 <__malloc_unlock>
 800179a:	42a3      	cmp	r3, r4
 800179c:	d90a      	bls.n	80017b4 <_free_r+0x48>
 800179e:	6821      	ldr	r1, [r4, #0]
 80017a0:	1862      	adds	r2, r4, r1
 80017a2:	4293      	cmp	r3, r2
 80017a4:	bf01      	itttt	eq
 80017a6:	681a      	ldreq	r2, [r3, #0]
 80017a8:	685b      	ldreq	r3, [r3, #4]
 80017aa:	1852      	addeq	r2, r2, r1
 80017ac:	6022      	streq	r2, [r4, #0]
 80017ae:	6063      	str	r3, [r4, #4]
 80017b0:	6004      	str	r4, [r0, #0]
 80017b2:	e7ed      	b.n	8001790 <_free_r+0x24>
 80017b4:	461a      	mov	r2, r3
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	b10b      	cbz	r3, 80017be <_free_r+0x52>
 80017ba:	42a3      	cmp	r3, r4
 80017bc:	d9fa      	bls.n	80017b4 <_free_r+0x48>
 80017be:	6811      	ldr	r1, [r2, #0]
 80017c0:	1850      	adds	r0, r2, r1
 80017c2:	42a0      	cmp	r0, r4
 80017c4:	d10b      	bne.n	80017de <_free_r+0x72>
 80017c6:	6820      	ldr	r0, [r4, #0]
 80017c8:	4401      	add	r1, r0
 80017ca:	1850      	adds	r0, r2, r1
 80017cc:	4283      	cmp	r3, r0
 80017ce:	6011      	str	r1, [r2, #0]
 80017d0:	d1de      	bne.n	8001790 <_free_r+0x24>
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4401      	add	r1, r0
 80017d8:	6011      	str	r1, [r2, #0]
 80017da:	6053      	str	r3, [r2, #4]
 80017dc:	e7d8      	b.n	8001790 <_free_r+0x24>
 80017de:	d902      	bls.n	80017e6 <_free_r+0x7a>
 80017e0:	230c      	movs	r3, #12
 80017e2:	602b      	str	r3, [r5, #0]
 80017e4:	e7d4      	b.n	8001790 <_free_r+0x24>
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	1821      	adds	r1, r4, r0
 80017ea:	428b      	cmp	r3, r1
 80017ec:	bf01      	itttt	eq
 80017ee:	6819      	ldreq	r1, [r3, #0]
 80017f0:	685b      	ldreq	r3, [r3, #4]
 80017f2:	1809      	addeq	r1, r1, r0
 80017f4:	6021      	streq	r1, [r4, #0]
 80017f6:	6063      	str	r3, [r4, #4]
 80017f8:	6054      	str	r4, [r2, #4]
 80017fa:	e7c9      	b.n	8001790 <_free_r+0x24>
 80017fc:	bd38      	pop	{r3, r4, r5, pc}
 80017fe:	bf00      	nop
 8001800:	2000008c 	.word	0x2000008c

08001804 <_malloc_r>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	1ccd      	adds	r5, r1, #3
 8001808:	f025 0503 	bic.w	r5, r5, #3
 800180c:	3508      	adds	r5, #8
 800180e:	2d0c      	cmp	r5, #12
 8001810:	bf38      	it	cc
 8001812:	250c      	movcc	r5, #12
 8001814:	2d00      	cmp	r5, #0
 8001816:	4606      	mov	r6, r0
 8001818:	db01      	blt.n	800181e <_malloc_r+0x1a>
 800181a:	42a9      	cmp	r1, r5
 800181c:	d903      	bls.n	8001826 <_malloc_r+0x22>
 800181e:	230c      	movs	r3, #12
 8001820:	6033      	str	r3, [r6, #0]
 8001822:	2000      	movs	r0, #0
 8001824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001826:	f000 f87d 	bl	8001924 <__malloc_lock>
 800182a:	4921      	ldr	r1, [pc, #132]	; (80018b0 <_malloc_r+0xac>)
 800182c:	680a      	ldr	r2, [r1, #0]
 800182e:	4614      	mov	r4, r2
 8001830:	b99c      	cbnz	r4, 800185a <_malloc_r+0x56>
 8001832:	4f20      	ldr	r7, [pc, #128]	; (80018b4 <_malloc_r+0xb0>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b923      	cbnz	r3, 8001842 <_malloc_r+0x3e>
 8001838:	4621      	mov	r1, r4
 800183a:	4630      	mov	r0, r6
 800183c:	f000 f862 	bl	8001904 <_sbrk_r>
 8001840:	6038      	str	r0, [r7, #0]
 8001842:	4629      	mov	r1, r5
 8001844:	4630      	mov	r0, r6
 8001846:	f000 f85d 	bl	8001904 <_sbrk_r>
 800184a:	1c43      	adds	r3, r0, #1
 800184c:	d123      	bne.n	8001896 <_malloc_r+0x92>
 800184e:	230c      	movs	r3, #12
 8001850:	4630      	mov	r0, r6
 8001852:	6033      	str	r3, [r6, #0]
 8001854:	f000 f86c 	bl	8001930 <__malloc_unlock>
 8001858:	e7e3      	b.n	8001822 <_malloc_r+0x1e>
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	1b5b      	subs	r3, r3, r5
 800185e:	d417      	bmi.n	8001890 <_malloc_r+0x8c>
 8001860:	2b0b      	cmp	r3, #11
 8001862:	d903      	bls.n	800186c <_malloc_r+0x68>
 8001864:	6023      	str	r3, [r4, #0]
 8001866:	441c      	add	r4, r3
 8001868:	6025      	str	r5, [r4, #0]
 800186a:	e004      	b.n	8001876 <_malloc_r+0x72>
 800186c:	6863      	ldr	r3, [r4, #4]
 800186e:	42a2      	cmp	r2, r4
 8001870:	bf0c      	ite	eq
 8001872:	600b      	streq	r3, [r1, #0]
 8001874:	6053      	strne	r3, [r2, #4]
 8001876:	4630      	mov	r0, r6
 8001878:	f000 f85a 	bl	8001930 <__malloc_unlock>
 800187c:	f104 000b 	add.w	r0, r4, #11
 8001880:	1d23      	adds	r3, r4, #4
 8001882:	f020 0007 	bic.w	r0, r0, #7
 8001886:	1ac2      	subs	r2, r0, r3
 8001888:	d0cc      	beq.n	8001824 <_malloc_r+0x20>
 800188a:	1a1b      	subs	r3, r3, r0
 800188c:	50a3      	str	r3, [r4, r2]
 800188e:	e7c9      	b.n	8001824 <_malloc_r+0x20>
 8001890:	4622      	mov	r2, r4
 8001892:	6864      	ldr	r4, [r4, #4]
 8001894:	e7cc      	b.n	8001830 <_malloc_r+0x2c>
 8001896:	1cc4      	adds	r4, r0, #3
 8001898:	f024 0403 	bic.w	r4, r4, #3
 800189c:	42a0      	cmp	r0, r4
 800189e:	d0e3      	beq.n	8001868 <_malloc_r+0x64>
 80018a0:	1a21      	subs	r1, r4, r0
 80018a2:	4630      	mov	r0, r6
 80018a4:	f000 f82e 	bl	8001904 <_sbrk_r>
 80018a8:	3001      	adds	r0, #1
 80018aa:	d1dd      	bne.n	8001868 <_malloc_r+0x64>
 80018ac:	e7cf      	b.n	800184e <_malloc_r+0x4a>
 80018ae:	bf00      	nop
 80018b0:	2000008c 	.word	0x2000008c
 80018b4:	20000090 	.word	0x20000090

080018b8 <_realloc_r>:
 80018b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ba:	4607      	mov	r7, r0
 80018bc:	4614      	mov	r4, r2
 80018be:	460e      	mov	r6, r1
 80018c0:	b921      	cbnz	r1, 80018cc <_realloc_r+0x14>
 80018c2:	4611      	mov	r1, r2
 80018c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80018c8:	f7ff bf9c 	b.w	8001804 <_malloc_r>
 80018cc:	b922      	cbnz	r2, 80018d8 <_realloc_r+0x20>
 80018ce:	f7ff ff4d 	bl	800176c <_free_r>
 80018d2:	4625      	mov	r5, r4
 80018d4:	4628      	mov	r0, r5
 80018d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018d8:	f000 f830 	bl	800193c <_malloc_usable_size_r>
 80018dc:	42a0      	cmp	r0, r4
 80018de:	d20f      	bcs.n	8001900 <_realloc_r+0x48>
 80018e0:	4621      	mov	r1, r4
 80018e2:	4638      	mov	r0, r7
 80018e4:	f7ff ff8e 	bl	8001804 <_malloc_r>
 80018e8:	4605      	mov	r5, r0
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d0f2      	beq.n	80018d4 <_realloc_r+0x1c>
 80018ee:	4631      	mov	r1, r6
 80018f0:	4622      	mov	r2, r4
 80018f2:	f7ff fbf3 	bl	80010dc <memcpy>
 80018f6:	4631      	mov	r1, r6
 80018f8:	4638      	mov	r0, r7
 80018fa:	f7ff ff37 	bl	800176c <_free_r>
 80018fe:	e7e9      	b.n	80018d4 <_realloc_r+0x1c>
 8001900:	4635      	mov	r5, r6
 8001902:	e7e7      	b.n	80018d4 <_realloc_r+0x1c>

08001904 <_sbrk_r>:
 8001904:	b538      	push	{r3, r4, r5, lr}
 8001906:	2300      	movs	r3, #0
 8001908:	4d05      	ldr	r5, [pc, #20]	; (8001920 <_sbrk_r+0x1c>)
 800190a:	4604      	mov	r4, r0
 800190c:	4608      	mov	r0, r1
 800190e:	602b      	str	r3, [r5, #0]
 8001910:	f7ff fae2 	bl	8000ed8 <_sbrk>
 8001914:	1c43      	adds	r3, r0, #1
 8001916:	d102      	bne.n	800191e <_sbrk_r+0x1a>
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	b103      	cbz	r3, 800191e <_sbrk_r+0x1a>
 800191c:	6023      	str	r3, [r4, #0]
 800191e:	bd38      	pop	{r3, r4, r5, pc}
 8001920:	2000019c 	.word	0x2000019c

08001924 <__malloc_lock>:
 8001924:	4801      	ldr	r0, [pc, #4]	; (800192c <__malloc_lock+0x8>)
 8001926:	f000 b811 	b.w	800194c <__retarget_lock_acquire_recursive>
 800192a:	bf00      	nop
 800192c:	200001a4 	.word	0x200001a4

08001930 <__malloc_unlock>:
 8001930:	4801      	ldr	r0, [pc, #4]	; (8001938 <__malloc_unlock+0x8>)
 8001932:	f000 b80c 	b.w	800194e <__retarget_lock_release_recursive>
 8001936:	bf00      	nop
 8001938:	200001a4 	.word	0x200001a4

0800193c <_malloc_usable_size_r>:
 800193c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001940:	1f18      	subs	r0, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	bfbc      	itt	lt
 8001946:	580b      	ldrlt	r3, [r1, r0]
 8001948:	18c0      	addlt	r0, r0, r3
 800194a:	4770      	bx	lr

0800194c <__retarget_lock_acquire_recursive>:
 800194c:	4770      	bx	lr

0800194e <__retarget_lock_release_recursive>:
 800194e:	4770      	bx	lr

08001950 <_init>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	bf00      	nop
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr

0800195c <_fini>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	bf00      	nop
 8001960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001962:	bc08      	pop	{r3}
 8001964:	469e      	mov	lr, r3
 8001966:	4770      	bx	lr
