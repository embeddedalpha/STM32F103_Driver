/*
 * CAN.c
 *
 *  Created on: May 16, 2022
 *      Author: Kunal
 */


#include "CAN.h"


void CAN_Init(CAN_Config mailbox)
{
	RCC -> APB1ENR |= RCC_APB1ENR_CAN1EN;

	GPIO_Pin_Setup(GPIOA, 12, ALT_PUSH_PULL_OUTPUT);
//	GPIO_Pin_Setup(GPIOA, 11, FLOATING_INPUT);

	CAN1 -> MCR |= CAN_MCR_INRQ;
	while(!(CAN1 -> MSR & CAN_MSR_INAK)){}
	CAN1 -> MCR |= CAN_MCR_ABOM;
	CAN1 -> BTR = mailbox.baudrate;
	CAN1 -> FMR |= CAN_FMR_FINIT;
	CAN1 -> FMR &= 0xFFFFC0FF;
	CAN1 -> FMR |= 0x1C << 8;

	//Deactivate Filter:
	CAN1 -> FA1R &= ~(1 << mailbox.filter_index);
	//Set Filter Scale
	if(mailbox.filter_scale == CAN_Filter_Scale_16bit) CAN1 -> FS1R &= ~(1 << mailbox.filter_index);
	if(mailbox.filter_scale == CAN_Filter_Scale_32bit) CAN1 -> FS1R |=  (1 << mailbox.filter_index);
	//Set Filter Type
	if(mailbox.filter_type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |=  (1 << mailbox.filter_index);
	if(mailbox.filter_type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << mailbox.filter_index);
	//Set FIFO for Filter Bank
	if(mailbox.filter_type == CAN_Filter_Bank_FIFO1) CAN1 -> FFA1R |=  (1 << mailbox.filter_index);
	if(mailbox.filter_type == CAN_Filter_Bank_FIFO0) CAN1 -> FFA1R &= ~(1 << mailbox.filter_index);
	//Set FIFO Bank
	CAN1 -> sFilterRegister[mailbox.filter_index].FR1 = mailbox.filter_bank1;
	CAN1 -> sFilterRegister[mailbox.filter_index].FR2 = mailbox.filter_bank2;
	CAN1 -> FA1R |= 1 << mailbox.filter_index;

	CAN1 -> FMR &= ~CAN_FMR_FINIT;
	CAN1 -> MCR &= ~CAN_MCR_INRQ;
	CAN1 -> MCR &= ~CAN_MCR_INRQ;
	while((CAN1->MSR & CAN_MSR_INAK));

//	CAN1 -> MCR |= CAN_MCR_DBF | CAN_MCR_RESET | CAN_MCR_SLEEP;
//	while(!(CAN1 -> MSR & CAN_MSR_SLAK)){}
//	CAN1 -> MCR &= ~CAN_MCR_SLEEP;
//	CAN1 -> MCR |= CAN_MCR_INRQ;
//	while((CAN1 -> MSR & CAN_MSR_SLAK)){}
//	while(!(CAN1-> MSR & CAN_MSR_INAK)){}
//	CAN1 -> BTR = mailbox.baudrate;
//	CAN1->BTR |= CAN_BTR_LBKM;  //SET LBKM BIT
//	CAN1 -> IER |= CAN_IER_FFIE1 | CAN_IER_FFIE0;
//	if(mailbox.timestamp_enable == CAN_Timestamp_Enable)
//	{
//		CAN1 -> MCR |= CAN_MCR_TTCM;
//	}
//	else
//	{
//		CAN1 -> MCR &= ~CAN_MCR_TTCM;
//	}
//
//    CAN_Filter(0, 1, CAN_FILTER_LIST_MODE, 0x201, 0x202<<21);
//    CAN1->MCR &= ~CAN_MCR_INRQ;
//    CAN1->MCR &= ~CAN_MCR_INRQ;
//    while((CAN1->MSR & CAN_MSR_INAK));
//
//    NVIC_SetPriority(CAN1_RX1_IRQn,0);
//    NVIC_EnableIRQ(CAN1_RX1_IRQn);

}

/*
 * Figure out which mode is the controller is in right now.
 * Print that out in debug mode
 * Then make a decision to flip the necessary bits to go into Sleep mode from that mode.
 */
void CAN_Enter_Sleep_Mode(void)
{
	switch (CAN_Get_Operating_Mode())
	{
//=================================================================================================//
		case CAN_Initialization_Mode:
		{
#if _CAN_DEBUG_
			printConsole("Controller is going from Initialization Mode to Sleep Mode \r\n");
#endif
			CAN1 -> MCR |= CAN_MCR_SLEEP;
			CAN1 -> MCR &= ~CAN_MCR_INRQ;
			while(!(CAN1 -> MSR & CAN_MSR_SLAK)){} //Wait till SLAK does not go to 1
			while((CAN1 -> MSR & CAN_MSR_INAK)){}  //Wait till INAK does not go to 0
#if _CAN_DEBUG_
			printConsole("Controller is in Sleep Mode \r\n");
#endif
		}
			break;
//=================================================================================================//
		case CAN_Normal_Mode:
		{
#if _CAN_DEBUG_
			printConsole("Controller is going from Normal Mode to Sleep Mode \r\n");
#endif
			CAN1 -> MCR |= CAN_MCR_SLEEP;
			while(!(CAN1 -> MSR & CAN_MSR_SLAK)){} //Wait till SLAK does not go to 1
#if _CAN_DEBUG_
			printConsole("Controller is in Sleep Mode \r\n");
#endif
		}
			break;
//=================================================================================================//
		case CAN_Sleep_Mode:
		{
#if _CAN_DEBUG_
			printConsole("Controller is in Sleep Mode \r\n");
#endif
		}
			break;
	}

}


int CAN_Get_Operating_Mode(void)
{
	int temp;
	int reg = CAN1 -> MSR;

	if( ((reg & CAN_MSR_SLAK) != CAN_MSR_SLAK) && ((reg & CAN_MSR_INAK) == CAN_MSR_INAK) )
	{
		temp = CAN_Initialization_Mode;
#if _CAN_DEBUG_
	printConsole("CAN controller is in Initialization Mode \r\n");
#endif
	}

	if( ((reg & CAN_MSR_SLAK) != CAN_MSR_SLAK) && ((reg & CAN_MSR_INAK) != CAN_MSR_INAK) )
	{
		temp = CAN_Normal_Mode;
#if _CAN_DEBUG_
	printConsole("CAN controller is in Normal Mode \r\n");
#endif
	}

	if( ((reg & CAN_MSR_SLAK) == CAN_MSR_SLAK) && ((reg & CAN_MSR_INAK) != CAN_MSR_INAK) )
	{
		temp = CAN_Sleep_Mode;
#if _CAN_DEBUG_
	printConsole("CAN controller is in Sleep Mode \r\n");
#endif
	}

	return temp;
}



void CAN_ID_Filter(int filter_number, int filter_type, int32_t reg1, int32_t reg2 )
{
	CAN1 -> FMR |= CAN_FMR_FINIT;
	CAN1 -> FM1R |= filter_type << filter_number;
	CAN1 -> FS1R |= 1 << filter_number;
	CAN1 -> sFilterRegister[filter_number].FR1 = reg1;
	CAN1 -> sFilterRegister[filter_number].FR2 = reg2;
	CAN1 -> FMR &= ~CAN_FMR_FINIT;
}



void CAN_Send_Payload(CAN_Config mailbox)
{
	switch (mailbox.TX_Mailbox_ID)
	{
//=================================================================================================//
		case CAN_TX_Mailbox_1:{
			switch (mailbox.TX_ID_Type)
			{
				case CAN_ID_Standard:
				{
					CAN1 -> sTxMailBox[0].TIR  = mailbox.TX_ID << 21;
					CAN1 -> sTxMailBox[0].TIR  &= ~CAN_TI0R_EXID;
#if _CAN_DEBUG_
					printConsole("Standard ID : %d\r\n",mailbox.TX_ID);
#endif
				}
					break;
				case CAN_ID_Extended:
				{
					CAN1 -> sTxMailBox[0].TIR  = mailbox.TX_ID << 3;
					CAN1 -> sTxMailBox[0].TIR  |= CAN_TI0R_EXID;
#if _CAN_DEBUG_
					printConsole("Extended ID : %d\r\n",mailbox.TX_ID);
#endif
				}
					break;
			}

			switch (mailbox.TX_Frame_Type)
			{
				case CAN_Frame_Data:
				{
					CAN1 -> sTxMailBox[0].TIR  &= ~CAN_TI0R_RTR;
#if _CAN_DEBUG_
					printConsole("Frame Type : Data\r\n");
#endif
				}
					break;
				case CAN_Frame_Remote:
				{
					CAN1 -> sTxMailBox[0].TIR  |= CAN_TI0R_RTR;
#if _CAN_DEBUG_
					printConsole("Frame Type : Remote\r\n");
#endif
				}
					break;
			}

			if(mailbox.timestamp_enable == CAN_Timestamp_Enable)
			{
				CAN1 -> sTxMailBox[0].TDTR = mailbox.TX_data_length | CAN_TDT0R_TGT;
				CAN1 -> sTxMailBox[0].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
				CAN1 -> sTxMailBox[0].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 ;
				CAN1 -> sTxMailBox[0].TIR  |= CAN_TI0R_TXRQ;
#if _CAN_DEBUG_
					printConsole("Data  : %x, %x, %x, %x, %x\r\n",mailbox.TX_data[0],mailbox.TX_data[1],mailbox.TX_data[2],mailbox.TX_data[3],mailbox.TX_data[4],mailbox.TX_data[5]);
					printConsole("Time_Stamp : %"PRIx32"\r\n",((CAN1 -> sTxMailBox[0].TDTR) >> 16));
#endif
			}
			else
			{
				CAN1 -> sTxMailBox[0].TDTR = mailbox.TX_data_length;
				CAN1 -> sTxMailBox[0].TDTR &= ~CAN_TDT0R_TGT;
				CAN1 -> sTxMailBox[0].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
				CAN1 -> sTxMailBox[0].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 | mailbox.TX_data[1] << 8 | mailbox.TX_data[0] << 0;
				CAN1 -> sTxMailBox[0].TIR  |= CAN_TI0R_TXRQ;
#if _CAN_DEBUG_
				printConsole("Data  : %d, %d, %d, %d, %d, %d, %d\r\n",mailbox.TX_data[0],mailbox.TX_data[1],mailbox.TX_data[2],mailbox.TX_data[3],mailbox.TX_data[4],mailbox.TX_data[5],mailbox.TX_data[6],mailbox.TX_data[7]);
#endif
			}

		}
			break;

//=================================================================================================//
		case CAN_TX_Mailbox_2:{
			switch (mailbox.TX_ID_Type)
			{
				case CAN_ID_Standard:
				{
					CAN1 -> sTxMailBox[1].TIR  = mailbox.TX_ID << 21;
					CAN1 -> sTxMailBox[1].TIR  &= ~CAN_TI1R_EXID;
				}
					break;
				case CAN_ID_Extended:
				{
					CAN1 -> sTxMailBox[1].TIR  = mailbox.TX_ID << 3;
					CAN1 -> sTxMailBox[1].TIR  |= CAN_TI1R_EXID;
				}
					break;
			}

			switch (mailbox.TX_Frame_Type)
			{
				case CAN_Frame_Data:
				{
					CAN1 -> sTxMailBox[1].TIR  &= ~CAN_TI1R_RTR;
				}
					break;
				case CAN_Frame_Remote:
				{
					CAN1 -> sTxMailBox[1].TIR  |= CAN_TI1R_RTR;
				}
					break;
			}
			if(mailbox.timestamp_enable == CAN_Timestamp_Enable)
			{
				CAN1 -> sTxMailBox[1].TDTR = mailbox.TX_data_length | CAN_TDT1R_TGT;
				CAN1 -> sTxMailBox[1].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
				CAN1 -> sTxMailBox[1].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 ;

			}
			else
			{
				CAN1 -> sTxMailBox[1].TDTR = mailbox.TX_data_length;
				CAN1 -> sTxMailBox[1].TDTR &= ~CAN_TDT1R_TGT;
				CAN1 -> sTxMailBox[1].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
				CAN1 -> sTxMailBox[1].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 | mailbox.TX_data[1] << 8 | mailbox.TX_data[0] << 0;

			}
			CAN1 -> sTxMailBox[1].TIR  |= CAN_TI1R_TXRQ;
		}
		break;

//=================================================================================================//
				case CAN_TX_Mailbox_3:{
					switch (mailbox.TX_ID_Type)
					{
						case CAN_ID_Standard:
						{
							CAN1 -> sTxMailBox[2].TIR  = mailbox.TX_ID << 21;
							CAN1 -> sTxMailBox[2].TIR  &= ~CAN_TI2R_EXID;
						}
							break;
						case CAN_ID_Extended:
						{
							CAN1 -> sTxMailBox[2].TIR  = mailbox.TX_ID << 3;
							CAN1 -> sTxMailBox[2].TIR  |= CAN_TI2R_EXID;
						}
							break;
					}

					switch (mailbox.TX_Frame_Type)
					{
						case CAN_Frame_Data:
						{
							CAN1 -> sTxMailBox[2].TIR  &= ~CAN_TI2R_RTR;
						}
							break;
						case CAN_Frame_Remote:
						{
							CAN1 -> sTxMailBox[2].TIR  |= CAN_TI2R_RTR;
						}
							break;
					}
					if(mailbox.timestamp_enable == CAN_Timestamp_Enable)
					{
						CAN1 -> sTxMailBox[2].TDTR = mailbox.TX_data_length | CAN_TDT2R_TGT;
						CAN1 -> sTxMailBox[2].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
						CAN1 -> sTxMailBox[2].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 ;

					}
					else
					{
						CAN1 -> sTxMailBox[2].TDTR = mailbox.TX_data_length;
						CAN1 -> sTxMailBox[2].TDTR &= ~CAN_TDT2R_TGT;
						CAN1 -> sTxMailBox[2].TDHR = mailbox.TX_data[7] << 24 | mailbox.TX_data[6] << 16 | mailbox.TX_data[5] << 8 | mailbox.TX_data[4] << 0;
						CAN1 -> sTxMailBox[2].TDLR = mailbox.TX_data[3] << 24 | mailbox.TX_data[2] << 16 | mailbox.TX_data[1] << 8 | mailbox.TX_data[0] << 0;

					}
					CAN1 -> sTxMailBox[2].TIR  |= CAN_TI2R_TXRQ;
				}
				break;
	}
}


void CAN_Filter(int filter_bank_number, int filter_scale, int filter_type, int32_t filter_data_1, int32_t filter_data_2)
{
	//Deactivate Filters for configuration
	CAN1 -> FMR |= CAN_FMR_FINIT;
	CAN1 -> FA1R &= ~(1 << filter_bank_number);
//	CAN1 -> FMR |= 28 << 8;
	//Activate specific filter
	//Select Scaling of filter : 16 / 32 bit
	if(filter_scale) CAN1 -> FS1R |= 1 << filter_bank_number;
	else CAN1 -> FS1R |= ~(1 << filter_bank_number);
	//Select Filter Mode
	if(filter_type == CAN_FILTER_LIST_MODE) CAN1 -> FM1R |= 1 << filter_bank_number;
	if(filter_type == CAN_FILTER_MASK_MODE) CAN1 -> FM1R &= ~(1 << filter_bank_number);

	CAN1 ->sFilterRegister[filter_bank_number].FR1 = filter_data_1 << 21;
	CAN1 ->sFilterRegister[filter_bank_number].FR2 = filter_data_2 << 21;

	CAN1 -> FMR &= ~CAN_FMR_FINIT;
	CAN1 -> FA1R |= (1 << filter_bank_number);

}
